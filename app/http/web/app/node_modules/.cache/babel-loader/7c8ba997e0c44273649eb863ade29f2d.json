{"ast":null,"code":"//    abc_engraver_controller.js: Controls the engraving process of an ABCJS abstract syntax tree as produced by ABCJS/parse\n//    Copyright (C) 2014-2018 Gregory Dyke (gregdyke at gmail dot com)\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*global window, Math, Raphael */\nvar spacing = require('./abc_spacing');\n\nvar AbstractEngraver = require('./abc_abstract_engraver');\n\nvar Renderer = require('./abc_renderer');\n\nvar Raphael = require('raphael');\n/**\n * @class\n * Controls the engraving process, from ABCJS Abstract Syntax Tree (ABCJS AST) to rendered score sheet\n *\n * Call engraveABC to run the process. This creates a graphelems ABCJS Abstract Engraving Structure (ABCJS AES) that can be accessed through this.staffgroups\n * this data structure is first laid out (giving the graphelems x and y coordinates) and then drawn onto the renderer\n * each ABCJS AES represents a single staffgroup - all elements that are not in a staffgroup are rendered directly by the controller\n *\n * elements in ABCJS AES know their \"source data\" in the ABCJS AST, and their \"target shape\" \n * in the renderer for highlighting purposes\n *\n * @param {Object} paper SVG like object with methods path, text, etc.\n * @param {Object} params all the params -- documented on github //TODO-GD move some of that documentation here\n */\n\n\nvar EngraverController = function (paper, params) {\n  params = params || {};\n\n  if (!paper) {\n    // if a Raphael object was not passed in, create on here.\n    paper = Raphael(params.elementId, params.staffwidth, params.staffheight);\n  }\n\n  this.responsive = params.responsive;\n  this.space = 3 * spacing.SPACE;\n  this.scale = params.scale || undefined;\n\n  if (params.staffwidth) {\n    // Note: Normally all measurements to the engraver are in POINTS. However, if a person is formatting for the\n    // screen and directly inputting the width, then it is more logical to have the measurement in pixels.\n    this.staffwidthScreen = params.staffwidth;\n    this.staffwidthPrint = params.staffwidth;\n  } else {\n    this.staffwidthScreen = 740; // TODO-PER: Not sure where this number comes from, but this is how it's always been.\n\n    this.staffwidthPrint = 680; // The number of pixels in 8.5\", after 1cm of margin has been removed.\n  }\n\n  this.editable = params.editable || false;\n  this.listeners = [];\n  if (params.clickListener) this.addSelectListener(params.clickListener); // HACK-PER: Raphael doesn't support setting the class of an element, so this adds that support. This doesn't work on IE8 or less, though.\n\n  this.usingSvg = window.SVGAngle || document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? true : false; // Same test Raphael uses\n\n  if (this.usingSvg && params.add_classes) Raphael._availableAttrs['class'] = \"\";\n  Raphael._availableAttrs['text-decoration'] = \"\";\n  Raphael._availableAttrs['data-vertical'] = \"\"; //TODO-GD factor out all calls directly made to renderer.paper and fix all the coupling issues below\n\n  this.renderer = new Renderer(paper, params.regression, params.add_classes);\n  this.renderer.setPaddingOverride(params);\n  this.renderer.controller = this; // TODO-GD needed for highlighting\n\n  this.reset();\n};\n\nEngraverController.prototype.reset = function () {\n  this.selected = [];\n  this.ingroup = false;\n  this.staffgroups = [];\n  this.lastStaffGroupIndex = -1;\n  if (this.engraver) this.engraver.reset();\n  this.engraver = null;\n  this.renderer.reset();\n};\n/**\n * run the engraving process\n * @param {ABCJS.Tune|ABCJS.Tune[]} abctunes \n */\n\n\nEngraverController.prototype.engraveABC = function (abctunes, tuneNumber) {\n  if (abctunes[0] === undefined) {\n    abctunes = [abctunes];\n  }\n\n  this.reset();\n\n  for (var i = 0; i < abctunes.length; i++) {\n    if (tuneNumber === undefined) tuneNumber = i;\n    this.engraveTune(abctunes[i], tuneNumber);\n  }\n\n  if (this.renderer.doRegression) return this.renderer.regressionLines.join(\"\\n\");\n};\n/**\n * Some of the items on the page are not scaled, so adjust them in the opposite direction of scaling to cancel out the scaling.\n * @param {float} scale\n */\n\n\nEngraverController.prototype.adjustNonScaledItems = function (scale) {\n  this.width /= scale;\n  this.renderer.adjustNonScaledItems(scale);\n};\n/**\n * Run the engraving process on a single tune\n * @param {ABCJS.Tune} abctune\n */\n\n\nEngraverController.prototype.engraveTune = function (abctune, tuneNumber) {\n  this.renderer.lineNumber = null;\n  abctune.formatting.tripletfont = {\n    face: \"Times\",\n    size: 11,\n    weight: \"normal\",\n    style: \"italic\",\n    decoration: \"none\"\n  }; // TODO-PER: This font isn't defined in the standard, so it's hardcoded here for now.\n\n  this.renderer.abctune = abctune; // TODO-PER: this is just to get the font info.\n\n  this.renderer.setVerticalSpace(abctune.formatting);\n  this.renderer.measureNumber = null;\n  this.renderer.noteNumber = null;\n  this.renderer.setPrintMode(abctune.media === 'print');\n  var scale = abctune.formatting.scale ? abctune.formatting.scale : this.scale;\n  if (this.responsive === \"resize\") // The resizing will mess with the scaling, so just don't do it explicitly.\n    scale = undefined;\n  if (scale === undefined) scale = this.renderer.isPrint ? 0.75 : 1;\n  this.renderer.setPadding(abctune);\n  this.engraver = new AbstractEngraver(abctune.formatting.bagpipes, this.renderer, tuneNumber);\n  this.engraver.setStemHeight(this.renderer.spacing.stemHeight);\n  this.renderer.engraver = this.engraver; //TODO-PER: do we need this coupling? It's just used for the tempo\n\n  if (abctune.formatting.staffwidth) {\n    this.width = abctune.formatting.staffwidth * 1.33; // The width is expressed in pt; convert to px.\n  } else {\n    this.width = this.renderer.isPrint ? this.staffwidthPrint : this.staffwidthScreen;\n  }\n\n  this.adjustNonScaledItems(scale); // Generate the raw staff line data\n\n  var i;\n  var abcLine;\n  var hasPrintedTempo = false;\n\n  for (i = 0; i < abctune.lines.length; i++) {\n    abcLine = abctune.lines[i];\n\n    if (abcLine.staff) {\n      abcLine.staffGroup = this.engraver.createABCLine(abcLine.staff, !hasPrintedTempo ? abctune.metaText.tempo : null);\n      hasPrintedTempo = true;\n    }\n  } // Adjust the x-coordinates to their absolute positions\n\n\n  var maxWidth = this.width;\n\n  for (i = 0; i < abctune.lines.length; i++) {\n    abcLine = abctune.lines[i];\n\n    if (abcLine.staff) {\n      this.setXSpacing(abcLine.staffGroup, abctune.formatting, i === abctune.lines.length - 1, false);\n      if (abcLine.staffGroup.w > maxWidth) maxWidth = abcLine.staffGroup.w;\n    }\n  } // Layout the beams and add the stems to the beamed notes.\n\n\n  for (i = 0; i < abctune.lines.length; i++) {\n    abcLine = abctune.lines[i];\n\n    if (abcLine.staffGroup && abcLine.staffGroup.voices) {\n      for (var j = 0; j < abcLine.staffGroup.voices.length; j++) abcLine.staffGroup.voices[j].layoutBeams();\n\n      abcLine.staffGroup.setUpperAndLowerElements(this.renderer);\n    }\n  } // Set the staff spacing\n  // TODO-PER: we should have been able to do this by the time we called setUpperAndLowerElements, but for some reason the \"bottom\" element seems to be set as a side effect of setting the X spacing.\n\n\n  for (i = 0; i < abctune.lines.length; i++) {\n    abcLine = abctune.lines[i];\n\n    if (abcLine.staffGroup) {\n      abcLine.staffGroup.height = abcLine.staffGroup.calcHeight();\n    }\n  } // Do all the writing to output\n\n\n  this.renderer.topMargin(abctune); //this.renderer.printHorizontalLine(this.width + this.renderer.padding.left + this.renderer.padding.right);\n\n  this.renderer.engraveTopText(this.width, abctune);\n  this.renderer.addMusicPadding();\n  this.staffgroups = [];\n  this.lastStaffGroupIndex = -1;\n\n  for (var line = 0; line < abctune.lines.length; line++) {\n    this.renderer.lineNumber = line;\n    abcLine = abctune.lines[line];\n\n    if (abcLine.staff) {\n      this.engraveStaffLine(abcLine.staffGroup);\n    } else if (abcLine.subtitle && line !== 0) {\n      this.renderer.outputSubtitle(this.width, abcLine.subtitle);\n    } else if (abcLine.text !== undefined) {\n      this.renderer.outputFreeText(abcLine.text);\n    }\n  }\n\n  this.renderer.moveY(24); // TODO-PER: Empirically discovered. What variable should this be?\n\n  this.renderer.engraveExtraText(this.width, abctune);\n  this.renderer.setPaperSize(maxWidth, scale, this.responsive);\n};\n\nfunction calcHorizontalSpacing(isLastLine, stretchLast, targetWidth, lineWidth, spacing, spacingUnits, minSpace) {\n  // TODO-PER: This used to stretch the first line when it is the only line, but I'm not sure why. abcm2ps doesn't do that\n  if (isLastLine && lineWidth / targetWidth < 0.66 && !stretchLast) return null; // don't stretch last line too much\n\n  if (Math.abs(targetWidth - lineWidth) < 2) return null; // if we are already near the target width, we're done.\n\n  var relSpace = spacingUnits * spacing;\n  var constSpace = lineWidth - relSpace;\n\n  if (spacingUnits > 0) {\n    spacing = (targetWidth - constSpace) / spacingUnits;\n\n    if (spacing * minSpace > 50) {\n      spacing = 50 / minSpace;\n    }\n\n    return spacing;\n  }\n\n  return null;\n}\n/**\n * Do the x-axis positioning for a single line (a group of related staffs)\n * @param {ABCJS.Tune} abctune an ABCJS AST\n * @param {Object} staffGroup an staffGroup\n * @param {Object} formatting an formatting\n * @param {boolean} isLastLine is this the last line to be printed?\n * @private\n */\n\n\nEngraverController.prototype.setXSpacing = function (staffGroup, formatting, isLastLine, debug) {\n  var newspace = this.space; //var debug = true;\n\n  for (var it = 0; it < 8; it++) {\n    // TODO-PER: shouldn't need multiple passes, but each pass gets it closer to the right spacing. (Only affects long lines: normal lines break out of this loop quickly.)\n    staffGroup.layout(newspace, this.renderer, debug);\n    var stretchLast = formatting.stretchlast ? formatting.stretchlast : false;\n    newspace = calcHorizontalSpacing(isLastLine, stretchLast, this.width + this.renderer.padding.left, staffGroup.w, newspace, staffGroup.spacingunits, staffGroup.minspace);\n    if (debug) console.log(\"setXSpace\", it, staffGroup.w, newspace, staffGroup.minspace);\n    if (newspace === null) break;\n  }\n\n  centerWholeRests(staffGroup.voices); //this.renderer.printHorizontalLine(this.width);\n};\n/**\n * Engrave a single line (a group of related staffs)\n * @param {ABCJS.Tune} abctune an ABCJS AST\n * @param {Object} staffGroup an staffGroup\n * @private\n */\n\n\nEngraverController.prototype.engraveStaffLine = function (staffGroup) {\n  if (this.lastStaffGroupIndex > -1) this.renderer.addStaffPadding(this.staffgroups[this.lastStaffGroupIndex], staffGroup);\n  this.renderer.voiceNumber = null;\n  staffGroup.draw(this.renderer);\n  var height = staffGroup.height * spacing.STEP; //this.renderer.printVerticalLine(this.width+this.renderer.padding.left, this.renderer.y, this.renderer.y+height);\n\n  this.staffgroups[this.staffgroups.length] = staffGroup;\n  this.lastStaffGroupIndex = this.staffgroups.length - 1;\n  this.renderer.y += height;\n};\n/**\n * Called by the Abstract Engraving Structure or any other (e.g. midi playback) to say it was selected (notehead clicked on)\n * @protected\n */\n\n\nEngraverController.prototype.notifySelect = function (abselem, tuneNumber, classes) {\n  this.clearSelection();\n\n  if (abselem.highlight) {\n    this.selected = [abselem];\n    abselem.highlight();\n  }\n\n  var abcelem = abselem.abcelem || {};\n\n  for (var i = 0; i < this.listeners.length; i++) {\n    this.listeners[i](abcelem, tuneNumber, classes);\n  }\n};\n/**\n * Called by the Abstract Engraving Structure to say it was modified (e.g. notehead dragged)\n * @protected\n */\n// EngraverController.prototype.notifyChange = function (/*abselem*/) {\n//   for (var i=0; i<this.listeners.length;i++) {\n//     if (this.listeners[i].modelChanged)\n//       this.listeners[i].modelChanged();\n//   }\n// };\n\n/**\n *\n * @private\n */\n\n\nEngraverController.prototype.clearSelection = function () {\n  for (var i = 0; i < this.selected.length; i++) {\n    this.selected[i].unhighlight();\n  }\n\n  this.selected = [];\n};\n/**\n * @param {Object} listener\n * @param {Function} listener.modelChanged the model the listener passed to this controller has changed\n * @param {Function} listener.highlight the abcelem of the model the listener passed to this controller should be highlighted\n */\n\n\nEngraverController.prototype.addSelectListener = function (clickListener) {\n  this.listeners[this.listeners.length] = clickListener;\n};\n/**\n * Tell the controller to highlight some noteheads of its engraved score\n * @param {number} start the character in the source abc where highlighting should start\n * @param {number} end the character in the source abc where highlighting should end\n */\n\n\nEngraverController.prototype.rangeHighlight = function (start, end) {\n  this.clearSelection();\n\n  for (var line = 0; line < this.staffgroups.length; line++) {\n    var voices = this.staffgroups[line].voices;\n\n    for (var voice = 0; voice < voices.length; voice++) {\n      var elems = voices[voice].children;\n\n      for (var elem = 0; elem < elems.length; elem++) {\n        // Since the user can highlight more than an element, or part of an element, a hit is if any of the endpoints\n        // is inside the other range.\n        var elStart = elems[elem].abcelem.startChar;\n        var elEnd = elems[elem].abcelem.endChar;\n\n        if (end > elStart && start < elEnd || end === start && end === elEnd) {\n          //\t\tif (elems[elem].abcelem.startChar>=start && elems[elem].abcelem.endChar<=end) {\n          this.selected[this.selected.length] = elems[elem];\n          elems[elem].highlight();\n        }\n      }\n    }\n  }\n};\n\nfunction centerWholeRests(voices) {\n  // whole rests are a special case: if they are by themselves in a measure, then they should be centered.\n  // (If they are not by themselves, that is probably a user error, but we'll just center it between the two items to either side of it.)\n  for (var i = 0; i < voices.length; i++) {\n    var voice = voices[i]; // Look through all of the elements except for the first and last. If the whole note appears there then there isn't anything to center it between anyway.\n\n    for (var j = 1; j < voice.children.length - 1; j++) {\n      var absElem = voice.children[j];\n\n      if (absElem.abcelem.rest && (absElem.abcelem.rest.type === 'whole' || absElem.abcelem.rest.type === 'multimeasure')) {\n        var before = voice.children[j - 1];\n        var after = voice.children[j + 1];\n        var midpoint = (after.x - before.x) / 2 + before.x;\n        absElem.x = midpoint - absElem.w / 2;\n\n        for (var k = 0; k < absElem.children.length; k++) absElem.children[k].x = absElem.x;\n      }\n    }\n  }\n}\n\nmodule.exports = EngraverController;","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/node_modules/abcjs/src/write/abc_engraver_controller.js"],"names":["spacing","require","AbstractEngraver","Renderer","Raphael","EngraverController","paper","params","elementId","staffwidth","staffheight","responsive","space","SPACE","scale","undefined","staffwidthScreen","staffwidthPrint","editable","listeners","clickListener","addSelectListener","usingSvg","window","SVGAngle","document","implementation","hasFeature","add_classes","_availableAttrs","renderer","regression","setPaddingOverride","controller","reset","prototype","selected","ingroup","staffgroups","lastStaffGroupIndex","engraver","engraveABC","abctunes","tuneNumber","i","length","engraveTune","doRegression","regressionLines","join","adjustNonScaledItems","width","abctune","lineNumber","formatting","tripletfont","face","size","weight","style","decoration","setVerticalSpace","measureNumber","noteNumber","setPrintMode","media","isPrint","setPadding","bagpipes","setStemHeight","stemHeight","abcLine","hasPrintedTempo","lines","staff","staffGroup","createABCLine","metaText","tempo","maxWidth","setXSpacing","w","voices","j","layoutBeams","setUpperAndLowerElements","height","calcHeight","topMargin","engraveTopText","addMusicPadding","line","engraveStaffLine","subtitle","outputSubtitle","text","outputFreeText","moveY","engraveExtraText","setPaperSize","calcHorizontalSpacing","isLastLine","stretchLast","targetWidth","lineWidth","spacingUnits","minSpace","Math","abs","relSpace","constSpace","debug","newspace","it","layout","stretchlast","padding","left","spacingunits","minspace","console","log","centerWholeRests","addStaffPadding","voiceNumber","draw","STEP","y","notifySelect","abselem","classes","clearSelection","highlight","abcelem","unhighlight","rangeHighlight","start","end","voice","elems","children","elem","elStart","startChar","elEnd","endChar","absElem","rest","type","before","after","midpoint","x","k","module","exports"],"mappings":"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","sourcesContent":["//    abc_engraver_controller.js: Controls the engraving process of an ABCJS abstract syntax tree as produced by ABCJS/parse\n//    Copyright (C) 2014-2018 Gregory Dyke (gregdyke at gmail dot com)\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n/*global window, Math, Raphael */\n\nvar spacing = require('./abc_spacing');\nvar AbstractEngraver = require('./abc_abstract_engraver');\nvar Renderer = require('./abc_renderer');\nvar Raphael = require('raphael');\n\n/**\n * @class\n * Controls the engraving process, from ABCJS Abstract Syntax Tree (ABCJS AST) to rendered score sheet\n *\n * Call engraveABC to run the process. This creates a graphelems ABCJS Abstract Engraving Structure (ABCJS AES) that can be accessed through this.staffgroups\n * this data structure is first laid out (giving the graphelems x and y coordinates) and then drawn onto the renderer\n * each ABCJS AES represents a single staffgroup - all elements that are not in a staffgroup are rendered directly by the controller\n *\n * elements in ABCJS AES know their \"source data\" in the ABCJS AST, and their \"target shape\" \n * in the renderer for highlighting purposes\n *\n * @param {Object} paper SVG like object with methods path, text, etc.\n * @param {Object} params all the params -- documented on github //TODO-GD move some of that documentation here\n */\nvar EngraverController = function(paper, params) {\n  params = params || {};\n  if (!paper) {\n  \t// if a Raphael object was not passed in, create on here.\n\t  paper = Raphael(params.elementId, params.staffwidth, params.staffheight);\n  }\n  this.responsive = params.responsive;\n  this.space = 3*spacing.SPACE;\n  this.scale = params.scale || undefined;\n\tif (params.staffwidth) {\n\t\t// Note: Normally all measurements to the engraver are in POINTS. However, if a person is formatting for the\n\t\t// screen and directly inputting the width, then it is more logical to have the measurement in pixels.\n\t\tthis.staffwidthScreen = params.staffwidth;\n\t\tthis.staffwidthPrint = params.staffwidth;\n\t} else {\n\t\tthis.staffwidthScreen = 740; // TODO-PER: Not sure where this number comes from, but this is how it's always been.\n\t\tthis.staffwidthPrint = 680; // The number of pixels in 8.5\", after 1cm of margin has been removed.\n\t}\n  this.editable = params.editable || false;\n\tthis.listeners = [];\n\tif (params.clickListener)\n\t\tthis.addSelectListener(params.clickListener);\n\n\t// HACK-PER: Raphael doesn't support setting the class of an element, so this adds that support. This doesn't work on IE8 or less, though.\n\tthis.usingSvg = (window.SVGAngle || document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? true : false); // Same test Raphael uses\n\tif (this.usingSvg && params.add_classes)\n\t\tRaphael._availableAttrs['class'] = \"\";\n\tRaphael._availableAttrs['text-decoration'] = \"\";\n\tRaphael._availableAttrs['data-vertical'] = \"\";\n\n  //TODO-GD factor out all calls directly made to renderer.paper and fix all the coupling issues below\n  this.renderer=new Renderer(paper, params.regression, params.add_classes);\n\tthis.renderer.setPaddingOverride(params);\n  this.renderer.controller = this; // TODO-GD needed for highlighting\n\n\tthis.reset();\n};\n\nEngraverController.prototype.reset = function() {\n\tthis.selected = [];\n\tthis.ingroup = false;\n\tthis.staffgroups = [];\n\tthis.lastStaffGroupIndex = -1;\n\tif (this.engraver)\n\t\tthis.engraver.reset();\n\tthis.engraver = null;\n\tthis.renderer.reset();\n};\n\n/**\n * run the engraving process\n * @param {ABCJS.Tune|ABCJS.Tune[]} abctunes \n */\nEngraverController.prototype.engraveABC = function(abctunes, tuneNumber) {\n  if (abctunes[0]===undefined) {\n    abctunes = [abctunes];\n  }\n\tthis.reset();\n\n  for (var i = 0; i < abctunes.length; i++) {\n  \tif (tuneNumber === undefined)\n  \t\ttuneNumber = i;\n    this.engraveTune(abctunes[i], tuneNumber);\n  }\n\tif (this.renderer.doRegression)\n\t\treturn this.renderer.regressionLines.join(\"\\n\");\n};\n\n/**\n * Some of the items on the page are not scaled, so adjust them in the opposite direction of scaling to cancel out the scaling.\n * @param {float} scale\n */\nEngraverController.prototype.adjustNonScaledItems = function (scale) {\n\tthis.width /= scale;\n\tthis.renderer.adjustNonScaledItems(scale);\n};\n\n/**\n * Run the engraving process on a single tune\n * @param {ABCJS.Tune} abctune\n */\nEngraverController.prototype.engraveTune = function (abctune, tuneNumber) {\n\tthis.renderer.lineNumber = null;\n\tabctune.formatting.tripletfont = {face: \"Times\", size: 11, weight: \"normal\", style: \"italic\", decoration: \"none\"}; // TODO-PER: This font isn't defined in the standard, so it's hardcoded here for now.\n\n\tthis.renderer.abctune = abctune; // TODO-PER: this is just to get the font info.\n\tthis.renderer.setVerticalSpace(abctune.formatting);\n\tthis.renderer.measureNumber = null;\n\tthis.renderer.noteNumber = null;\n\tthis.renderer.setPrintMode(abctune.media === 'print');\n\tvar scale = abctune.formatting.scale ? abctune.formatting.scale : this.scale;\n\tif (this.responsive === \"resize\") // The resizing will mess with the scaling, so just don't do it explicitly.\n\t\tscale = undefined;\n\tif (scale === undefined) scale = this.renderer.isPrint ? 0.75 : 1;\n\tthis.renderer.setPadding(abctune);\n\tthis.engraver = new AbstractEngraver(abctune.formatting.bagpipes,this.renderer, tuneNumber);\n\tthis.engraver.setStemHeight(this.renderer.spacing.stemHeight);\n\tthis.renderer.engraver = this.engraver; //TODO-PER: do we need this coupling? It's just used for the tempo\n\tif (abctune.formatting.staffwidth) {\n\t\tthis.width = abctune.formatting.staffwidth * 1.33; // The width is expressed in pt; convert to px.\n\t} else {\n\t\tthis.width = this.renderer.isPrint ? this.staffwidthPrint : this.staffwidthScreen;\n\t}\n\tthis.adjustNonScaledItems(scale);\n\n\t// Generate the raw staff line data\n\tvar i;\n\tvar abcLine;\n\tvar hasPrintedTempo = false;\n\tfor(i=0; i<abctune.lines.length; i++) {\n\t\tabcLine = abctune.lines[i];\n\t\tif (abcLine.staff) {\n\t\t\tabcLine.staffGroup = this.engraver.createABCLine(abcLine.staff, !hasPrintedTempo ? abctune.metaText.tempo: null);\n\t\t\thasPrintedTempo = true;\n\t\t}\n\t}\n\n\t// Adjust the x-coordinates to their absolute positions\n\tvar maxWidth = this.width;\n\tfor(i=0; i<abctune.lines.length; i++) {\n\t\tabcLine = abctune.lines[i];\n\t\tif (abcLine.staff) {\n\t\t\tthis.setXSpacing(abcLine.staffGroup, abctune.formatting, i === abctune.lines.length - 1, false);\n\t\t\tif (abcLine.staffGroup.w > maxWidth) maxWidth = abcLine.staffGroup.w;\n\t\t}\n\t}\n\n\t// Layout the beams and add the stems to the beamed notes.\n\tfor(i=0; i<abctune.lines.length; i++) {\n\t\tabcLine = abctune.lines[i];\n\t\tif (abcLine.staffGroup && abcLine.staffGroup.voices) {\n\t\t\tfor (var j = 0; j < abcLine.staffGroup.voices.length; j++)\n\t\t\t\tabcLine.staffGroup.voices[j].layoutBeams();\n\t\t\tabcLine.staffGroup.setUpperAndLowerElements(this.renderer);\n\t\t}\n\t}\n\n\t// Set the staff spacing\n\t// TODO-PER: we should have been able to do this by the time we called setUpperAndLowerElements, but for some reason the \"bottom\" element seems to be set as a side effect of setting the X spacing.\n\tfor(i=0; i<abctune.lines.length; i++) {\n\t\tabcLine = abctune.lines[i];\n\t\tif (abcLine.staffGroup) {\n\t\t\tabcLine.staffGroup.height = abcLine.staffGroup.calcHeight();\n\t\t}\n\t}\n\n\t// Do all the writing to output\n\tthis.renderer.topMargin(abctune);\n\t//this.renderer.printHorizontalLine(this.width + this.renderer.padding.left + this.renderer.padding.right);\n\tthis.renderer.engraveTopText(this.width, abctune);\n\tthis.renderer.addMusicPadding();\n\n\tthis.staffgroups = [];\n\tthis.lastStaffGroupIndex = -1;\n\tfor (var line = 0; line < abctune.lines.length; line++) {\n\t\tthis.renderer.lineNumber = line;\n\t\tabcLine = abctune.lines[line];\n\t\tif (abcLine.staff) {\n\t\t\tthis.engraveStaffLine(abcLine.staffGroup);\n\t\t} else if (abcLine.subtitle && line !== 0) {\n\t\t\tthis.renderer.outputSubtitle(this.width, abcLine.subtitle);\n\t\t} else if (abcLine.text !== undefined) {\n\t\t\tthis.renderer.outputFreeText(abcLine.text);\n\t\t}\n\t}\n\n\tthis.renderer.moveY(24); // TODO-PER: Empirically discovered. What variable should this be?\n\tthis.renderer.engraveExtraText(this.width, abctune);\n\tthis.renderer.setPaperSize(maxWidth, scale, this.responsive);\n};\n\nfunction calcHorizontalSpacing(isLastLine, stretchLast, targetWidth, lineWidth, spacing, spacingUnits, minSpace) {\n\t// TODO-PER: This used to stretch the first line when it is the only line, but I'm not sure why. abcm2ps doesn't do that\n\tif (isLastLine && lineWidth / targetWidth < 0.66 && !stretchLast) return null; // don't stretch last line too much\n\tif (Math.abs(targetWidth-lineWidth) < 2) return null; // if we are already near the target width, we're done.\n\tvar relSpace = spacingUnits * spacing;\n\tvar constSpace = lineWidth - relSpace;\n\tif (spacingUnits > 0) {\n\t\tspacing = (targetWidth - constSpace) / spacingUnits;\n\t\tif (spacing * minSpace > 50) {\n\t\t\tspacing = 50 / minSpace;\n\t\t}\n\t\treturn spacing;\n\t}\n\treturn null;\n}\n\n/**\n * Do the x-axis positioning for a single line (a group of related staffs)\n * @param {ABCJS.Tune} abctune an ABCJS AST\n * @param {Object} staffGroup an staffGroup\n * @param {Object} formatting an formatting\n * @param {boolean} isLastLine is this the last line to be printed?\n * @private\n */\nEngraverController.prototype.setXSpacing = function (staffGroup, formatting, isLastLine, debug) {\n   var newspace = this.space;\n   //var debug = true;\n  for (var it = 0; it < 8; it++) { // TODO-PER: shouldn't need multiple passes, but each pass gets it closer to the right spacing. (Only affects long lines: normal lines break out of this loop quickly.)\n\t  staffGroup.layout(newspace, this.renderer, debug);\n\t  var stretchLast = formatting.stretchlast ? formatting.stretchlast : false;\n\t\tnewspace = calcHorizontalSpacing(isLastLine, stretchLast, this.width+this.renderer.padding.left, staffGroup.w, newspace, staffGroup.spacingunits, staffGroup.minspace);\n\t\tif (debug)\n\t\t\tconsole.log(\"setXSpace\", it, staffGroup.w, newspace, staffGroup.minspace);\n\t\tif (newspace === null) break;\n  }\n\tcenterWholeRests(staffGroup.voices);\n\t//this.renderer.printHorizontalLine(this.width);\n};\n\n/**\n * Engrave a single line (a group of related staffs)\n * @param {ABCJS.Tune} abctune an ABCJS AST\n * @param {Object} staffGroup an staffGroup\n * @private\n */\nEngraverController.prototype.engraveStaffLine = function (staffGroup) {\n\tif (this.lastStaffGroupIndex > -1)\n\t\tthis.renderer.addStaffPadding(this.staffgroups[this.lastStaffGroupIndex], staffGroup);\n\tthis.renderer.voiceNumber = null;\n\tstaffGroup.draw(this.renderer);\n\tvar height = staffGroup.height * spacing.STEP;\n\t//this.renderer.printVerticalLine(this.width+this.renderer.padding.left, this.renderer.y, this.renderer.y+height);\n  this.staffgroups[this.staffgroups.length] = staffGroup;\n\tthis.lastStaffGroupIndex = this.staffgroups.length-1;\n\tthis.renderer.y += height;\n};\n\n/**\n * Called by the Abstract Engraving Structure or any other (e.g. midi playback) to say it was selected (notehead clicked on)\n * @protected\n */\nEngraverController.prototype.notifySelect = function (abselem, tuneNumber, classes) {\n  this.clearSelection();\n  if (abselem.highlight) {\n    this.selected = [abselem];\n    abselem.highlight();\n  }\n  var abcelem = abselem.abcelem || {};\n  for (var i=0; i<this.listeners.length;i++) {\n\t  this.listeners[i](abcelem, tuneNumber, classes);\n  }\n};\n\n/**\n * Called by the Abstract Engraving Structure to say it was modified (e.g. notehead dragged)\n * @protected\n */\n// EngraverController.prototype.notifyChange = function (/*abselem*/) {\n//   for (var i=0; i<this.listeners.length;i++) {\n//     if (this.listeners[i].modelChanged)\n//       this.listeners[i].modelChanged();\n//   }\n// };\n\n/**\n *\n * @private\n */\nEngraverController.prototype.clearSelection = function () {\n  for (var i=0;i<this.selected.length;i++) {\n    this.selected[i].unhighlight();\n  }\n  this.selected = [];\n};\n\n/**\n * @param {Object} listener\n * @param {Function} listener.modelChanged the model the listener passed to this controller has changed\n * @param {Function} listener.highlight the abcelem of the model the listener passed to this controller should be highlighted\n */\nEngraverController.prototype.addSelectListener = function (clickListener) {\n  this.listeners[this.listeners.length] = clickListener;\n};\n\n/**\n * Tell the controller to highlight some noteheads of its engraved score\n * @param {number} start the character in the source abc where highlighting should start\n * @param {number} end the character in the source abc where highlighting should end\n */\nEngraverController.prototype.rangeHighlight = function(start,end)\n{\n    this.clearSelection();\n    for (var line=0;line<this.staffgroups.length; line++) {\n\tvar voices = this.staffgroups[line].voices;\n\tfor (var voice=0;voice<voices.length;voice++) {\n\t    var elems = voices[voice].children;\n\t    for (var elem=0; elem<elems.length; elem++) {\n\t\t// Since the user can highlight more than an element, or part of an element, a hit is if any of the endpoints\n\t\t// is inside the other range.\n\t\tvar elStart = elems[elem].abcelem.startChar;\n\t\tvar elEnd = elems[elem].abcelem.endChar;\n\t\tif ((end>elStart && start<elEnd) || ((end===start) && end===elEnd)) {\n\t\t    //\t\tif (elems[elem].abcelem.startChar>=start && elems[elem].abcelem.endChar<=end) {\n\t\t    this.selected[this.selected.length]=elems[elem];\n\t\t    elems[elem].highlight();\n\t\t}\n\t    }\n\t}\n    }\n};\n\n\nfunction centerWholeRests(voices) {\n\t// whole rests are a special case: if they are by themselves in a measure, then they should be centered.\n\t// (If they are not by themselves, that is probably a user error, but we'll just center it between the two items to either side of it.)\n\tfor (var i = 0; i < voices.length; i++) {\n\t\tvar voice = voices[i];\n\t\t// Look through all of the elements except for the first and last. If the whole note appears there then there isn't anything to center it between anyway.\n\t\tfor (var j = 1; j < voice.children.length-1; j++) {\n\t\t\tvar absElem = voice.children[j];\n\t\t\tif (absElem.abcelem.rest && (absElem.abcelem.rest.type === 'whole' || absElem.abcelem.rest.type === 'multimeasure')) {\n\t\t\t\tvar before = voice.children[j-1];\n\t\t\t\tvar after = voice.children[j+1];\n\t\t\t\tvar midpoint = (after.x - before.x) / 2 + before.x;\n\t\t\t\tabsElem.x = midpoint - absElem.w / 2;\n\t\t\t\tfor (var k = 0; k < absElem.children.length; k++)\n\t\t\t\t\tabsElem.children[k].x = absElem.x;\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = EngraverController;\n"]},"metadata":{},"sourceType":"script"}