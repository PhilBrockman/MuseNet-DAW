{"ast":null,"code":"import { reduceNotes } from \"./utils\";\n\nconst calculateScore = data => {\n  let interval = 60 / data.tempo / data.subdivision;\n\n  let distance = i => Math.abs(Math.round(i) - i);\n\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on / interval));\n  return startTimes.reduce((a, b) => a + b, 0);\n};\n\nexport const Score = props => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks\n  }));\n};\n_c = Score;\nexport const autoScore = tracks => {\n  console.log(\"scoring\");\n  let tempo = 60;\n  let subdivision = 3;\n\n  do {\n    console.log(\"sub loop\");\n    let score = calculateScore({\n      tempo: tempo,\n      subdivision: subdivision,\n      tracks: tracks\n    });\n\n    if (score < results.best) {\n      results = {\n        best: score,\n        tempo: tempo,\n        subdivision: subdivision\n      };\n    }\n\n    tempo += .05;\n    console.log(\"tempo:\", tempo);\n  } while (tempo < 200);\n\n  return results;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/Scorer.js"],"names":["reduceNotes","calculateScore","data","interval","tempo","subdivision","distance","i","Math","abs","round","startTimes","tracks","map","item","time_on","reduce","a","b","Score","props","JSON","stringify","bpm","autoScore","console","log","score","results","best"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,SAA1B;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,MAAIC,QAAQ,GAAI,KAAGD,IAAI,CAACE,KAAT,GAAgBF,IAAI,CAACG,WAApC;;AACA,MAAIC,QAAQ,GAAIC,CAAD,IAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWH,CAAX,IAAgBA,CAAzB,CAAtB;;AACA,MAAII,UAAU,GAAGX,WAAW,CAACE,IAAI,CAACU,MAAN,CAAX,CAAyBC,GAAzB,CAA6BC,IAAI,IAAIR,QAAQ,CAACQ,IAAI,CAACC,OAAL,GAAaZ,QAAd,CAA7C,CAAjB;AAEA,SAAOQ,UAAU,CAACK,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,EAAmC,CAAnC,CAAP;AACD,CAND;;AAQA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9B,SAAOC,IAAI,CAACC,SAAL,CAAerB,cAAc,CAAC;AACnCG,IAAAA,KAAK,EAAEgB,KAAK,CAACG,GADsB;AAEnClB,IAAAA,WAAW,EAAEe,KAAK,CAACf,WAFgB;AAGnCO,IAAAA,MAAM,EAAEQ,KAAK,CAACR;AAHqB,GAAD,CAA7B,CAAP;AAKD,CANM;KAAMO,K;AAQb,OAAO,MAAMK,SAAS,GAAIZ,MAAD,IAAY;AACnCa,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,MAAItB,KAAK,GAAG,EAAZ;AACA,MAAIC,WAAW,GAAG,CAAlB;;AACA,KAAE;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,KAAK,GAAG1B,cAAc,CAAC;AACzBG,MAAAA,KAAK,EAAEA,KADkB;AAEzBC,MAAAA,WAAW,EAAEA,WAFY;AAGzBO,MAAAA,MAAM,EAAEA;AAHiB,KAAD,CAA1B;;AAMA,QAAGe,KAAK,GAAGC,OAAO,CAACC,IAAnB,EAAwB;AACtBD,MAAAA,OAAO,GAAG;AACRC,QAAAA,IAAI,EAAEF,KADE;AAERvB,QAAAA,KAAK,EAAEA,KAFC;AAGRC,QAAAA,WAAW,EAAEA;AAHL,OAAV;AAKD;;AACDD,IAAAA,KAAK,IAAI,GAAT;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBtB,KAAtB;AACD,GAjBD,QAiBQA,KAAK,GAAG,GAjBhB;;AAmBA,SAAOwB,OAAP;AACD,CAxBM","sourcesContent":["import {reduceNotes} from \"./utils\"\n\nconst calculateScore = (data) => {\n  let interval = (60/data.tempo)/data.subdivision;\n  let distance = (i) => Math.abs(Math.round(i) - i);\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on/interval));\n\n  return startTimes.reduce((a, b) => a + b, 0)\n}\n\nexport const Score = (props) => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks,\n  }))\n}\n\nexport const autoScore = (tracks) => {\n  console.log(\"scoring\")\n  let tempo = 60;\n  let subdivision = 3;\n  do{\n    console.log(\"sub loop\")\n    let score = calculateScore({\n      tempo: tempo,\n      subdivision: subdivision,\n      tracks: tracks\n    })\n\n    if(score < results.best){\n      results = {\n        best: score,\n        tempo: tempo,\n        subdivision: subdivision,\n      }\n    }\n    tempo += .05\n    console.log(\"tempo:\", tempo)\n  } while(tempo < 200)\n\n  return results\n}\n"]},"metadata":{},"sourceType":"module"}