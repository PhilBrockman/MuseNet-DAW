{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/Notes.js\";\nimport React from 'react';\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet COLORS = [\"red\", \"blue\", \"green\"];\nexport const Notes = props => {\n  let mainTrack = props.tracks[props.activeTrack].notes.map((note, idx) => {\n    return /*#__PURE__*/_createElement(Note, { ...props,\n      note: note,\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 12\n      }\n    });\n  });\n  let backgroundTracks = [...props.tracks];\n  backgroundTracks.splice(props.activeTrack, 1);\n  backgroundTracks = props.allVisible ? backgroundTracks.map((track, trackIndex) => {\n    return track.notes.map((note, noteIndex) => {\n      return /*#__PURE__*/_createElement(Note, { ...props,\n        note: note,\n        key: trackIndex + \"-\" + noteIndex,\n        inactive: true,\n        color: COLORS[trackIndex],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 18\n        }\n      });\n    });\n  }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  let tracks = props.tracks.map((track, trackIndex) => {\n    if (trackIndex === props.activeTrack || props.allVisible) {} else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [mainTrack, \" \", backgroundTracks]\n  }, void 0, true);\n};\n_c = Notes;\n\nconst Note = props => {\n  let unitCellHeight = 30;\n  let cellHeight = unitCellHeight;\n  let cellWidth = props.bpm * props.note.duration / 60 * props.dawResolution;\n  let topOffset = unitCellHeight * (props.offset - props.note.pitch);\n  let leftOffset = props.bpm * props.note.time_on / 60 * props.dawResolution;\n  let style = {\n    position: \"absolute\",\n    height: `${cellHeight}px`,\n    width: `${cellWidth}px`,\n    top: `${topOffset}px`,\n    left: `${leftOffset}px`\n  }; // console.log(\"sstlye\", style)\n\n  if (props.inactive) {\n    style.backgroundColor = props.color;\n  } else {\n    style.backgroundColor = \"blue\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_c2 = Note;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Notes\");\n$RefreshReg$(_c2, \"Note\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/Notes.js"],"names":["React","COLORS","Notes","props","mainTrack","tracks","activeTrack","notes","map","note","idx","backgroundTracks","splice","allVisible","track","trackIndex","noteIndex","Note","unitCellHeight","cellHeight","cellWidth","bpm","duration","dawResolution","topOffset","offset","pitch","leftOffset","time_on","style","position","height","width","top","left","inactive","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from 'react';\n\nlet COLORS = [\"red\", \"blue\", \"green\"]\n\n\nexport const Notes = (props) => {\n  let mainTrack = props.tracks[props.activeTrack].notes.map((note, idx) => {\n    return <Note {...props} note={note} key={idx} />\n  })\n\n  let backgroundTracks = [...props.tracks]\n  backgroundTracks.splice(props.activeTrack, 1)\n  backgroundTracks = props.allVisible\n      ? backgroundTracks.map((track, trackIndex) => {\n        return track.notes.map((note, noteIndex) => {\n          return <Note {...props} note={note} key={trackIndex+\"-\"+noteIndex} inactive={true} color={COLORS[trackIndex]}/>\n        })\n      })\n      : <></>;\n\n  let tracks = props.tracks.map((track, trackIndex) => {\n    if(trackIndex === props.activeTrack || props.allVisible){\n\n    } else {\n      return <></>\n    }\n  })\n\n  return <>{mainTrack} {backgroundTracks}</>\n}\n\nconst Note = (props) => {\n  let unitCellHeight=30;\n\n  let cellHeight = unitCellHeight;\n  let cellWidth=(props.bpm*props.note.duration/60)*props.dawResolution;\n  let topOffset=unitCellHeight*(props.offset - props.note.pitch);\n  let leftOffset=props.bpm*(props.note.time_on)/60*props.dawResolution;\n\n  let style = {\n    position: \"absolute\",\n    height:`${cellHeight}px`,\n    width:`${cellWidth}px`,\n    top:`${topOffset}px`,\n    left:`${leftOffset}px`\n  }\n\n  // console.log(\"sstlye\", style)\n\n  if(props.inactive){\n    style.backgroundColor = props.color;\n  } else {\n    style.backgroundColor = \"blue\"\n  }\n\n  return <div className=\"note\" style={style}></div>\n}\n"]},"metadata":{},"sourceType":"module"}