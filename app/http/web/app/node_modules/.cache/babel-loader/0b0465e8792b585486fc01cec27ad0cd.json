{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StandardInput = props => {\n  _s();\n\n  const [value, setValue] = React.useState(props.defaultValue);\n\n  function handleChange(e) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"selections\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StandardInput, \"ihCvcaxYfMqenIrjG2FjJ/w7Rb4=\");\n\n_c = StandardInput;\nexport const InputSelector = props => {\n  const choice = props.data.inputType;\n\n  if (choice === \"select\") {\n    let options = props.data.options.map(item => {\n      /*#__PURE__*/\n      _jsxDEV(\"option\", {\n        value: item,\n        children: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [JSON.stringify(props.data.options), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  } else if (choice === \"slider\") {\n    return failed(choice);\n  } else if (choice === \"range\") {\n    return failed(choice);\n  } else if (choice === \"checkboxinput\") {\n    return failed(choice);\n  } else {\n    return failed(\"failure\");\n  }\n};\n_c2 = InputSelector;\n\nconst failed = text => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: text\n}, void 0, false);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StandardInput\");\n$RefreshReg$(_c2, \"InputSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js"],"names":["React","StandardInput","props","value","setValue","useState","defaultValue","handleChange","e","InputSelector","choice","data","inputType","options","map","item","JSON","stringify","failed","text"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAeH,KAAK,CAACI,YAArB,CAA1B;;AAEA,WAASC,YAAT,CAAsBC,CAAtB,EAAwB,CAEvB;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAZD;;GAAMP,a;;KAAAA,a;AAcN,OAAO,MAAMQ,aAAa,GAAIP,KAAD,IAAW;AACtC,QAAMQ,MAAM,GAAGR,KAAK,CAACS,IAAN,CAAWC,SAA1B;;AACA,MAAGF,MAAM,KAAK,QAAd,EAAuB;AACrB,QAAIG,OAAO,GAAGX,KAAK,CAACS,IAAN,CAAWE,OAAX,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC3C;AAAA;AAAQ,QAAA,KAAK,EAAEA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,KAFa,CAAd;AAGA,wBACE;AAAA,iBACCC,IAAI,CAACC,SAAL,CAAef,KAAK,CAACS,IAAN,CAAWE,OAA1B,CADD,eAEA;AAAA,kBACGA;AADH;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADF;AAQD,GAZD,MAYO,IAAIH,MAAM,KAAK,QAAf,EAAwB;AAC7B,WAAOQ,MAAM,CAACR,MAAD,CAAb;AACD,GAFM,MAEA,IAAIA,MAAM,KAAK,OAAf,EAAuB;AAC5B,WAAOQ,MAAM,CAACR,MAAD,CAAb;AACD,GAFM,MAEA,IAAIA,MAAM,KAAK,eAAf,EAA+B;AACpC,WAAOQ,MAAM,CAACR,MAAD,CAAb;AACD,GAFM,MAEA;AACL,WAAOQ,MAAM,CAAC,SAAD,CAAb;AACD;AACF,CAvBM;MAAMT,a;;AAyBb,MAAMS,MAAM,GAAIC,IAAD,iBAAU;AAAA,YAAGA;AAAH,iBAAzB","sourcesContent":["import React from 'react';\n\nconst StandardInput = (props) => {\n  const [value, setValue] = React.useState(props.defaultValue)\n\n  function handleChange(e){\n\n  }\n\n  return (\n    <div>\n      selections\n    </div>\n  );\n}\n\nexport const InputSelector = (props) => {\n  const choice = props.data.inputType;\n  if(choice === \"select\"){\n    let options = props.data.options.map(item => {\n      <option value={item}>item</option>\n    })\n    return (\n      <>\n      {JSON.stringify(props.data.options)}\n      <select>\n        {options}\n      </select>\n      </>\n    );\n  } else if (choice === \"slider\"){\n    return failed(choice)\n  } else if (choice === \"range\"){\n    return failed(choice)\n  } else if (choice === \"checkboxinput\"){\n    return failed(choice)\n  } else {\n    return failed(\"failure\")\n  }\n}\n\nconst failed = (text) => <>{text}</>;\n"]},"metadata":{},"sourceType":"module"}