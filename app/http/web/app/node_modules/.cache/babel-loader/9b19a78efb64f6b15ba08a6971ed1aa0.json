{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SliderInput = props => {\n  _s();\n\n  const data = props.data;\n  const step_size = specific_item.max < 3 ? .01 : 1;\n  const [value, setValue] = React.useState(data.defaultValue);\n\n  function handleChange(e) {}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: data.min,\n      max: data.max,\n      value: data.defaultValue,\n      step: step_size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), value]\n  }, void 0, true);\n};\n\n_s(SliderInput, \"TIln4WwxmvOc5quY4HlKYbCiEjw=\");\n\n_c = SliderInput;\nexport const InputSelector = props => {\n  const data = props.data;\n  const choice = data.inputType;\n\n  if (choice === \"select\") {\n    let options = data.options.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item,\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 44\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      id: data.toParam,\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  } else if (choice === \"slider\") {\n    return /*#__PURE__*/_jsxDEV(SliderInput, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  } else if (choice === \"checkboxinput\") {\n    return failed(choice);\n  } else {\n    return failed(\"failure\");\n  }\n};\n_c2 = InputSelector;\n\nconst failed = text => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: text\n}, void 0, false);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SliderInput\");\n$RefreshReg$(_c2, \"InputSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js"],"names":["React","SliderInput","props","data","step_size","specific_item","max","value","setValue","useState","defaultValue","handleChange","e","min","InputSelector","choice","inputType","options","map","item","toParam","failed","text"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMC,SAAS,GAAGC,aAAa,CAACC,GAAd,GAAoB,CAApB,GAAwB,GAAxB,GAA8B,CAAhD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAeN,IAAI,CAACO,YAApB,CAA1B;;AAEA,WAASC,YAAT,CAAsBC,CAAtB,EAAwB,CAEvB;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,OAAZ;AACE,MAAA,GAAG,EAAET,IAAI,CAACU,GADZ;AAEE,MAAA,GAAG,EAAEV,IAAI,CAACG,GAFZ;AAGE,MAAA,KAAK,EAAEH,IAAI,CAACO,YAHd;AAIE,MAAA,IAAI,EAAEN;AAJR;AAAA;AAAA;AAAA;AAAA,YADF,EAMGG,KANH;AAAA,kBADF;AAUD,CAnBD;;GAAMN,W;;KAAAA,W;AAqBN,OAAO,MAAMa,aAAa,GAAIZ,KAAD,IAAW;AACtC,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMY,MAAM,GAAGZ,IAAI,CAACa,SAApB;;AAEA,MAAGD,MAAM,KAAK,QAAd,EAAuB;AACrB,QAAIE,OAAO,GAAGd,IAAI,CAACc,OAAL,CAAaC,GAAb,CAAiBC,IAAI,iBAAI;AAAQ,MAAA,KAAK,EAAEA,IAAf;AAAA,gBAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAzB,CAAd;AACA,wBACE;AAAQ,MAAA,EAAE,EAAEhB,IAAI,CAACiB,OAAjB;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAPD,MAOO,IAAIF,MAAM,KAAK,QAAf,EAAwB;AAC7B,wBACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEZ;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJM,MAIA,IAAIY,MAAM,KAAK,eAAf,EAA+B;AACpC,WAAOM,MAAM,CAACN,MAAD,CAAb;AACD,GAFM,MAEA;AACL,WAAOM,MAAM,CAAC,SAAD,CAAb;AACD;AACF,CApBM;MAAMP,a;;AAsBb,MAAMO,MAAM,GAAIC,IAAD,iBAAU;AAAA,YAAGA;AAAH,iBAAzB","sourcesContent":["import React from 'react';\n\nconst SliderInput = (props) => {\n  const data = props.data\n  const step_size = specific_item.max < 3 ? .01 : 1;\n  const [value, setValue] = React.useState(data.defaultValue)\n\n  function handleChange(e){\n\n  }\n\n  return (\n    <>\n      <input type=\"range\"\n        min={data.min}\n        max={data.max}\n        value={data.defaultValue}\n        step={step_size} />\n      {value}\n    </>\n  );\n}\n\nexport const InputSelector = (props) => {\n  const data = props.data\n  const choice = data.inputType;\n\n  if(choice === \"select\"){\n    let options = data.options.map(item => <option value={item}>{item}</option> )\n    return (\n      <select id={data.toParam}>\n        {options}\n      </select>\n    );\n  } else if (choice === \"slider\"){\n    return (\n      <SliderInput data={data}/>\n    );\n  } else if (choice === \"checkboxinput\"){\n    return failed(choice)\n  } else {\n    return failed(\"failure\")\n  }\n}\n\nconst failed = (text) => <>{text}</>;\n"]},"metadata":{},"sourceType":"module"}