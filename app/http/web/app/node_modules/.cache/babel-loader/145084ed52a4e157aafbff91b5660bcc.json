{"ast":null,"code":"import { reduceNotes } from \"./utils\";\n\nconst calculateScore = data => {\n  let interval = 60 / data.tempo / data.subdivision;\n\n  let distance = i => Math.abs(Math.round(i) - i);\n\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on / interval));\n  return startTimes.reduce((a, b) => a + b, 0);\n};\n\nexport const Score = props => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks\n  }));\n};\n_c = Score;\nexport const AutoScorer = tracks => {\n  let tempo = 60;\n  let sudvision = 2;\n};\n_c2 = AutoScorer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Score\");\n$RefreshReg$(_c2, \"AutoScorer\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/Scorer.js"],"names":["reduceNotes","calculateScore","data","interval","tempo","subdivision","distance","i","Math","abs","round","startTimes","tracks","map","item","time_on","reduce","a","b","Score","props","JSON","stringify","bpm","AutoScorer","sudvision"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,SAA1B;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,MAAIC,QAAQ,GAAI,KAAGD,IAAI,CAACE,KAAT,GAAgBF,IAAI,CAACG,WAApC;;AACA,MAAIC,QAAQ,GAAIC,CAAD,IAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWH,CAAX,IAAgBA,CAAzB,CAAtB;;AACA,MAAII,UAAU,GAAGX,WAAW,CAACE,IAAI,CAACU,MAAN,CAAX,CAAyBC,GAAzB,CAA6BC,IAAI,IAAIR,QAAQ,CAACQ,IAAI,CAACC,OAAL,GAAaZ,QAAd,CAA7C,CAAjB;AAEA,SAAOQ,UAAU,CAACK,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,EAAmC,CAAnC,CAAP;AACD,CAND;;AAQA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9B,SAAOC,IAAI,CAACC,SAAL,CAAerB,cAAc,CAAC;AACnCG,IAAAA,KAAK,EAAEgB,KAAK,CAACG,GADsB;AAEnClB,IAAAA,WAAW,EAAEe,KAAK,CAACf,WAFgB;AAGnCO,IAAAA,MAAM,EAAEQ,KAAK,CAACR;AAHqB,GAAD,CAA7B,CAAP;AAKD,CANM;KAAMO,K;AAQb,OAAO,MAAMK,UAAU,GAAIZ,MAAD,IAAY;AACpC,MAAIR,KAAK,GAAG,EAAZ;AACA,MAAIqB,SAAS,GAAG,CAAhB;AAED,CAJM;MAAMD,U","sourcesContent":["import {reduceNotes} from \"./utils\"\n\nconst calculateScore = (data) => {\n  let interval = (60/data.tempo)/data.subdivision;\n  let distance = (i) => Math.abs(Math.round(i) - i);\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on/interval));\n\n  return startTimes.reduce((a, b) => a + b, 0)\n}\n\nexport const Score = (props) => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks,\n  }))\n}\n\nexport const AutoScorer = (tracks) => {\n  let tempo = 60;\n  let sudvision = 2;\n\n}\n"]},"metadata":{},"sourceType":"module"}