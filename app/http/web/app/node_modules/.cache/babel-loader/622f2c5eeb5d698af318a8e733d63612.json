{"ast":null,"code":"var _s = $RefreshSig$();\n\n//https://usehooks.com/useKeyPress/\nimport React from 'react';\nexport default function useKeyPress(targetKey) {\n  _s();\n\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = React.useState(false); // If pressed key is our target key then set to true\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', downHandler); // window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener('keydown', downHandler); // window.removeEventListener('keyup', upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\n_s(useKeyPress, \"vmDSD7h68k9Z7B48/eX82jyokKU=\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/useKeyPress.js"],"names":["React","useKeyPress","targetKey","keyPressed","setKeyPressed","useState","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAAA;;AAC7C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAApC,CAF6C,CAI7C;;AACA,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAA8B;AAC5B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAT4C,CAW7C;;;AACA,QAAMI,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AAC7B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD,CAZ6C,CAkB7C;;;AACAJ,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCL,WAAnC,EADoB,CAEpB;AACA;;AACA,WAAO,MAAM;AACXI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCN,WAAtC,EADW,CAEX;AACD,KAHD;AAID,GARD,EAQG,CAACA,WAAD,EAAcE,SAAd,CARH,EAnB6C,CA2Bf;;AAE9B,SAAOL,UAAP;AACD;;GA9BuBF,W","sourcesContent":["//https://usehooks.com/useKeyPress/\n\nimport React from 'react'\n\nexport default function useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  React.useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    // window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      // window.removeEventListener('keyup', upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n"]},"metadata":{},"sourceType":"module"}