{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport APIClient from './apiClient';\nimport React from 'react';\nimport { options } from \"Selection/MuseNetOptions\";\nimport { InputSelector } from \"Selection/Inputs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet api = new APIClient(\"accessToken\");\n\nfunction App() {\n  _s();\n\n  const [generations, setGenerations] = React.useState(null);\n\n  const fetchData = async () => {\n    const result = await api.generations();\n    setGenerations(result.data);\n  };\n\n  const deleteGeneration = id => {\n    api.deleteGeneration(id).then(r => {\n      fetchData();\n    });\n  };\n\n  const createGeneration = () => {\n    const prepSelections = () => {\n      const options = document.querySelectorAll(\".MuseNetOption\");\n      console.log(\"document\", options[0]);\n      const updatedSettings = {};\n      options.forEach(item => {\n        updatedSettings[item.id] = item.type === \"checkbox\" ? item.checked : item.value;\n      });\n      return updatedSettings;\n    };\n\n    api.createGeneration(prepSelections()).then(r => {\n      fetchData();\n    });\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Generations, {\n      generations: generations,\n      deleteGeneration: deleteGeneration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OptionList, {\n      options: options,\n      createGeneration: createGeneration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ha5h+x/zoaBJ2o+jxdHgfcMgjkU=\");\n\n_c = App;\n\nconst defaultValues = () => {\n  let out = {};\n  options.map(optSet => {\n    optSet.children.map(item => {\n      out[item.toParam] = item.default;\n    });\n  });\n  return out;\n};\n\nconst OptionList = props => {\n  _s2();\n\n  const [settings, setSettings] = React.useState(defaultValues());\n\n  const unwrap = arr => {\n    return arr.map(child => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [child.title, /*#__PURE__*/_jsxDEV(InputSelector, {\n          data: child\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, child.toParam, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  let options = props.options.map(item => {\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), unwrap(item.children)]\n    }, item.title, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: \"Options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.createGeneration(),\n      children: \"create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), options]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(OptionList, \"pqBY43+0sBIeTyynmRA7Vx0Ei0I=\");\n\n_c2 = OptionList;\n\nconst Generations = props => {\n  return !props.generations || props.generations.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.composer, \" | \", item.id, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => props.deleteGeneration(item[\"_id\"][\"$oid\"]),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  });\n}; // const NewGenSettings = (props) => {\n//   const [value, setValue] = React.useState(\"2\");\n//   const handleChange = (event) => {\n//     setValue(event.target.value);\n//   };\n//\n//   return(\n//     <fieldset style={{background: \"rgba(150, 50, 15, .3)\"}}>\n//       <legend>new gen</legend>\n//       <div><input id=\"foobar\" value={value} onChange={handleChange}/></div>\n//       <ComposerSettings />\n//       <button onClick={props.createGeneration}>create</button>\n//     </fieldset>\n//   )\n// }\n//\n// const ComposerSettings = (props) => {\n//   const [value, setValue] = React.useState(\"mozart\");\n//   const handleChange = (event) => {\n//     setValue(event.target.value);\n//   };\n//\n//   return (\n//     <div>\n//       <select\n//         value={value}\n//         onChange={handleChange}\n//         >\n//         <option value={\"mozart\"}>Mozart</option>\n//         <option value={\"chopin\"}>Chopin</option>\n//       </select>\n//     </div>\n//   );\n// }\n\n\n_c3 = Generations;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"OptionList\");\n$RefreshReg$(_c3, \"Generations\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/App.js"],"names":["APIClient","React","options","InputSelector","api","App","generations","setGenerations","useState","fetchData","result","data","deleteGeneration","id","then","r","createGeneration","prepSelections","document","querySelectorAll","console","log","updatedSettings","forEach","item","type","checked","value","useEffect","defaultValues","out","map","optSet","children","toParam","default","OptionList","props","settings","setSettings","unwrap","arr","child","title","Generations","index","composer"],"mappings":"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","sourcesContent":["import APIClient from './apiClient'\nimport React from 'react'\nimport {options} from \"Selection/MuseNetOptions\"\nimport {InputSelector} from \"Selection/Inputs\"\n\nlet api = new APIClient(\"accessToken\");\n\nfunction App() {\n  const [generations, setGenerations] = React.useState(null)\n  const fetchData = async () => {\n    const result = await api.generations();\n    setGenerations(result.data);\n  }\n\n  const deleteGeneration = (id) => {\n    api.deleteGeneration(id).then(r => {\n      fetchData();\n    })\n  }\n\n  const createGeneration = () => {\n    const prepSelections = () => {\n      const options = document.querySelectorAll(\".MuseNetOption\");\n      console.log(\"document\", options[0])\n      const updatedSettings = {}\n      options.forEach(item => {\n        updatedSettings[item.id] = item.type===\"checkbox\"\n                                      ? item.checked\n                                      : item.value\n      })\n      return updatedSettings;\n    }\n    api.createGeneration(prepSelections()).then(r => {\n      fetchData()\n    });\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Generations\n        generations={generations}\n        deleteGeneration={deleteGeneration}\n        />\n      <OptionList\n        options={options}\n        createGeneration={createGeneration}\n        />\n    </div>\n  );\n}\n\nconst defaultValues = () => {\n  let out = {}\n  options.map(optSet => {\n    optSet.children.map(item => {\n      out[item.toParam] =  item.default;\n    })\n  })\n  return out;\n}\n\nconst OptionList = (props) => {\n  const [settings, setSettings] = React.useState(defaultValues())\n\n  const unwrap = (arr) => {\n    return arr.map(child => {\n      return (\n      <div key={child.toParam}>\n        {child.title}\n        <InputSelector data={child} />\n      </div>);\n    })\n  }\n\n  let options = props.options.map(item => {\n    return(\n    <fieldset key={item.title}>\n      <legend>{item.title}</legend>\n      {unwrap(item.children)}\n    </fieldset>)\n  })\n\n  return (\n    <fieldset>\n      <legend>Options</legend>\n      <button onClick={() => props.createGeneration()}>create</button>\n      {options}\n    </fieldset>\n  );\n}\n\nconst Generations = (props) => {\n  return !props.generations || props.generations.map((item, index) => {\n    return (\n      <div key={index}>\n        {item.composer} | {item.id} <button onClick={() => props.deleteGeneration(item[\"_id\"][\"$oid\"])}>X</button>\n      </div>);\n  })\n}\n\n// const NewGenSettings = (props) => {\n//   const [value, setValue] = React.useState(\"2\");\n//   const handleChange = (event) => {\n//     setValue(event.target.value);\n//   };\n//\n//   return(\n//     <fieldset style={{background: \"rgba(150, 50, 15, .3)\"}}>\n//       <legend>new gen</legend>\n//       <div><input id=\"foobar\" value={value} onChange={handleChange}/></div>\n//       <ComposerSettings />\n//       <button onClick={props.createGeneration}>create</button>\n//     </fieldset>\n//   )\n// }\n//\n// const ComposerSettings = (props) => {\n//   const [value, setValue] = React.useState(\"mozart\");\n//   const handleChange = (event) => {\n//     setValue(event.target.value);\n//   };\n//\n//   return (\n//     <div>\n//       <select\n//         value={value}\n//         onChange={handleChange}\n//         >\n//         <option value={\"mozart\"}>Mozart</option>\n//         <option value={\"chopin\"}>Chopin</option>\n//       </select>\n//     </div>\n//   );\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}