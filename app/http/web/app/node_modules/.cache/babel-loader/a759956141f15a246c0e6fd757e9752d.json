{"ast":null,"code":"//    abc_staff_group_element.js: Definition of the StaffGroupElement class.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*globals console */\nvar spacing = require('./abc_spacing'); // StaffGroupElement contains all the elements that go together to make one line of music.\n// That might be multiple staves that are tied together, and it might be multiple voices on one staff.\n//\n// Methods:\n// constructor: some basic initialization\n// addVoice(): Called once for each voice. May add a new staff if needed.\n// finished(): Called only internally by layout()\n// layout(): This does all the layout. It sets the following: spacingunits, startx, minspace, w, and the x-coordinate of each element in each voice.\n// draw(): Calls the underlying methods on the voice objects to do the drawing. Sets y and height.\n//\n// Members:\n// staffs: an array of all the staves in this group. Each staff contains the following elements:\n//    { top, bottom, highest, lowest, y }\n// voices: array of VoiceElement objects. This is mostly passed in, but the VoiceElement objects are modified here.\n//\n// spacingunits: number of relative x-units in the line. Used by the calling function to pass back in as the \"spacing\" input parameter.\n// TODO-PER: This should actually be passed back as a return value.\n// minspace: smallest space between two notes. Used by the calling function to pass back in as the \"spacing\" input parameter.\n// TODO-PER: This should actually be passed back as a return value.\n// startx: The left edge, taking the margin and the optional voice name. Used by the draw() method.\n// w: The width of the line. Used by calling function to pass back in as the \"spacing\" input parameter, and the draw() method.\n// TODO-PER: This should actually be passed back as a return value.  (TODO-PER: in pixels or spacing units?)\n// y: The top of the staff group, in pixels. This is set in the draw method.\n// TODO-PER: Where is that used? It looks like it might not be needed.\n// height: Set in the draw() method to the height actually used. Used by the calling function to know where to start the next staff group.\n// TODO-PER: This should actually be set in the layout method and passed back as a return value.\n\n\nvar StaffGroupElement = function () {\n  this.voices = [];\n  this.staffs = [];\n  this.brace = undefined; //tony\n};\n\nStaffGroupElement.prototype.setLimit = function (member, voice) {\n  if (!voice.specialY[member]) return;\n  if (!voice.staff.specialY[member]) voice.staff.specialY[member] = voice.specialY[member];else voice.staff.specialY[member] = Math.max(voice.staff.specialY[member], voice.specialY[member]);\n};\n\nStaffGroupElement.prototype.addVoice = function (voice, staffnumber, stafflines) {\n  var voiceNum = this.voices.length;\n  this.voices[voiceNum] = voice;\n  if (this.staffs[staffnumber]) this.staffs[staffnumber].voices.push(voiceNum);else {\n    // TODO-PER: how does the min/max change when stafflines is not 5?\n    this.staffs[this.staffs.length] = {\n      top: 10,\n      bottom: 2,\n      lines: stafflines,\n      voices: [voiceNum],\n      specialY: {\n        tempoHeightAbove: 0,\n        partHeightAbove: 0,\n        volumeHeightAbove: 0,\n        dynamicHeightAbove: 0,\n        endingHeightAbove: 0,\n        chordHeightAbove: 0,\n        lyricHeightAbove: 0,\n        lyricHeightBelow: 0,\n        chordHeightBelow: 0,\n        volumeHeightBelow: 0,\n        dynamicHeightBelow: 0\n      }\n    };\n  }\n  voice.staff = this.staffs[staffnumber];\n};\n\nStaffGroupElement.prototype.setStaffLimits = function (voice) {\n  voice.staff.top = Math.max(voice.staff.top, voice.top);\n  voice.staff.bottom = Math.min(voice.staff.bottom, voice.bottom);\n  this.setLimit('tempoHeightAbove', voice);\n  this.setLimit('partHeightAbove', voice);\n  this.setLimit('volumeHeightAbove', voice);\n  this.setLimit('dynamicHeightAbove', voice);\n  this.setLimit('endingHeightAbove', voice);\n  this.setLimit('chordHeightAbove', voice);\n  this.setLimit('lyricHeightAbove', voice);\n  this.setLimit('lyricHeightBelow', voice);\n  this.setLimit('chordHeightBelow', voice);\n  this.setLimit('volumeHeightBelow', voice);\n  this.setLimit('dynamicHeightBelow', voice);\n};\n\nStaffGroupElement.prototype.setUpperAndLowerElements = function (renderer) {\n  // Each staff already has the top and bottom set, now we see if there are elements that are always on top and bottom, and resolve their pitch.\n  // Also, get the overall height of all the staves in this group.\n  var lastStaffBottom;\n\n  for (var i = 0; i < this.staffs.length; i++) {\n    var staff = this.staffs[i]; // the vertical order of elements that are above is: tempo, part, volume/dynamic, ending/chord, lyric\n    // the vertical order of elements that are below is: lyric, chord, volume/dynamic\n\n    var positionY = {\n      tempoHeightAbove: 0,\n      partHeightAbove: 0,\n      volumeHeightAbove: 0,\n      dynamicHeightAbove: 0,\n      endingHeightAbove: 0,\n      chordHeightAbove: 0,\n      lyricHeightAbove: 0,\n      lyricHeightBelow: 0,\n      chordHeightBelow: 0,\n      volumeHeightBelow: 0,\n      dynamicHeightBelow: 0\n    };\n\n    if (\n    /*ABCJS.write.debugPlacement*/\n    false) {\n      staff.originalTop = staff.top; // This is just being stored for debugging purposes.\n\n      staff.originalBottom = staff.bottom; // This is just being stored for debugging purposes.\n    }\n\n    if (staff.specialY.lyricHeightAbove) {\n      staff.top += staff.specialY.lyricHeightAbove;\n      positionY.lyricHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.chordHeightAbove) {\n      staff.top += staff.specialY.chordHeightAbove;\n      positionY.chordHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.endingHeightAbove) {\n      if (staff.specialY.chordHeightAbove) staff.top += 2;else staff.top += staff.specialY.endingHeightAbove;\n      positionY.endingHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.dynamicHeightAbove && staff.specialY.volumeHeightAbove) {\n      staff.top += Math.max(staff.specialY.dynamicHeightAbove, staff.specialY.volumeHeightAbove);\n      positionY.dynamicHeightAbove = staff.top;\n      positionY.volumeHeightAbove = staff.top;\n    } else if (staff.specialY.dynamicHeightAbove) {\n      staff.top += staff.specialY.dynamicHeightAbove;\n      positionY.dynamicHeightAbove = staff.top;\n    } else if (staff.specialY.volumeHeightAbove) {\n      staff.top += staff.specialY.volumeHeightAbove;\n      positionY.volumeHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.partHeightAbove) {\n      staff.top += staff.specialY.partHeightAbove;\n      positionY.partHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.tempoHeightAbove) {\n      staff.top += staff.specialY.tempoHeightAbove;\n      positionY.tempoHeightAbove = staff.top;\n    }\n\n    if (staff.specialY.lyricHeightBelow) {\n      positionY.lyricHeightBelow = staff.bottom;\n      staff.bottom -= staff.specialY.lyricHeightBelow;\n    }\n\n    if (staff.specialY.chordHeightBelow) {\n      positionY.chordHeightBelow = staff.bottom;\n      staff.bottom -= staff.specialY.chordHeightBelow;\n    }\n\n    if (staff.specialY.volumeHeightBelow && staff.specialY.dynamicHeightBelow) {\n      positionY.volumeHeightBelow = staff.bottom;\n      positionY.dynamicHeightBelow = staff.bottom;\n      staff.bottom -= Math.max(staff.specialY.volumeHeightBelow, staff.specialY.dynamicHeightBelow);\n    } else if (staff.specialY.volumeHeightBelow) {\n      positionY.volumeHeightBelow = staff.bottom;\n      staff.bottom -= staff.specialY.volumeHeightBelow;\n    } else if (staff.specialY.dynamicHeightBelow) {\n      positionY.dynamicHeightBelow = staff.bottom;\n      staff.bottom -= staff.specialY.dynamicHeightBelow;\n    }\n\n    if (\n    /*ABCJS.write.debugPlacement*/\n    false) staff.positionY = positionY; // This is just being stored for debugging purposes.\n\n    for (var j = 0; j < staff.voices.length; j++) {\n      var voice = this.voices[staff.voices[j]];\n      voice.setUpperAndLowerElements(positionY);\n    } // We might need a little space in between staves if the staves haven't been pushed far enough apart by notes or extra vertical stuff.\n    // Only try to put in extra space if this isn't the top staff.\n\n\n    if (lastStaffBottom !== undefined) {\n      var thisStaffTop = staff.top - 10;\n      var forcedSpacingBetween = lastStaffBottom + thisStaffTop;\n      var minSpacingInPitches = renderer.spacing.systemStaffSeparation / spacing.STEP;\n      var addedSpace = minSpacingInPitches - forcedSpacingBetween;\n      if (addedSpace > 0) staff.top += addedSpace;\n    }\n\n    lastStaffBottom = 2 - staff.bottom; // the staff starts at position 2 and the bottom variable is negative. Therefore to find out how large the bottom is, we reverse the sign of the bottom, and add the 2 in.\n    // Now we need a little margin on the top, so we'll just throw that in.\n    //staff.top += 4;\n    //console.log(\"Staff Y: \",i,heightInPitches,staff.top,staff.bottom);\n  } //console.log(\"Staff Height: \",heightInPitches,this.height);\n\n};\n\nStaffGroupElement.prototype.finished = function () {\n  for (var i = 0; i < this.voices.length; i++) {\n    if (!this.voices[i].layoutEnded()) return false;\n  }\n\n  return true;\n};\n\nfunction getLeftEdgeOfStaff(renderer, voices, brace) {\n  var x = renderer.padding.left; // find out how much space will be taken up by voice headers\n\n  var voiceheaderw = 0;\n\n  for (var i = 0; i < voices.length; i++) {\n    if (voices[i].header) {\n      var size = renderer.getTextSize(voices[i].header, 'voicefont', '');\n      voiceheaderw = Math.max(voiceheaderw, size.width);\n    }\n  }\n\n  if (voiceheaderw) {\n    // Give enough spacing to the right - we use the width of an A for the amount of spacing.\n    var sizeW = renderer.getTextSize(\"A\", 'voicefont', '');\n    voiceheaderw += sizeW.width;\n  }\n\n  x += voiceheaderw;\n\n  if (brace) {\n    brace.setLocation(x);\n    x += brace.getWidth();\n  }\n\n  return x;\n}\n\nStaffGroupElement.prototype.layout = function (spacing, renderer, debug) {\n  var epsilon = 0.0000001; // Fudging for inexactness of floating point math.\n\n  this.spacingunits = 0; // number of times we will have ended up using the spacing distance (as opposed to fixed width distances)\n\n  this.minspace = 1000; // a big number to start off with - used to find out what the smallest space between two notes is -- GD 2014.1.7\n\n  var x = getLeftEdgeOfStaff(renderer, this.voices, this.brace);\n  this.startx = x;\n  var i;\n  var currentduration = 0;\n  if (debug) console.log(\"init layout\", spacing);\n\n  for (i = 0; i < this.voices.length; i++) {\n    this.voices[i].beginLayout(x);\n  }\n\n  var spacingunit = 0; // number of spacingunits coming from the previously laid out element to this one\n\n  while (!this.finished()) {\n    // find first duration level to be laid out among candidates across voices\n    currentduration = null; // candidate smallest duration level\n\n    for (i = 0; i < this.voices.length; i++) {\n      if (!this.voices[i].layoutEnded() && (!currentduration || this.voices[i].getDurationIndex() < currentduration)) currentduration = this.voices[i].getDurationIndex();\n    } // isolate voices at current duration level\n\n\n    var currentvoices = [];\n    var othervoices = [];\n\n    for (i = 0; i < this.voices.length; i++) {\n      var durationIndex = this.voices[i].getDurationIndex(); // PER: Because of the inexactness of JS floating point math, we just get close.\n\n      if (durationIndex - currentduration > epsilon) {\n        othervoices.push(this.voices[i]); //console.log(\"out: voice \",i);\n      } else {\n        currentvoices.push(this.voices[i]); //if (debug) console.log(\"in: voice \",i);\n      }\n    } // among the current duration level find the one which needs starting furthest right\n\n\n    spacingunit = 0; // number of spacingunits coming from the previously laid out element to this one\n\n    var spacingduration = 0;\n\n    for (i = 0; i < currentvoices.length; i++) {\n      //console.log(\"greatest spacing unit\", x, currentvoices[i].getNextX(), currentvoices[i].getSpacingUnits(), currentvoices[i].spacingduration);\n      if (currentvoices[i].getNextX() > x) {\n        x = currentvoices[i].getNextX();\n        spacingunit = currentvoices[i].getSpacingUnits();\n        spacingduration = currentvoices[i].spacingduration;\n      }\n    } //console.log(\"new spacingunit\", spacingunit, this.spacingunits, \"=\"+(spacingunit+ this.spacingunits));\n\n\n    this.spacingunits += spacingunit;\n    this.minspace = Math.min(this.minspace, spacingunit);\n    if (debug) console.log(\"currentduration: \", currentduration, this.spacingunits, this.minspace);\n\n    for (i = 0; i < currentvoices.length; i++) {\n      var voicechildx = currentvoices[i].layoutOneItem(x, spacing);\n      var dx = voicechildx - x;\n\n      if (dx > 0) {\n        x = voicechildx; //update x\n\n        for (var j = 0; j < i; j++) {\n          // shift over all previously laid out elements\n          currentvoices[j].shiftRight(dx);\n        }\n      }\n    } // remove the value of already counted spacing units in other voices (e.g. if a voice had planned to use up 5 spacing units but is not in line to be laid out at this duration level - where we've used 2 spacing units - then we must use up 3 spacing units, not 5)\n\n\n    for (i = 0; i < othervoices.length; i++) {\n      othervoices[i].spacingduration -= spacingduration;\n      othervoices[i].updateNextX(x, spacing); // adjust other voices expectations\n    } // update indexes of currently laid out elems\n\n\n    for (i = 0; i < currentvoices.length; i++) {\n      var voice = currentvoices[i];\n      voice.updateIndices();\n    }\n  } // finished laying out\n  // find the greatest remaining x as a base for the width\n\n\n  for (i = 0; i < this.voices.length; i++) {\n    if (this.voices[i].getNextX() > x) {\n      x = this.voices[i].getNextX();\n      spacingunit = this.voices[i].getSpacingUnits();\n    }\n  } //console.log(\"greatest remaining\",spacingunit,x);\n\n\n  this.spacingunits += spacingunit;\n  this.w = x;\n\n  for (i = 0; i < this.voices.length; i++) {\n    this.voices[i].w = this.w;\n  }\n};\n\nStaffGroupElement.prototype.calcHeight = function () {\n  // the height is calculated here in a parallel way to the drawing below in hopes that both of these functions will be modified together.\n  // TODO-PER: also add the space between staves. (That's systemStaffSeparation, which is the minimum distance between the staff LINES.)\n  var height = 0;\n\n  for (var i = 0; i < this.voices.length; i++) {\n    var staff = this.voices[i].staff;\n\n    if (!this.voices[i].duplicate) {\n      height += staff.top;\n      if (staff.bottom < 0) height += -staff.bottom;\n    }\n  }\n\n  return height;\n};\n\nStaffGroupElement.prototype.draw = function (renderer) {\n  // We enter this method with renderer.y pointing to the topmost coordinate that we're allowed to draw.\n  // All of the children that will be drawn have a relative \"pitch\" set, where zero is the first ledger line below the staff.\n  // renderer.y will be offset at the beginning of each staff by the amount required to make the relative pitch work.\n  // If there are multiple staves, then renderer.y will be incremented for each new staff.\n  var debugPrint;\n  var colorIndex;\n\n  if (\n  /*ABCJS.write.debugPlacement*/\n  false) {\n    var colors = [\"rgba(207,27,36,0.4)\", \"rgba(168,214,80,0.4)\", \"rgba(110,161,224,0.4)\", \"rgba(191,119,218,0.4)\", \"rgba(195,30,151,0.4)\", \"rgba(31,170,177,0.4)\", \"rgba(220,166,142,0.4)\"];\n\n    debugPrint = function (staff, key) {\n      if (staff.positionY[key]) {\n        //renderer.printHorizontalLine(50, renderer.calcY(staff.positionY[key]), key.substr(0, 4) + \" \" + Math.round(staff.positionY[key]));\n        var height = staff.specialY[key] * spacing.STEP;\n        renderer.printShadedBox(renderer.padding.left, renderer.calcY(staff.positionY[key]), renderer.controller.width, height, colors[colorIndex], key.substr(0, 4));\n        colorIndex += 1;\n        if (colorIndex > 6) colorIndex = 0;\n      }\n    };\n  } // An invisible marker is useful to be able to find where each system starts.\n\n\n  renderer.addInvisibleMarker(\"abcjs-top-of-system\");\n  var startY = renderer.y; // So that it can be restored after we're done.\n  // Set the absolute Y position for each staff here, so the voice drawing below can just use if.\n\n  for (var j = 0; j < this.staffs.length; j++) {\n    var staff1 = this.staffs[j]; //renderer.printHorizontalLine(50, renderer.y, \"start\");\n\n    renderer.moveY(spacing.STEP, staff1.top);\n    staff1.absoluteY = renderer.y;\n\n    if (\n    /*ABCJS.write.debugPlacement*/\n    false) {\n      colorIndex = 0;\n      renderer.printShadedBox(renderer.padding.left, renderer.calcY(staff1.originalTop), renderer.controller.width, renderer.calcY(staff1.originalBottom) - renderer.calcY(staff1.originalTop), \"rgba(0,0,0,0.1)\");\n      debugPrint(staff1, 'chordHeightAbove');\n      debugPrint(staff1, 'chordHeightBelow');\n      debugPrint(staff1, 'dynamicHeightAbove');\n      debugPrint(staff1, 'dynamicHeightBelow');\n      debugPrint(staff1, 'endingHeightAbove');\n      debugPrint(staff1, 'lyricHeightAbove');\n      debugPrint(staff1, 'lyricHeightBelow');\n      debugPrint(staff1, 'partHeightAbove');\n      debugPrint(staff1, 'tempoHeightAbove');\n      debugPrint(staff1, 'volumeHeightAbove');\n      debugPrint(staff1, 'volumeHeightBelow');\n    }\n\n    if (staff1.bottom < 0) renderer.moveY(spacing.STEP, -staff1.bottom);\n  }\n\n  var topLine; // these are to connect multiple staves. We need to remember where they are.\n\n  var bottomLine;\n  var bartop = 0;\n  renderer.measureNumber = null;\n  renderer.noteNumber = null;\n\n  for (var i = 0; i < this.voices.length; i++) {\n    var staff = this.voices[i].staff;\n    renderer.y = staff.absoluteY;\n    renderer.voiceNumber = i; //renderer.y = staff.y;\n    // offset for starting the counting at middle C\n\n    if (!this.voices[i].duplicate) {\n      //\t\t\trenderer.moveY(spacing.STEP, staff.top);\n      if (!topLine) topLine = renderer.calcY(10);\n      bottomLine = renderer.calcY(2);\n\n      if (staff.lines !== 0) {\n        renderer.measureNumber = null;\n        renderer.noteNumber = null;\n        renderer.printStave(this.startx, this.w, staff.lines);\n      }\n    }\n\n    this.voices[i].draw(renderer, bartop);\n    renderer.measureNumber = null;\n    renderer.noteNumber = null;\n\n    if (!this.voices[i].duplicate) {\n      bartop = renderer.calcY(2); // This connects the bar lines between two different staves.\n      //\t\t\tif (staff.bottom < 0)\n      //\t\t\t\trenderer.moveY(spacing.STEP, -staff.bottom);\n    }\n\n    if (this.brace) {\n      //Tony\n      if (i === this.brace.length - 1) {\n        if (this.brace) {\n          this.brace.draw(renderer, topLine, bottomLine); //tony\n        }\n      }\n    }\n  }\n\n  renderer.measureNumber = null;\n  renderer.noteNumber = null; // connect all the staves together with a vertical line\n\n  if (this.staffs.length > 1) {\n    renderer.printStem(this.startx, 0.6, topLine, bottomLine);\n  }\n\n  renderer.y = startY;\n};\n\nmodule.exports = StaffGroupElement;","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/node_modules/abcjs/src/write/abc_staff_group_element.js"],"names":["spacing","require","StaffGroupElement","voices","staffs","brace","undefined","prototype","setLimit","member","voice","specialY","staff","Math","max","addVoice","staffnumber","stafflines","voiceNum","length","push","top","bottom","lines","tempoHeightAbove","partHeightAbove","volumeHeightAbove","dynamicHeightAbove","endingHeightAbove","chordHeightAbove","lyricHeightAbove","lyricHeightBelow","chordHeightBelow","volumeHeightBelow","dynamicHeightBelow","setStaffLimits","min","setUpperAndLowerElements","renderer","lastStaffBottom","i","positionY","originalTop","originalBottom","j","thisStaffTop","forcedSpacingBetween","minSpacingInPitches","systemStaffSeparation","STEP","addedSpace","finished","layoutEnded","getLeftEdgeOfStaff","x","padding","left","voiceheaderw","header","size","getTextSize","width","sizeW","setLocation","getWidth","layout","debug","epsilon","spacingunits","minspace","startx","currentduration","console","log","beginLayout","spacingunit","getDurationIndex","currentvoices","othervoices","durationIndex","spacingduration","getNextX","getSpacingUnits","voicechildx","layoutOneItem","dx","shiftRight","updateNextX","updateIndices","w","calcHeight","height","duplicate","draw","debugPrint","colorIndex","colors","key","printShadedBox","calcY","controller","substr","addInvisibleMarker","startY","y","staff1","moveY","absoluteY","topLine","bottomLine","bartop","measureNumber","noteNumber","voiceNumber","printStave","printStem","module","exports"],"mappings":"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","sourcesContent":["//    abc_staff_group_element.js: Definition of the StaffGroupElement class.\n//    Copyright (C) 2010-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*globals console */\n\nvar spacing = require('./abc_spacing');\n\n// StaffGroupElement contains all the elements that go together to make one line of music.\n// That might be multiple staves that are tied together, and it might be multiple voices on one staff.\n//\n// Methods:\n// constructor: some basic initialization\n// addVoice(): Called once for each voice. May add a new staff if needed.\n// finished(): Called only internally by layout()\n// layout(): This does all the layout. It sets the following: spacingunits, startx, minspace, w, and the x-coordinate of each element in each voice.\n// draw(): Calls the underlying methods on the voice objects to do the drawing. Sets y and height.\n//\n// Members:\n// staffs: an array of all the staves in this group. Each staff contains the following elements:\n//    { top, bottom, highest, lowest, y }\n// voices: array of VoiceElement objects. This is mostly passed in, but the VoiceElement objects are modified here.\n//\n// spacingunits: number of relative x-units in the line. Used by the calling function to pass back in as the \"spacing\" input parameter.\n// TODO-PER: This should actually be passed back as a return value.\n// minspace: smallest space between two notes. Used by the calling function to pass back in as the \"spacing\" input parameter.\n// TODO-PER: This should actually be passed back as a return value.\n// startx: The left edge, taking the margin and the optional voice name. Used by the draw() method.\n// w: The width of the line. Used by calling function to pass back in as the \"spacing\" input parameter, and the draw() method.\n// TODO-PER: This should actually be passed back as a return value.  (TODO-PER: in pixels or spacing units?)\n// y: The top of the staff group, in pixels. This is set in the draw method.\n// TODO-PER: Where is that used? It looks like it might not be needed.\n// height: Set in the draw() method to the height actually used. Used by the calling function to know where to start the next staff group.\n// TODO-PER: This should actually be set in the layout method and passed back as a return value.\n\nvar StaffGroupElement = function() {\n\tthis.voices = [];\n\tthis.staffs = [];\n\tthis.brace = undefined; //tony\n};\n\nStaffGroupElement.prototype.setLimit = function(member, voice) {\n\tif (!voice.specialY[member]) return;\n\tif (!voice.staff.specialY[member])\n\t\tvoice.staff.specialY[member] = voice.specialY[member];\n\telse\n\t\tvoice.staff.specialY[member] = Math.max(voice.staff.specialY[member], voice.specialY[member]);\n};\n\nStaffGroupElement.prototype.addVoice = function (voice, staffnumber, stafflines) {\n\tvar voiceNum = this.voices.length;\n\tthis.voices[voiceNum] = voice;\n\tif (this.staffs[staffnumber])\n\t\tthis.staffs[staffnumber].voices.push(voiceNum);\n\telse {\n\t\t// TODO-PER: how does the min/max change when stafflines is not 5?\n\t\tthis.staffs[this.staffs.length] = {\n\t\t\ttop: 10,\n\t\t\tbottom: 2,\n\t\t\tlines: stafflines,\n\t\t\tvoices: [voiceNum],\n\t\t\tspecialY: {\n\t\t\t\ttempoHeightAbove: 0,\n\t\t\t\tpartHeightAbove: 0,\n\t\t\t\tvolumeHeightAbove: 0,\n\t\t\t\tdynamicHeightAbove: 0,\n\t\t\t\tendingHeightAbove: 0,\n\t\t\t\tchordHeightAbove: 0,\n\t\t\t\tlyricHeightAbove: 0,\n\n\t\t\t\tlyricHeightBelow: 0,\n\t\t\t\tchordHeightBelow: 0,\n\t\t\t\tvolumeHeightBelow: 0,\n\t\t\t\tdynamicHeightBelow: 0\n\t\t\t}\n\t\t};\n\t}\n\tvoice.staff = this.staffs[staffnumber];\n};\n\nStaffGroupElement.prototype.setStaffLimits = function (voice) {\n\tvoice.staff.top = Math.max(voice.staff.top, voice.top);\n\tvoice.staff.bottom = Math.min(voice.staff.bottom, voice.bottom);\n\tthis.setLimit('tempoHeightAbove', voice);\n\tthis.setLimit('partHeightAbove', voice);\n\tthis.setLimit('volumeHeightAbove', voice);\n\tthis.setLimit('dynamicHeightAbove', voice);\n\tthis.setLimit('endingHeightAbove', voice);\n\tthis.setLimit('chordHeightAbove', voice);\n\tthis.setLimit('lyricHeightAbove', voice);\n\tthis.setLimit('lyricHeightBelow', voice);\n\tthis.setLimit('chordHeightBelow', voice);\n\tthis.setLimit('volumeHeightBelow', voice);\n\tthis.setLimit('dynamicHeightBelow', voice);\n};\n\nStaffGroupElement.prototype.setUpperAndLowerElements = function(renderer) {\n\t// Each staff already has the top and bottom set, now we see if there are elements that are always on top and bottom, and resolve their pitch.\n\t// Also, get the overall height of all the staves in this group.\n\tvar lastStaffBottom;\n\tfor (var i = 0; i < this.staffs.length; i++) {\n\t\tvar staff = this.staffs[i];\n\t\t// the vertical order of elements that are above is: tempo, part, volume/dynamic, ending/chord, lyric\n\t\t// the vertical order of elements that are below is: lyric, chord, volume/dynamic\n\t\tvar positionY = {\n\t\t\ttempoHeightAbove: 0,\n\t\t\tpartHeightAbove: 0,\n\t\t\tvolumeHeightAbove: 0,\n\t\t\tdynamicHeightAbove: 0,\n\t\t\tendingHeightAbove: 0,\n\t\t\tchordHeightAbove: 0,\n\t\t\tlyricHeightAbove: 0,\n\n\t\t\tlyricHeightBelow: 0,\n\t\t\tchordHeightBelow: 0,\n\t\t\tvolumeHeightBelow: 0,\n\t\t\tdynamicHeightBelow: 0\n\t\t};\n\n\t\tif (/*ABCJS.write.debugPlacement*/false) {\n\t\t\tstaff.originalTop = staff.top; // This is just being stored for debugging purposes.\n\t\t\tstaff.originalBottom = staff.bottom; // This is just being stored for debugging purposes.\n\t\t}\n\n\t\tif (staff.specialY.lyricHeightAbove) { staff.top += staff.specialY.lyricHeightAbove; positionY.lyricHeightAbove = staff.top; }\n\t\tif (staff.specialY.chordHeightAbove) { staff.top += staff.specialY.chordHeightAbove; positionY.chordHeightAbove = staff.top; }\n\t\tif (staff.specialY.endingHeightAbove) {\n\t\t\tif (staff.specialY.chordHeightAbove)\n\t\t\t\tstaff.top += 2;\n\t\t\telse\n\t\t\t\tstaff.top += staff.specialY.endingHeightAbove;\n\t\t\tpositionY.endingHeightAbove = staff.top;\n\t\t}\n\t\tif (staff.specialY.dynamicHeightAbove && staff.specialY.volumeHeightAbove) {\n\t\t\tstaff.top += Math.max(staff.specialY.dynamicHeightAbove, staff.specialY.volumeHeightAbove);\n\t\t\tpositionY.dynamicHeightAbove = staff.top;\n\t\t\tpositionY.volumeHeightAbove = staff.top;\n\t\t} else if (staff.specialY.dynamicHeightAbove) {\n\t\t\tstaff.top += staff.specialY.dynamicHeightAbove; positionY.dynamicHeightAbove = staff.top;\n\t\t} else if (staff.specialY.volumeHeightAbove) { staff.top += staff.specialY.volumeHeightAbove; positionY.volumeHeightAbove = staff.top; }\n\t\tif (staff.specialY.partHeightAbove) { staff.top += staff.specialY.partHeightAbove; positionY.partHeightAbove = staff.top; }\n\t\tif (staff.specialY.tempoHeightAbove) { staff.top += staff.specialY.tempoHeightAbove; positionY.tempoHeightAbove = staff.top; }\n\n\t\tif (staff.specialY.lyricHeightBelow) { positionY.lyricHeightBelow = staff.bottom; staff.bottom -= staff.specialY.lyricHeightBelow; }\n\t\tif (staff.specialY.chordHeightBelow) { positionY.chordHeightBelow = staff.bottom; staff.bottom -= staff.specialY.chordHeightBelow; }\n\t\tif (staff.specialY.volumeHeightBelow && staff.specialY.dynamicHeightBelow) {\n\t\t\tpositionY.volumeHeightBelow = staff.bottom;\n\t\t\tpositionY.dynamicHeightBelow = staff.bottom;\n\t\t\tstaff.bottom -= Math.max(staff.specialY.volumeHeightBelow, staff.specialY.dynamicHeightBelow);\n\t\t} else if (staff.specialY.volumeHeightBelow) {\n\t\t\tpositionY.volumeHeightBelow = staff.bottom; staff.bottom -= staff.specialY.volumeHeightBelow;\n\t\t} else if (staff.specialY.dynamicHeightBelow) {\n\t\t\tpositionY.dynamicHeightBelow = staff.bottom; staff.bottom -= staff.specialY.dynamicHeightBelow;\n\t\t}\n\n\t\tif (/*ABCJS.write.debugPlacement*/false)\n\t\t\tstaff.positionY = positionY; // This is just being stored for debugging purposes.\n\n\t\tfor (var j = 0; j < staff.voices.length; j++) {\n\t\t\tvar voice = this.voices[staff.voices[j]];\n\t\t\tvoice.setUpperAndLowerElements(positionY);\n\t\t}\n\t\t// We might need a little space in between staves if the staves haven't been pushed far enough apart by notes or extra vertical stuff.\n\t\t// Only try to put in extra space if this isn't the top staff.\n\t\tif (lastStaffBottom !== undefined) {\n\t\t\tvar thisStaffTop = staff.top - 10;\n\t\t\tvar forcedSpacingBetween = lastStaffBottom + thisStaffTop;\n\t\t\tvar minSpacingInPitches = renderer.spacing.systemStaffSeparation/spacing.STEP;\n\t\t\tvar addedSpace = minSpacingInPitches - forcedSpacingBetween;\n\t\t\tif (addedSpace > 0)\n\t\t\t\tstaff.top += addedSpace;\n\t\t}\n\t\tlastStaffBottom = 2 - staff.bottom; // the staff starts at position 2 and the bottom variable is negative. Therefore to find out how large the bottom is, we reverse the sign of the bottom, and add the 2 in.\n\n\t\t// Now we need a little margin on the top, so we'll just throw that in.\n\t\t//staff.top += 4;\n\t\t//console.log(\"Staff Y: \",i,heightInPitches,staff.top,staff.bottom);\n\t}\n\t//console.log(\"Staff Height: \",heightInPitches,this.height);\n};\n\nStaffGroupElement.prototype.finished = function() {\n\tfor (var i=0;i<this.voices.length;i++) {\n\t\tif (!this.voices[i].layoutEnded()) return false;\n\t}\n\treturn true;\n};\n\nfunction getLeftEdgeOfStaff(renderer, voices, brace) {\n\tvar x = renderer.padding.left;\n\n\t// find out how much space will be taken up by voice headers\n\tvar voiceheaderw = 0;\n\tfor (var i=0;i<voices.length;i++) {\n\t\tif(voices[i].header) {\n\t\t\tvar size = renderer.getTextSize(voices[i].header, 'voicefont', '');\n\t\t\tvoiceheaderw = Math.max(voiceheaderw,size.width);\n\t\t}\n\t}\n\tif (voiceheaderw) {\n\t\t// Give enough spacing to the right - we use the width of an A for the amount of spacing.\n\t\tvar sizeW = renderer.getTextSize(\"A\", 'voicefont', '');\n\t\tvoiceheaderw += sizeW.width;\n\t}\n\tx += voiceheaderw;\n\n\tif (brace) {\n\t\tbrace.setLocation(x);\n\t\tx += brace.getWidth();\n\t}\n\treturn x;\n}\n\nStaffGroupElement.prototype.layout = function(spacing, renderer, debug) {\n\tvar epsilon = 0.0000001; // Fudging for inexactness of floating point math.\n\tthis.spacingunits = 0; // number of times we will have ended up using the spacing distance (as opposed to fixed width distances)\n\tthis.minspace = 1000; // a big number to start off with - used to find out what the smallest space between two notes is -- GD 2014.1.7\n\n\tvar x = getLeftEdgeOfStaff(renderer, this.voices, this.brace);\n\tthis.startx=x;\n\tvar i;\n\n\tvar currentduration = 0;\n\tif (debug) console.log(\"init layout\", spacing);\n\tfor (i=0;i<this.voices.length;i++) {\n\t\tthis.voices[i].beginLayout(x);\n\t}\n\n\tvar spacingunit = 0; // number of spacingunits coming from the previously laid out element to this one\n\twhile (!this.finished()) {\n\t\t// find first duration level to be laid out among candidates across voices\n\t\tcurrentduration= null; // candidate smallest duration level\n\t\tfor (i=0;i<this.voices.length;i++) {\n\t\t\tif (!this.voices[i].layoutEnded() && (!currentduration || this.voices[i].getDurationIndex()<currentduration))\n\t\t\t\tcurrentduration=this.voices[i].getDurationIndex();\n\t\t}\n\n\n\t\t// isolate voices at current duration level\n\t\tvar currentvoices = [];\n\t\tvar othervoices = [];\n\t\tfor (i=0;i<this.voices.length;i++) {\n\t\t\tvar durationIndex = this.voices[i].getDurationIndex();\n\t\t\t// PER: Because of the inexactness of JS floating point math, we just get close.\n\t\t\tif (durationIndex - currentduration > epsilon) {\n\t\t\t\tothervoices.push(this.voices[i]);\n\t\t\t\t//console.log(\"out: voice \",i);\n\t\t\t} else {\n\t\t\t\tcurrentvoices.push(this.voices[i]);\n\t\t\t\t//if (debug) console.log(\"in: voice \",i);\n\t\t\t}\n\t\t}\n\n\t\t// among the current duration level find the one which needs starting furthest right\n\t\tspacingunit = 0; // number of spacingunits coming from the previously laid out element to this one\n\t\tvar spacingduration = 0;\n\t\tfor (i=0;i<currentvoices.length;i++) {\n\t\t\t//console.log(\"greatest spacing unit\", x, currentvoices[i].getNextX(), currentvoices[i].getSpacingUnits(), currentvoices[i].spacingduration);\n\t\t\tif (currentvoices[i].getNextX()>x) {\n\t\t\t\tx=currentvoices[i].getNextX();\n\t\t\t\tspacingunit=currentvoices[i].getSpacingUnits();\n\t\t\t\tspacingduration = currentvoices[i].spacingduration;\n\t\t\t}\n\t\t}\n\t\t//console.log(\"new spacingunit\", spacingunit, this.spacingunits, \"=\"+(spacingunit+ this.spacingunits));\n\t\tthis.spacingunits+=spacingunit;\n\t\tthis.minspace = Math.min(this.minspace,spacingunit);\n\t\tif (debug) console.log(\"currentduration: \",currentduration, this.spacingunits, this.minspace);\n\n\t\tfor (i=0;i<currentvoices.length;i++) {\n\t\t\tvar voicechildx = currentvoices[i].layoutOneItem(x,spacing);\n\t\t\tvar dx = voicechildx-x;\n\t\t\tif (dx>0) {\n\t\t\t\tx = voicechildx; //update x\n\t\t\t\tfor (var j=0;j<i;j++) { // shift over all previously laid out elements\n\t\t\t\t\tcurrentvoices[j].shiftRight(dx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// remove the value of already counted spacing units in other voices (e.g. if a voice had planned to use up 5 spacing units but is not in line to be laid out at this duration level - where we've used 2 spacing units - then we must use up 3 spacing units, not 5)\n\t\tfor (i=0;i<othervoices.length;i++) {\n\t\t\tothervoices[i].spacingduration-=spacingduration;\n\t\t\tothervoices[i].updateNextX(x,spacing); // adjust other voices expectations\n\t\t}\n\n\t\t// update indexes of currently laid out elems\n\t\tfor (i=0;i<currentvoices.length;i++) {\n\t\t\tvar voice = currentvoices[i];\n\t\t\tvoice.updateIndices();\n\t\t}\n\t} // finished laying out\n\n\n\t// find the greatest remaining x as a base for the width\n\tfor (i=0;i<this.voices.length;i++) {\n\t\tif (this.voices[i].getNextX()>x) {\n\t\t\tx=this.voices[i].getNextX();\n\t\t\tspacingunit=this.voices[i].getSpacingUnits();\n\t\t}\n\t}\n\t//console.log(\"greatest remaining\",spacingunit,x);\n\tthis.spacingunits+=spacingunit;\n\tthis.w = x;\n\n\tfor (i=0;i<this.voices.length;i++) {\n\t\tthis.voices[i].w=this.w;\n\t}\n};\n\nStaffGroupElement.prototype.calcHeight = function () {\n\t// the height is calculated here in a parallel way to the drawing below in hopes that both of these functions will be modified together.\n\t// TODO-PER: also add the space between staves. (That's systemStaffSeparation, which is the minimum distance between the staff LINES.)\n\tvar height = 0;\n\tfor (var i=0;i<this.voices.length;i++) {\n\t\tvar staff = this.voices[i].staff;\n\t\tif (!this.voices[i].duplicate) {\n\t\t\theight += staff.top;\n\t\t\tif (staff.bottom < 0)\n\t\t\t\theight += -staff.bottom;\n\t\t}\n\t}\n\treturn height;\n};\n\nStaffGroupElement.prototype.draw = function (renderer) {\n\t// We enter this method with renderer.y pointing to the topmost coordinate that we're allowed to draw.\n\t// All of the children that will be drawn have a relative \"pitch\" set, where zero is the first ledger line below the staff.\n\t// renderer.y will be offset at the beginning of each staff by the amount required to make the relative pitch work.\n\t// If there are multiple staves, then renderer.y will be incremented for each new staff.\n\n\tvar debugPrint;\n\tvar colorIndex;\n\tif (/*ABCJS.write.debugPlacement*/false) {\n\t\tvar colors = [ \"rgba(207,27,36,0.4)\", \"rgba(168,214,80,0.4)\", \"rgba(110,161,224,0.4)\", \"rgba(191,119,218,0.4)\", \"rgba(195,30,151,0.4)\",\n\t\t\t\"rgba(31,170,177,0.4)\", \"rgba(220,166,142,0.4)\" ];\n\t\tdebugPrint = function(staff, key) {\n\t\t\tif (staff.positionY[key]) {\n\t\t\t\t//renderer.printHorizontalLine(50, renderer.calcY(staff.positionY[key]), key.substr(0, 4) + \" \" + Math.round(staff.positionY[key]));\n\t\t\t\tvar height = staff.specialY[key] * spacing.STEP;\n\t\t\t\trenderer.printShadedBox(renderer.padding.left, renderer.calcY(staff.positionY[key]), renderer.controller.width, height,colors[colorIndex], key.substr(0, 4));\n\t\t\t\tcolorIndex += 1; if (colorIndex > 6) colorIndex = 0;\n\t\t\t}\n\t\t};\n\t}\n\n\t// An invisible marker is useful to be able to find where each system starts.\n\trenderer.addInvisibleMarker(\"abcjs-top-of-system\");\n\n\tvar startY = renderer.y; // So that it can be restored after we're done.\n\t// Set the absolute Y position for each staff here, so the voice drawing below can just use if.\n\tfor (var j = 0; j < this.staffs.length; j++) {\n\t\tvar staff1 = this.staffs[j];\n\t\t//renderer.printHorizontalLine(50, renderer.y, \"start\");\n\t\trenderer.moveY(spacing.STEP, staff1.top);\n\t\tstaff1.absoluteY = renderer.y;\n\t\tif (/*ABCJS.write.debugPlacement*/false) {\n\t\t\tcolorIndex = 0;\n\t\t\trenderer.printShadedBox(renderer.padding.left, renderer.calcY(staff1.originalTop), renderer.controller.width, renderer.calcY(staff1.originalBottom)-renderer.calcY(staff1.originalTop),\"rgba(0,0,0,0.1)\");\n\t\t\tdebugPrint(staff1, 'chordHeightAbove');\n\t\t\tdebugPrint(staff1, 'chordHeightBelow');\n\t\t\tdebugPrint(staff1, 'dynamicHeightAbove');\n\t\t\tdebugPrint(staff1, 'dynamicHeightBelow');\n\t\t\tdebugPrint(staff1, 'endingHeightAbove');\n\t\t\tdebugPrint(staff1, 'lyricHeightAbove');\n\t\t\tdebugPrint(staff1, 'lyricHeightBelow');\n\t\t\tdebugPrint(staff1, 'partHeightAbove');\n\t\t\tdebugPrint(staff1, 'tempoHeightAbove');\n\t\t\tdebugPrint(staff1, 'volumeHeightAbove');\n\t\t\tdebugPrint(staff1, 'volumeHeightBelow');\n\t\t}\n\t\tif (staff1.bottom < 0)\n\t\t\trenderer.moveY(spacing.STEP, -staff1.bottom);\n\t}\n\tvar topLine; // these are to connect multiple staves. We need to remember where they are.\n\tvar bottomLine;\n\n\tvar bartop = 0;\n\trenderer.measureNumber = null;\n\trenderer.noteNumber = null;\n\tfor (var i=0;i<this.voices.length;i++) {\n\t\tvar staff = this.voices[i].staff;\n\t\trenderer.y = staff.absoluteY;\n\t\trenderer.voiceNumber = i;\n\t\t//renderer.y = staff.y;\n\t\t// offset for starting the counting at middle C\n\t\tif (!this.voices[i].duplicate) {\n//\t\t\trenderer.moveY(spacing.STEP, staff.top);\n\t\t\tif (!topLine) topLine  = renderer.calcY(10);\n\t\t\tbottomLine  = renderer.calcY(2);\n\t\t\tif (staff.lines !== 0) {\n\t\t\t\trenderer.measureNumber = null;\n\t\t\t\trenderer.noteNumber = null;\n\t\t\t\trenderer.printStave(this.startx, this.w, staff.lines);\n\t\t\t}\n\t\t}\n\t\tthis.voices[i].draw(renderer, bartop);\n\t\trenderer.measureNumber = null;\n\t\trenderer.noteNumber = null;\n\t\tif (!this.voices[i].duplicate) {\n\t\t\tbartop = renderer.calcY(2); // This connects the bar lines between two different staves.\n//\t\t\tif (staff.bottom < 0)\n//\t\t\t\trenderer.moveY(spacing.STEP, -staff.bottom);\n\t\t}\n\t\tif(this.brace) {//Tony\n\t\t\tif (i === this.brace.length - 1) {\n\t\t\t\tif (this.brace) {\n\t\t\t\t\tthis.brace.draw(renderer, topLine, bottomLine); //tony\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\trenderer.measureNumber = null;\n\trenderer.noteNumber = null;\n\n\t// connect all the staves together with a vertical line\n\tif (this.staffs.length>1) {\n\t\trenderer.printStem(this.startx, 0.6, topLine, bottomLine);\n\t}\n\trenderer.y = startY;\n};\n\nmodule.exports = StaffGroupElement;\n"]},"metadata":{},"sourceType":"script"}