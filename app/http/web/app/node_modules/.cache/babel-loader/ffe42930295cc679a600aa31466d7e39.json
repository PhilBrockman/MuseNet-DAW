{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/MIDI/MIDI.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MIDIPlayer = props => {\n  _s();\n\n  let p = api.BASE_URI + \"/midifiles/\" + props.filename;\n  const [currentMidi, error, state] = usePromise(Midi.fromUrl(p));\n  let playing = false;\n  const synths = [];\n\n  const play = e => {\n    playing = !playing;\n    console.log(\">>>\", playing);\n\n    if (playing && currentMidi) {\n      const now = Tone.now() + 0.5;\n      currentMidi.tracks.forEach(track => {\n        //create a synth for each track\n        const synth = new Tone.PolySynth(Tone.Synth, {\n          envelope: {\n            attack: 0.02,\n            decay: 0.1,\n            sustain: 0.3,\n            release: 1\n          }\n        }).toDestination();\n        synths.push(synth); //schedule all of the events\n\n        track.notes.forEach(note => {\n          if (note.duration > 0) {\n            synth.triggerAttackRelease(note.name, note.duration, note.time + now, note.velocity);\n          }\n        });\n      });\n    } else {\n      //dispose the synth and make a new one\n      while (synths.length) {\n        const synth = synths.shift();\n        synth.disconnect();\n      }\n    }\n  };\n\n  return currentMidi ? /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: e => play(e),\n    children: \"Play\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 24\n  }, this) : \"loading\";\n};\n\n_s(MIDIPlayer, \"rS8ylw5fpo698gWMK21p4oM8XlY=\", true);\n\n_c = MIDIPlayer;\nexport const MIDIer = props => {\n  _s2();\n\n  const [result, error, state] = usePromise(loadMidi(props.item, false));\n\n  if (result) {\n    if (result.data[0]) {\n      return /*#__PURE__*/_jsxDEV(MIDIPlayer, {\n        filename: result.data[0].midi_location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"loading...\"\n      }, void 0, false);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"uh oh...\"\n    }, void 0, false);\n  }\n};\n\n_s2(MIDIer, \"xXO6QFaTVG2MMm19EpaJFBvZBZo=\", true);\n\n_c2 = MIDIer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MIDIPlayer\");\n$RefreshReg$(_c2, \"MIDIer\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/MIDI/MIDI.js"],"names":["MIDIPlayer","props","p","api","BASE_URI","filename","currentMidi","error","state","usePromise","Midi","fromUrl","playing","synths","play","e","console","log","now","Tone","tracks","forEach","track","synth","PolySynth","Synth","envelope","attack","decay","sustain","release","toDestination","push","notes","note","duration","triggerAttackRelease","name","time","velocity","length","shift","disconnect","MIDIer","result","loadMidi","item","data","midi_location"],"mappings":";;;;;;;AAAA,MAAMA,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,MAAIC,CAAC,GAAGC,GAAG,CAACC,QAAJ,GAAe,aAAf,GAA6BH,KAAK,CAACI,QAA3C;AACA,QAAM,CAACC,WAAD,EAAcC,KAAd,EAAqBC,KAArB,IAA8BC,UAAU,CAACC,IAAI,CAACC,OAAL,CAAaT,CAAb,CAAD,CAA9C;AACA,MAAIU,OAAO,GAAG,KAAd;AACA,QAAMC,MAAM,GAAG,EAAf;;AACA,QAAMC,IAAI,GAAIC,CAAD,IAAO;AAClBH,IAAAA,OAAO,GAAG,CAACA,OAAX;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,OAAnB;;AACC,QAAIA,OAAO,IAAIN,WAAf,EAA4B;AAC3B,YAAMY,GAAG,GAAGC,IAAI,CAACD,GAAL,KAAa,GAAzB;AACAZ,MAAAA,WAAW,CAACc,MAAZ,CAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACrC;AACA,cAAMC,KAAK,GAAG,IAAIJ,IAAI,CAACK,SAAT,CAAmBL,IAAI,CAACM,KAAxB,EAA+B;AAC5CC,UAAAA,QAAQ,EAAE;AACTC,YAAAA,MAAM,EAAE,IADC;AAETC,YAAAA,KAAK,EAAE,GAFE;AAGTC,YAAAA,OAAO,EAAE,GAHA;AAITC,YAAAA,OAAO,EAAE;AAJA;AADkC,SAA/B,EAOXC,aAPW,EAAd;AAQAlB,QAAAA,MAAM,CAACmB,IAAP,CAAYT,KAAZ,EAVqC,CAWrC;;AACAD,QAAAA,KAAK,CAACW,KAAN,CAAYZ,OAAZ,CAAqBa,IAAD,IAAU;AACrB,cAAGA,IAAI,CAACC,QAAL,GAAgB,CAAnB,EAAqB;AAC3BZ,YAAAA,KAAK,CAACa,oBAAN,CACCF,IAAI,CAACG,IADN,EAECH,IAAI,CAACC,QAFN,EAGCD,IAAI,CAACI,IAAL,GAAYpB,GAHb,EAICgB,IAAI,CAACK,QAJN;AAMS;AACX,SATD;AAUA,OAtBD;AAuBA,KAzBD,MAyBO;AACN;AACA,aAAO1B,MAAM,CAAC2B,MAAd,EAAsB;AACrB,cAAMjB,KAAK,GAAGV,MAAM,CAAC4B,KAAP,EAAd;AACAlB,QAAAA,KAAK,CAACmB,UAAN;AACA;AACD;AACH,GAnCD;;AAoCA,SAAOpC,WAAW,gBAAG;AAAQ,IAAA,OAAO,EAAGS,CAAD,IAAOD,IAAI,CAACC,CAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAH,GAAoD,SAAtE;AACD,CA1CD;;GAAMf,U;;KAAAA,U;AA4CN,OAAO,MAAM2C,MAAM,GAAI1C,KAAD,IAAW;AAAA;;AAC/B,QAAM,CAAC2C,MAAD,EAASrC,KAAT,EAAgBC,KAAhB,IAAyBC,UAAU,CAACoC,QAAQ,CAAC5C,KAAK,CAAC6C,IAAP,EAAa,KAAb,CAAT,CAAzC;;AACA,MAAGF,MAAH,EAAU;AACR,QAAGA,MAAM,CAACG,IAAP,CAAY,CAAZ,CAAH,EAAkB;AAChB,0BAAO,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAEH,MAAM,CAACG,IAAP,CAAY,CAAZ,EAAeC;AAArC;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,0BAAO;AAAA;AAAA,uBAAP;AACD;AACF,GAND,MAMO;AACL,wBAAO;AAAA;AAAA,qBAAP;AACD;AACF,CAXM;;IAAML,M;;MAAAA,M","sourcesContent":["const MIDIPlayer = (props) => {\n  let p = api.BASE_URI + \"/midifiles/\"+props.filename\n  const [currentMidi, error, state] = usePromise(Midi.fromUrl(p))\n  let playing = false;\n  const synths = [];\n  const play = (e) => {\n    playing = !playing\n    console.log(\">>>\", playing)\n\t\t\t\t\tif (playing && currentMidi) {\n\t\t\t\t\t\tconst now = Tone.now() + 0.5;\n\t\t\t\t\t\tcurrentMidi.tracks.forEach((track) => {\n\t\t\t\t\t\t\t//create a synth for each track\n\t\t\t\t\t\t\tconst synth = new Tone.PolySynth(Tone.Synth, {\n\t\t\t\t\t\t\t\tenvelope: {\n\t\t\t\t\t\t\t\t\tattack: 0.02,\n\t\t\t\t\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\t\t\t\t\tsustain: 0.3,\n\t\t\t\t\t\t\t\t\trelease: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}).toDestination();\n\t\t\t\t\t\t\tsynths.push(synth);\n\t\t\t\t\t\t\t//schedule all of the events\n\t\t\t\t\t\t\ttrack.notes.forEach((note) => {\n                if(note.duration > 0){\n  \t\t\t\t\t\t\t\tsynth.triggerAttackRelease(\n  \t\t\t\t\t\t\t\t\tnote.name,\n  \t\t\t\t\t\t\t\t\tnote.duration,\n  \t\t\t\t\t\t\t\t\tnote.time + now,\n  \t\t\t\t\t\t\t\t\tnote.velocity\n  \t\t\t\t\t\t\t\t);\n                  }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//dispose the synth and make a new one\n\t\t\t\t\t\twhile (synths.length) {\n\t\t\t\t\t\t\tconst synth = synths.shift();\n\t\t\t\t\t\t\tsynth.disconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n  }\n  return currentMidi ? <button onClick={(e) => play(e)}>Play</button> : \"loading\"\n}\n\nexport const MIDIer = (props) => {\n  const [result, error, state] = usePromise(loadMidi(props.item, false))\n  if(result){\n    if(result.data[0]){\n      return <MIDIPlayer filename={result.data[0].midi_location} />\n    } else {\n      return <>loading...</>\n    }\n  } else {\n    return <>uh oh...</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}