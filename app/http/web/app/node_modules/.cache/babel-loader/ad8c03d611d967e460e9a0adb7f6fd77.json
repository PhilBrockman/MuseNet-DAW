{"ast":null,"code":"//    abc_parse_header.js: parses a the header fields from a string representing ABC Music Notation into a usable internal structure.\n//    Copyright (C) 2010-2018 Paul Rosen (paul at paulrosen dot net)\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*global window */\nvar parseCommon = require('./abc_common');\n\nvar parseDirective = require('./abc_parse_directive');\n\nvar parseKeyVoice = require('./abc_parse_key_voice');\n\nvar ParseHeader = function (tokenizer, warn, multilineVars, tune) {\n  this.reset = function (tokenizer, warn, multilineVars, tune) {\n    parseKeyVoice.initialize(tokenizer, warn, multilineVars, tune);\n    parseDirective.initialize(tokenizer, warn, multilineVars, tune);\n  };\n\n  this.reset(tokenizer, warn, multilineVars, tune);\n\n  this.setTitle = function (title) {\n    if (multilineVars.hasMainTitle) tune.addSubtitle(tokenizer.translateString(tokenizer.stripComment(title))); // display secondary title\n    else {\n        var titleStr = tokenizer.translateString(tokenizer.theReverser(tokenizer.stripComment(title)));\n        if (multilineVars.titlecaps) titleStr = titleStr.toUpperCase();\n        tune.addMetaText(\"title\", titleStr);\n        multilineVars.hasMainTitle = true;\n      }\n  };\n\n  this.setMeter = function (line) {\n    line = tokenizer.stripComment(line);\n\n    if (line === 'C') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'common_time'\n      };\n    } else if (line === 'C|') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'cut_time'\n      };\n    } else if (line === 'o') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'tempus_perfectum'\n      };\n    } else if (line === 'c') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'tempus_imperfectum'\n      };\n    } else if (line === 'o.') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'tempus_perfectum_prolatio'\n      };\n    } else if (line === 'c.') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return {\n        type: 'tempus_imperfectum_prolatio'\n      };\n    } else if (line.length === 0 || line.toLowerCase() === 'none') {\n      if (multilineVars.havent_set_length === true) {\n        multilineVars.default_length = 0.125;\n        multilineVars.havent_set_length = false;\n      }\n\n      return null;\n    } else {\n      var tokens = tokenizer.tokenize(line, 0, line.length); // the form is [open_paren] decimal [ plus|dot decimal ]... [close_paren] slash decimal [plus same_as_before]\n\n      try {\n        var parseNum = function () {\n          // handles this much: [open_paren] decimal [ plus|dot decimal ]... [close_paren]\n          var ret = {\n            value: 0,\n            num: \"\"\n          };\n          var tok = tokens.shift();\n          if (tok.token === '(') tok = tokens.shift();\n\n          while (1) {\n            if (tok.type !== 'number') throw \"Expected top number of meter\";\n            ret.value += parseInt(tok.token);\n            ret.num += tok.token;\n            if (tokens.length === 0 || tokens[0].token === '/') return ret;\n            tok = tokens.shift();\n\n            if (tok.token === ')') {\n              if (tokens.length === 0 || tokens[0].token === '/') return ret;\n              throw \"Unexpected paren in meter\";\n            }\n\n            if (tok.token !== '.' && tok.token !== '+') throw \"Expected top number of meter\";\n            ret.num += tok.token;\n            if (tokens.length === 0) throw \"Expected top number of meter\";\n            tok = tokens.shift();\n          }\n\n          return ret; // just to suppress warning\n        };\n\n        var parseFraction = function () {\n          // handles this much: parseNum slash decimal\n          var ret = parseNum();\n          if (tokens.length === 0) return ret;\n          var tok = tokens.shift();\n          if (tok.token !== '/') throw \"Expected slash in meter\";\n          tok = tokens.shift();\n          if (tok.type !== 'number') throw \"Expected bottom number of meter\";\n          ret.den = tok.token;\n          ret.value = ret.value / parseInt(ret.den);\n          return ret;\n        };\n\n        if (tokens.length === 0) throw \"Expected meter definition in M: line\";\n        var meter = {\n          type: 'specified',\n          value: []\n        };\n        var totalLength = 0;\n\n        while (1) {\n          var ret = parseFraction();\n          totalLength += ret.value;\n          var mv = {\n            num: ret.num\n          };\n          if (ret.den !== undefined) mv.den = ret.den;\n          meter.value.push(mv);\n          if (tokens.length === 0) break; //var tok = tokens.shift();\n          //if (tok.token !== '+') throw \"Extra characters in M: line\";\n        }\n\n        if (multilineVars.havent_set_length === true) {\n          multilineVars.default_length = totalLength < 0.75 ? 0.0625 : 0.125;\n          multilineVars.havent_set_length = false;\n        }\n\n        return meter;\n      } catch (e) {\n        warn(e, line, 0);\n      }\n    }\n\n    return null;\n  };\n\n  this.calcTempo = function (relTempo) {\n    var dur = 1 / 4;\n\n    if (multilineVars.meter && multilineVars.meter.type === 'specified') {\n      dur = 1 / parseInt(multilineVars.meter.value[0].den);\n    } else if (multilineVars.origMeter && multilineVars.origMeter.type === 'specified') {\n      dur = 1 / parseInt(multilineVars.origMeter.value[0].den);\n    } //var dur = multilineVars.default_length ? multilineVars.default_length : 1;\n\n\n    for (var i = 0; i < relTempo.duration; i++) relTempo.duration[i] = dur * relTempo.duration[i];\n\n    return relTempo;\n  };\n\n  this.resolveTempo = function () {\n    if (multilineVars.tempo) {\n      // If there's a tempo waiting to be resolved\n      this.calcTempo(multilineVars.tempo);\n      tune.metaText.tempo = multilineVars.tempo;\n      delete multilineVars.tempo;\n    }\n  };\n\n  this.addUserDefinition = function (line, start, end) {\n    var equals = line.indexOf('=', start);\n\n    if (equals === -1) {\n      warn(\"Need an = in a macro definition\", line, start);\n      return;\n    }\n\n    var before = parseCommon.strip(line.substring(start, equals));\n    var after = parseCommon.strip(line.substring(equals + 1));\n\n    if (before.length !== 1) {\n      warn(\"Macro definitions can only be one character\", line, start);\n      return;\n    }\n\n    var legalChars = \"HIJKLMNOPQRSTUVWXYhijklmnopqrstuvw~\";\n\n    if (legalChars.indexOf(before) === -1) {\n      warn(\"Macro definitions must be H-Y, h-w, or tilde\", line, start);\n      return;\n    }\n\n    if (after.length === 0) {\n      warn(\"Missing macro definition\", line, start);\n      return;\n    }\n\n    if (multilineVars.macros === undefined) multilineVars.macros = {};\n    multilineVars.macros[before] = after;\n  };\n\n  this.setDefaultLength = function (line, start, end) {\n    var len = parseCommon.gsub(line.substring(start, end), \" \", \"\");\n    var len_arr = len.split('/');\n\n    if (len_arr.length === 2) {\n      var n = parseInt(len_arr[0]);\n      var d = parseInt(len_arr[1]);\n\n      if (d > 0) {\n        multilineVars.default_length = n / d; // a whole note is 1\n\n        multilineVars.havent_set_length = false;\n      }\n    } else if (len_arr.length === 1 && len_arr[0] === '1') {\n      multilineVars.default_length = 1;\n      multilineVars.havent_set_length = false;\n    }\n  };\n\n  var tempoString = {\n    larghissimo: 20,\n    adagissimo: 24,\n    sostenuto: 28,\n    grave: 32,\n    largo: 40,\n    lento: 50,\n    larghetto: 60,\n    adagio: 68,\n    adagietto: 74,\n    andante: 80,\n    andantino: 88,\n    \"marcia moderato\": 84,\n    \"andante moderato\": 100,\n    moderato: 112,\n    allegretto: 116,\n    \"allegro moderato\": 120,\n    allegro: 126,\n    animato: 132,\n    agitato: 140,\n    veloce: 148,\n    \"mosso vivo\": 156,\n    vivace: 164,\n    vivacissimo: 172,\n    allegrissimo: 176,\n    presto: 184,\n    prestissimo: 210\n  };\n\n  this.setTempo = function (line, start, end) {\n    //Q - tempo; can be used to specify the notes per minute, e.g. If\n    //the meter denominator is a 4 note then Q:120 or Q:C=120\n    //is 120 quarter notes per minute. Similarly  Q:C3=40 would be 40\n    //dotted half notes per minute. An absolute tempo may also be\n    //set, e.g. Q:1/8=120 is 120 eighth notes per minute,\n    //irrespective of the meter's denominator.\n    //\n    // This is either a number, \"C=number\", \"Cnumber=number\", or fraction [fraction...]=number\n    // It depends on the M: field, which may either not be present, or may appear after this.\n    // If M: is not present, an eighth note is used.\n    // That means that this field can't be calculated until the end, if it is the first three types, since we don't know if we'll see an M: field.\n    // So, if it is the fourth type, set it here, otherwise, save the info in the multilineVars.\n    // The temporary variables we keep are the duration and the bpm. In the first two forms, the duration is 1.\n    // In addition, a quoted string may both precede and follow. If a quoted string is present, then the duration part is optional.\n    try {\n      var tokens = tokenizer.tokenize(line, start, end);\n      if (tokens.length === 0) throw \"Missing parameter in Q: field\";\n      var tempo = {};\n      var delaySet = true;\n      var token = tokens.shift();\n\n      if (token.type === 'quote') {\n        tempo.preString = token.token;\n        token = tokens.shift();\n\n        if (tokens.length === 0) {\n          // It's ok to just get a string for the tempo\n          // If the string is a well-known tempo, put in the bpm\n          if (tempoString[tempo.preString.toLowerCase()]) {\n            tempo.bpm = tempoString[tempo.preString.toLowerCase()];\n            tempo.suppressBpm = true;\n          }\n\n          return {\n            type: 'immediate',\n            tempo: tempo\n          };\n        }\n      }\n\n      if (token.type === 'alpha' && token.token === 'C') {\n        // either type 2 or type 3\n        if (tokens.length === 0) throw \"Missing tempo after C in Q: field\";\n        token = tokens.shift();\n\n        if (token.type === 'punct' && token.token === '=') {\n          // This is a type 2 format. The duration is an implied 1\n          if (tokens.length === 0) throw \"Missing tempo after = in Q: field\";\n          token = tokens.shift();\n          if (token.type !== 'number') throw \"Expected number after = in Q: field\";\n          tempo.duration = [1];\n          tempo.bpm = parseInt(token.token);\n        } else if (token.type === 'number') {\n          // This is a type 3 format.\n          tempo.duration = [parseInt(token.token)];\n          if (tokens.length === 0) throw \"Missing = after duration in Q: field\";\n          token = tokens.shift();\n          if (token.type !== 'punct' || token.token !== '=') throw \"Expected = after duration in Q: field\";\n          if (tokens.length === 0) throw \"Missing tempo after = in Q: field\";\n          token = tokens.shift();\n          if (token.type !== 'number') throw \"Expected number after = in Q: field\";\n          tempo.bpm = parseInt(token.token);\n        } else throw \"Expected number or equal after C in Q: field\";\n      } else if (token.type === 'number') {\n        // either type 1 or type 4\n        var num = parseInt(token.token);\n\n        if (tokens.length === 0 || tokens[0].type === 'quote') {\n          // This is type 1\n          tempo.duration = [1];\n          tempo.bpm = num;\n        } else {\n          // This is type 4\n          delaySet = false;\n          token = tokens.shift();\n          if (token.type !== 'punct' && token.token !== '/') throw \"Expected fraction in Q: field\";\n          token = tokens.shift();\n          if (token.type !== 'number') throw \"Expected fraction in Q: field\";\n          var den = parseInt(token.token);\n          tempo.duration = [num / den]; // We got the first fraction, keep getting more as long as we find them.\n\n          while (tokens.length > 0 && tokens[0].token !== '=' && tokens[0].type !== 'quote') {\n            token = tokens.shift();\n            if (token.type !== 'number') throw \"Expected fraction in Q: field\";\n            num = parseInt(token.token);\n            token = tokens.shift();\n            if (token.type !== 'punct' && token.token !== '/') throw \"Expected fraction in Q: field\";\n            token = tokens.shift();\n            if (token.type !== 'number') throw \"Expected fraction in Q: field\";\n            den = parseInt(token.token);\n            tempo.duration.push(num / den);\n          }\n\n          token = tokens.shift();\n          if (token.type !== 'punct' && token.token !== '=') throw \"Expected = in Q: field\";\n          token = tokens.shift();\n          if (token.type !== 'number') throw \"Expected tempo in Q: field\";\n          tempo.bpm = parseInt(token.token);\n        }\n      } else throw \"Unknown value in Q: field\";\n\n      if (tokens.length !== 0) {\n        token = tokens.shift();\n\n        if (token.type === 'quote') {\n          tempo.postString = token.token;\n          token = tokens.shift();\n        }\n\n        if (tokens.length !== 0) throw \"Unexpected string at end of Q: field\";\n      }\n\n      if (multilineVars.printTempo === false) tempo.suppress = true;\n      return {\n        type: delaySet ? 'delaySet' : 'immediate',\n        tempo: tempo\n      };\n    } catch (msg) {\n      warn(msg, line, start);\n      return {\n        type: 'none'\n      };\n    }\n  };\n\n  this.letter_to_inline_header = function (line, i) {\n    var ws = tokenizer.eatWhiteSpace(line, i);\n    i += ws;\n\n    if (line.length >= i + 5 && line.charAt(i) === '[' && line.charAt(i + 2) === ':') {\n      var e = line.indexOf(']', i);\n\n      switch (line.substring(i, i + 3)) {\n        case \"[I:\":\n          var err = parseDirective.addDirective(line.substring(i + 3, e));\n          if (err) warn(err, line, i);\n          return [e - i + 1 + ws];\n\n        case \"[M:\":\n          var meter = this.setMeter(line.substring(i + 3, e));\n          if (tune.hasBeginMusic() && meter) tune.appendStartingElement('meter', -1, -1, meter);else multilineVars.meter = meter;\n          return [e - i + 1 + ws];\n\n        case \"[K:\":\n          var result = parseKeyVoice.parseKey(line.substring(i + 3, e));\n          if (result.foundClef && tune.hasBeginMusic()) tune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n          if (result.foundKey && tune.hasBeginMusic()) tune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n          return [e - i + 1 + ws];\n\n        case \"[P:\":\n          if (tune.lines.length <= tune.lineNum) multilineVars.partForNextLine = line.substring(i + 3, e);else tune.appendElement('part', -1, -1, {\n            title: line.substring(i + 3, e)\n          });\n          return [e - i + 1 + ws];\n\n        case \"[L:\":\n          this.setDefaultLength(line, i + 3, e);\n          return [e - i + 1 + ws];\n\n        case \"[Q:\":\n          if (e > 0) {\n            var tempo = this.setTempo(line, i + 3, e);\n            if (tempo.type === 'delaySet') tune.appendElement('tempo', -1, -1, this.calcTempo(tempo.tempo));else if (tempo.type === 'immediate') tune.appendElement('tempo', -1, -1, tempo.tempo);\n            return [e - i + 1 + ws, line.charAt(i + 1), line.substring(i + 3, e)];\n          }\n\n          break;\n\n        case \"[V:\":\n          if (e > 0) {\n            parseKeyVoice.parseVoice(line, i + 3, e); //startNewLine();\n\n            return [e - i + 1 + ws, line.charAt(i + 1), line.substring(i + 3, e)];\n          }\n\n          break;\n\n        default: // TODO: complain about unhandled header\n\n      }\n    }\n\n    return [0];\n  };\n\n  this.letter_to_body_header = function (line, i) {\n    if (line.length >= i + 3) {\n      switch (line.substring(i, i + 2)) {\n        case \"I:\":\n          var err = parseDirective.addDirective(line.substring(i + 2));\n          if (err) warn(err, line, i);\n          return [line.length];\n\n        case \"M:\":\n          var meter = this.setMeter(line.substring(i + 2));\n          if (tune.hasBeginMusic() && meter) tune.appendStartingElement('meter', -1, -1, meter);\n          return [line.length];\n\n        case \"K:\":\n          var result = parseKeyVoice.parseKey(line.substring(i + 2));\n          if (result.foundClef && tune.hasBeginMusic()) tune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n          if (result.foundKey && tune.hasBeginMusic()) tune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n          return [line.length];\n\n        case \"P:\":\n          if (tune.hasBeginMusic()) tune.appendElement('part', -1, -1, {\n            title: line.substring(i + 2)\n          });\n          return [line.length];\n\n        case \"L:\":\n          this.setDefaultLength(line, i + 2, line.length);\n          return [line.length];\n\n        case \"Q:\":\n          var e = line.indexOf('\\x12', i + 2);\n          if (e === -1) e = line.length;\n          var tempo = this.setTempo(line, i + 2, e);\n          if (tempo.type === 'delaySet') tune.appendElement('tempo', -1, -1, this.calcTempo(tempo.tempo));else if (tempo.type === 'immediate') tune.appendElement('tempo', -1, -1, tempo.tempo);\n          return [e, line.charAt(i), parseCommon.strip(line.substring(i + 2))];\n\n        case \"V:\":\n          parseKeyVoice.parseVoice(line, i + 2, line.length); //\t\t\t\t\t\tstartNewLine();\n\n          return [line.length, line.charAt(i), parseCommon.strip(line.substring(i + 2))];\n\n        default: // TODO: complain about unhandled header\n\n      }\n    }\n\n    return [0];\n  };\n\n  var metaTextHeaders = {\n    A: 'author',\n    B: 'book',\n    C: 'composer',\n    D: 'discography',\n    F: 'url',\n    G: 'group',\n    I: 'instruction',\n    N: 'notes',\n    O: 'origin',\n    R: 'rhythm',\n    S: 'source',\n    W: 'unalignedWords',\n    Z: 'transcription'\n  };\n\n  this.parseHeader = function (line) {\n    if (parseCommon.startsWith(line, '%%')) {\n      var err = parseDirective.addDirective(line.substring(2));\n      if (err) warn(err, line, 2);\n      return {};\n    }\n\n    var i = line.indexOf('%');\n    if (i >= 0) line = line.substring(0, i);\n    line = line.replace(/\\s+$/, '');\n    if (line.length === 0) return {};\n\n    if (line.length >= 2) {\n      if (line.charAt(1) === ':') {\n        var nextLine = \"\";\n\n        if (line.indexOf('\\x12') >= 0 && line.charAt(0) !== 'w') {\n          // w: is the only header field that can have a continuation.\n          nextLine = line.substring(line.indexOf('\\x12') + 1);\n          line = line.substring(0, line.indexOf('\\x12')); //This handles a continuation mark on a header field\n        }\n\n        var field = metaTextHeaders[line.charAt(0)];\n\n        if (field !== undefined) {\n          if (field === 'unalignedWords') tune.addMetaTextArray(field, parseDirective.parseFontChangeLine(tokenizer.translateString(tokenizer.stripComment(line.substring(2)))));else tune.addMetaText(field, tokenizer.translateString(tokenizer.stripComment(line.substring(2))));\n          return {};\n        } else {\n          switch (line.charAt(0)) {\n            case 'H':\n              tune.addMetaText(\"history\", tokenizer.translateString(tokenizer.stripComment(line.substring(2))));\n              multilineVars.is_in_history = true;\n              break;\n\n            case 'K':\n              // since the key is the last thing that can happen in the header, we can resolve the tempo now\n              this.resolveTempo();\n              var result = parseKeyVoice.parseKey(line.substring(2));\n\n              if (!multilineVars.is_in_header && tune.hasBeginMusic()) {\n                if (result.foundClef) tune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n                if (result.foundKey) tune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n              }\n\n              multilineVars.is_in_header = false; // The first key signifies the end of the header.\n\n              break;\n\n            case 'L':\n              this.setDefaultLength(line, 2, line.length);\n              break;\n\n            case 'M':\n              multilineVars.origMeter = multilineVars.meter = this.setMeter(line.substring(2));\n              break;\n\n            case 'P':\n              // TODO-PER: There is more to do with parts, but the writer doesn't care.\n              if (multilineVars.is_in_header) tune.addMetaText(\"partOrder\", tokenizer.translateString(tokenizer.stripComment(line.substring(2))));else multilineVars.partForNextLine = tokenizer.translateString(tokenizer.stripComment(line.substring(2)));\n              break;\n\n            case 'Q':\n              var tempo = this.setTempo(line, 2, line.length);\n              if (tempo.type === 'delaySet') multilineVars.tempo = tempo.tempo;else if (tempo.type === 'immediate') tune.metaText.tempo = tempo.tempo;\n              break;\n\n            case 'T':\n              this.setTitle(line.substring(2));\n              break;\n\n            case 'U':\n              this.addUserDefinition(line, 2, line.length);\n              break;\n\n            case 'V':\n              parseKeyVoice.parseVoice(line, 2, line.length);\n              if (!multilineVars.is_in_header) return {\n                newline: true\n              };\n              break;\n\n            case 's':\n              return {\n                symbols: true\n              };\n\n            case 'w':\n              return {\n                words: true\n              };\n\n            case 'X':\n              break;\n\n            case 'E':\n            case 'm':\n              warn(\"Ignored header\", line, 0);\n              break;\n\n            default:\n              // It wasn't a recognized header value, so parse it as music.\n              if (nextLine.length) nextLine = \"\\x12\" + nextLine; //parseRegularMusicLine(line+nextLine);\n              //nextLine = \"\";\n\n              return {\n                regular: true,\n                str: line + nextLine\n              };\n          }\n        }\n\n        if (nextLine.length > 0) return {\n          recurse: true,\n          str: nextLine\n        };\n        return {};\n      }\n    } // If we got this far, we have a regular line of mulsic\n\n\n    return {\n      regular: true,\n      str: line\n    };\n  };\n};\n\nmodule.exports = ParseHeader;","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/node_modules/abcjs/src/parse/abc_parse_header.js"],"names":["parseCommon","require","parseDirective","parseKeyVoice","ParseHeader","tokenizer","warn","multilineVars","tune","reset","initialize","setTitle","title","hasMainTitle","addSubtitle","translateString","stripComment","titleStr","theReverser","titlecaps","toUpperCase","addMetaText","setMeter","line","havent_set_length","default_length","type","length","toLowerCase","tokens","tokenize","parseNum","ret","value","num","tok","shift","token","parseInt","parseFraction","den","meter","totalLength","mv","undefined","push","e","calcTempo","relTempo","dur","origMeter","i","duration","resolveTempo","tempo","metaText","addUserDefinition","start","end","equals","indexOf","before","strip","substring","after","legalChars","macros","setDefaultLength","len","gsub","len_arr","split","n","d","tempoString","larghissimo","adagissimo","sostenuto","grave","largo","lento","larghetto","adagio","adagietto","andante","andantino","moderato","allegretto","allegro","animato","agitato","veloce","vivace","vivacissimo","allegrissimo","presto","prestissimo","setTempo","delaySet","preString","bpm","suppressBpm","postString","printTempo","suppress","msg","letter_to_inline_header","ws","eatWhiteSpace","charAt","err","addDirective","hasBeginMusic","appendStartingElement","result","parseKey","foundClef","clef","foundKey","fixKey","key","lines","lineNum","partForNextLine","appendElement","parseVoice","letter_to_body_header","metaTextHeaders","A","B","C","D","F","G","I","N","O","R","S","W","Z","parseHeader","startsWith","replace","nextLine","field","addMetaTextArray","parseFontChangeLine","is_in_history","is_in_header","newline","symbols","words","regular","str","recurse","module","exports"],"mappings":"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","sourcesContent":["//    abc_parse_header.js: parses a the header fields from a string representing ABC Music Notation into a usable internal structure.\n//    Copyright (C) 2010-2018 Paul Rosen (paul at paulrosen dot net)\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*global window */\n\nvar parseCommon = require('./abc_common');\nvar parseDirective = require('./abc_parse_directive');\nvar parseKeyVoice = require('./abc_parse_key_voice');\n\nvar ParseHeader = function(tokenizer, warn, multilineVars, tune) {\n\tthis.reset = function(tokenizer, warn, multilineVars, tune) {\n\t\tparseKeyVoice.initialize(tokenizer, warn, multilineVars, tune);\n\t\tparseDirective.initialize(tokenizer, warn, multilineVars, tune);\n\t};\n\tthis.reset(tokenizer, warn, multilineVars, tune);\n\n\tthis.setTitle = function(title) {\n\t\tif (multilineVars.hasMainTitle)\n\t\t\ttune.addSubtitle(tokenizer.translateString(tokenizer.stripComment(title)));\t// display secondary title\n\t\telse\n\t\t{\n\t\t\tvar titleStr = tokenizer.translateString(tokenizer.theReverser(tokenizer.stripComment(title)));\n\t\t\tif (multilineVars.titlecaps)\n\t\t\t\ttitleStr = titleStr.toUpperCase();\n\t\t\ttune.addMetaText(\"title\", titleStr);\n\t\t\tmultilineVars.hasMainTitle = true;\n\t\t}\n\t};\n\n\tthis.setMeter = function(line) {\n\t\tline = tokenizer.stripComment(line);\n\t\tif (line === 'C') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'common_time'};\n\t\t} else if (line === 'C|') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'cut_time'};\n\t\t} else if (line === 'o') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'tempus_perfectum'};\n\t\t} else if (line === 'c') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'tempus_imperfectum'};\n\t\t} else if (line === 'o.') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'tempus_perfectum_prolatio'};\n\t\t} else if (line === 'c.') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn {type: 'tempus_imperfectum_prolatio'};\n\t\t} else if (line.length === 0 || line.toLowerCase() === 'none') {\n\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\tmultilineVars.default_length = 0.125;\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar tokens = tokenizer.tokenize(line, 0, line.length);\n\t\t\t// the form is [open_paren] decimal [ plus|dot decimal ]... [close_paren] slash decimal [plus same_as_before]\n\t\t\ttry {\n\t\t\t\tvar parseNum = function() {\n\t\t\t\t\t// handles this much: [open_paren] decimal [ plus|dot decimal ]... [close_paren]\n\t\t\t\t\tvar ret = {value: 0, num: \"\"};\n\n\t\t\t\t\tvar tok = tokens.shift();\n\t\t\t\t\tif (tok.token === '(')\n\t\t\t\t\t\ttok = tokens.shift();\n\t\t\t\t\twhile (1) {\n\t\t\t\t\t\tif (tok.type !== 'number') throw \"Expected top number of meter\";\n\t\t\t\t\t\tret.value += parseInt(tok.token);\n\t\t\t\t\t\tret.num += tok.token;\n\t\t\t\t\t\tif (tokens.length === 0 || tokens[0].token === '/') return ret;\n\t\t\t\t\t\ttok = tokens.shift();\n\t\t\t\t\t\tif (tok.token === ')') {\n\t\t\t\t\t\t\tif (tokens.length === 0 || tokens[0].token === '/') return ret;\n\t\t\t\t\t\t\tthrow \"Unexpected paren in meter\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tok.token !== '.' && tok.token !== '+') throw \"Expected top number of meter\";\n\t\t\t\t\t\tret.num += tok.token;\n\t\t\t\t\t\tif (tokens.length === 0) throw \"Expected top number of meter\";\n\t\t\t\t\t\ttok = tokens.shift();\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\t// just to suppress warning\n\t\t\t\t};\n\n\t\t\t\tvar parseFraction = function() {\n\t\t\t\t\t// handles this much: parseNum slash decimal\n\t\t\t\t\tvar ret = parseNum();\n\t\t\t\t\tif (tokens.length === 0) return ret;\n\t\t\t\t\tvar tok = tokens.shift();\n\t\t\t\t\tif (tok.token !== '/') throw \"Expected slash in meter\";\n\t\t\t\t\ttok = tokens.shift();\n\t\t\t\t\tif (tok.type !== 'number') throw \"Expected bottom number of meter\";\n\t\t\t\t\tret.den = tok.token;\n\t\t\t\t\tret.value = ret.value / parseInt(ret.den);\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\n\t\t\t\tif (tokens.length === 0) throw \"Expected meter definition in M: line\";\n\t\t\t\tvar meter = {type: 'specified', value: [ ]};\n\t\t\t\tvar totalLength = 0;\n\t\t\t\twhile (1) {\n\t\t\t\t\tvar ret = parseFraction();\n\t\t\t\t\ttotalLength += ret.value;\n\t\t\t\t\tvar mv = { num: ret.num };\n\t\t\t\t\tif (ret.den !== undefined)\n\t\t\t\t\t\tmv.den = ret.den;\n\t\t\t\t\tmeter.value.push(mv);\n\t\t\t\t\tif (tokens.length === 0) break;\n\t\t\t\t\t//var tok = tokens.shift();\n\t\t\t\t\t//if (tok.token !== '+') throw \"Extra characters in M: line\";\n\t\t\t\t}\n\n\t\t\t\tif (multilineVars.havent_set_length === true) {\n\t\t\t\t\tmultilineVars.default_length = totalLength < 0.75 ? 0.0625 : 0.125;\n\t\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t\t}\n\t\t\t\treturn meter;\n\t\t\t} catch (e) {\n\t\t\t\twarn(e, line, 0);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\tthis.calcTempo = function(relTempo) {\n\t\tvar dur = 1/4;\n\t\tif (multilineVars.meter && multilineVars.meter.type === 'specified') {\n\t\t\tdur = 1 / parseInt(multilineVars.meter.value[0].den);\n\t\t} else if (multilineVars.origMeter && multilineVars.origMeter.type === 'specified') {\n\t\t\tdur = 1 / parseInt(multilineVars.origMeter.value[0].den);\n\t\t}\n\t\t//var dur = multilineVars.default_length ? multilineVars.default_length : 1;\n\t\tfor (var i = 0; i < relTempo.duration; i++)\n\t\t\trelTempo.duration[i] = dur * relTempo.duration[i];\n\t\treturn relTempo;\n\t};\n\n\tthis.resolveTempo = function() {\n\t\tif (multilineVars.tempo) {\t// If there's a tempo waiting to be resolved\n\t\t\tthis.calcTempo(multilineVars.tempo);\n\t\t\ttune.metaText.tempo = multilineVars.tempo;\n\t\t\tdelete multilineVars.tempo;\n\t\t}\n\t};\n\n\tthis.addUserDefinition = function(line, start, end) {\n\t\tvar equals = line.indexOf('=', start);\n\t\tif (equals === -1) {\n\t\t\twarn(\"Need an = in a macro definition\", line, start);\n\t\t\treturn;\n\t\t}\n\n\t\tvar before = parseCommon.strip(line.substring(start, equals));\n\t\tvar after = parseCommon.strip(line.substring(equals+1));\n\n\t\tif (before.length !== 1) {\n\t\t\twarn(\"Macro definitions can only be one character\", line, start);\n\t\t\treturn;\n\t\t}\n\t\tvar legalChars = \"HIJKLMNOPQRSTUVWXYhijklmnopqrstuvw~\";\n\t\tif (legalChars.indexOf(before) === -1) {\n\t\t\twarn(\"Macro definitions must be H-Y, h-w, or tilde\", line, start);\n\t\t\treturn;\n\t\t}\n\t\tif (after.length === 0) {\n\t\t\twarn(\"Missing macro definition\", line, start);\n\t\t\treturn;\n\t\t}\n\t\tif (multilineVars.macros === undefined)\n\t\t\tmultilineVars.macros = {};\n\t\tmultilineVars.macros[before] = after;\n\t};\n\n\tthis.setDefaultLength = function(line, start, end) {\n\t\tvar len = parseCommon.gsub(line.substring(start, end), \" \", \"\");\n\t\tvar len_arr = len.split('/');\n\t\tif (len_arr.length === 2) {\n\t\t\tvar n = parseInt(len_arr[0]);\n\t\t\tvar d = parseInt(len_arr[1]);\n\t\t\tif (d > 0) {\n\t\t\t\tmultilineVars.default_length = n / d;\t// a whole note is 1\n\t\t\t\tmultilineVars.havent_set_length = false;\n\t\t\t}\n\t\t} else if (len_arr.length === 1 && len_arr[0] === '1') {\n\t\t\tmultilineVars.default_length = 1;\n\t\t\tmultilineVars.havent_set_length = false;\n\t\t}\n\t};\n\n\n\tvar tempoString = {\n\n\t\tlarghissimo: 20,\n\t\tadagissimo: 24,\n\t\tsostenuto: 28,\n\t\tgrave: 32,\n\t\tlargo: 40,\n\t\tlento: 50,\n\t\tlarghetto: 60,\n\t\tadagio: 68,\n\t\tadagietto: 74,\n\t\tandante: 80,\n\t\tandantino: 88,\n\t\t\"marcia moderato\": 84,\n\t\t\"andante moderato\": 100,\n\t\tmoderato: 112,\n\t\tallegretto: 116,\n\t\t\"allegro moderato\": 120,\n\t\tallegro: 126,\n\t\tanimato: 132,\n\t\tagitato: 140,\n\t\tveloce: 148,\n\t\t\"mosso vivo\": 156,\n\t\tvivace: 164,\n\t\tvivacissimo: 172,\n\t\tallegrissimo: 176,\n\t\tpresto: 184,\n\t\tprestissimo: 210,\n\t};\n\n\tthis.setTempo = function(line, start, end) {\n\t\t//Q - tempo; can be used to specify the notes per minute, e.g. If\n\t\t//the meter denominator is a 4 note then Q:120 or Q:C=120\n\t\t//is 120 quarter notes per minute. Similarly  Q:C3=40 would be 40\n\t\t//dotted half notes per minute. An absolute tempo may also be\n\t\t//set, e.g. Q:1/8=120 is 120 eighth notes per minute,\n\t\t//irrespective of the meter's denominator.\n\t\t//\n\t\t// This is either a number, \"C=number\", \"Cnumber=number\", or fraction [fraction...]=number\n\t\t// It depends on the M: field, which may either not be present, or may appear after this.\n\t\t// If M: is not present, an eighth note is used.\n\t\t// That means that this field can't be calculated until the end, if it is the first three types, since we don't know if we'll see an M: field.\n\t\t// So, if it is the fourth type, set it here, otherwise, save the info in the multilineVars.\n\t\t// The temporary variables we keep are the duration and the bpm. In the first two forms, the duration is 1.\n\t\t// In addition, a quoted string may both precede and follow. If a quoted string is present, then the duration part is optional.\n\t\ttry {\n\t\t\tvar tokens = tokenizer.tokenize(line, start, end);\n\n\t\t\tif (tokens.length === 0) throw \"Missing parameter in Q: field\";\n\n\t\t\tvar tempo = {};\n\t\t\tvar delaySet = true;\n\t\t\tvar token = tokens.shift();\n\t\t\tif (token.type === 'quote') {\n\t\t\t\ttempo.preString = token.token;\n\t\t\t\ttoken = tokens.shift();\n\t\t\t\tif (tokens.length === 0) {\t// It's ok to just get a string for the tempo\n\t\t\t\t\t// If the string is a well-known tempo, put in the bpm\n\t\t\t\t\tif (tempoString[tempo.preString.toLowerCase()]) {\n\t\t\t\t\t\ttempo.bpm = tempoString[tempo.preString.toLowerCase()];\n\t\t\t\t\t\ttempo.suppressBpm = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn {type: 'immediate', tempo: tempo};\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (token.type === 'alpha' && token.token === 'C')\t { // either type 2 or type 3\n\t\t\t\tif (tokens.length === 0) throw \"Missing tempo after C in Q: field\";\n\t\t\t\ttoken = tokens.shift();\n\t\t\t\tif (token.type === 'punct' && token.token === '=') {\n\t\t\t\t\t// This is a type 2 format. The duration is an implied 1\n\t\t\t\t\tif (tokens.length === 0) throw \"Missing tempo after = in Q: field\";\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'number') throw \"Expected number after = in Q: field\";\n\t\t\t\t\ttempo.duration = [1];\n\t\t\t\t\ttempo.bpm = parseInt(token.token);\n\t\t\t\t} else if (token.type === 'number') {\n\t\t\t\t\t// This is a type 3 format.\n\t\t\t\t\ttempo.duration = [parseInt(token.token)];\n\t\t\t\t\tif (tokens.length === 0) throw \"Missing = after duration in Q: field\";\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'punct' || token.token !== '=') throw \"Expected = after duration in Q: field\";\n\t\t\t\t\tif (tokens.length === 0) throw \"Missing tempo after = in Q: field\";\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'number') throw \"Expected number after = in Q: field\";\n\t\t\t\t\ttempo.bpm = parseInt(token.token);\n\t\t\t\t} else throw \"Expected number or equal after C in Q: field\";\n\n\t\t\t} else if (token.type === 'number') {\t// either type 1 or type 4\n\t\t\t\tvar num = parseInt(token.token);\n\t\t\t\tif (tokens.length === 0 || tokens[0].type === 'quote') {\n\t\t\t\t\t// This is type 1\n\t\t\t\t\ttempo.duration = [1];\n\t\t\t\t\ttempo.bpm = num;\n\t\t\t\t} else {\t// This is type 4\n\t\t\t\t\tdelaySet = false;\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'punct' && token.token !== '/') throw \"Expected fraction in Q: field\";\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'number') throw \"Expected fraction in Q: field\";\n\t\t\t\t\tvar den = parseInt(token.token);\n\t\t\t\t\ttempo.duration = [num/den];\n\t\t\t\t\t// We got the first fraction, keep getting more as long as we find them.\n\t\t\t\t\twhile (tokens.length > 0  && tokens[0].token !== '=' && tokens[0].type !== 'quote') {\n\t\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\t\tif (token.type !== 'number') throw \"Expected fraction in Q: field\";\n\t\t\t\t\t\tnum = parseInt(token.token);\n\t\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\t\tif (token.type !== 'punct' && token.token !== '/') throw \"Expected fraction in Q: field\";\n\t\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\t\tif (token.type !== 'number') throw \"Expected fraction in Q: field\";\n\t\t\t\t\t\tden = parseInt(token.token);\n\t\t\t\t\t\ttempo.duration.push(num/den);\n\t\t\t\t\t}\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'punct' && token.token !== '=') throw \"Expected = in Q: field\";\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.type !== 'number') throw \"Expected tempo in Q: field\";\n\t\t\t\t\ttempo.bpm = parseInt(token.token);\n\t\t\t\t}\n\t\t\t} else throw \"Unknown value in Q: field\";\n\t\t\tif (tokens.length !== 0) {\n\t\t\t\ttoken = tokens.shift();\n\t\t\t\tif (token.type === 'quote') {\n\t\t\t\t\ttempo.postString = token.token;\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t}\n\t\t\t\tif (tokens.length !== 0) throw \"Unexpected string at end of Q: field\";\n\t\t\t}\n\t\t\tif (multilineVars.printTempo === false)\n\t\t\t\ttempo.suppress = true;\n\t\t\treturn {type: delaySet?'delaySet':'immediate', tempo: tempo};\n\t\t} catch (msg) {\n\t\t\twarn(msg, line, start);\n\t\t\treturn {type: 'none'};\n\t\t}\n\t};\n\n\tthis.letter_to_inline_header = function(line, i)\n\t{\n\t\tvar ws = tokenizer.eatWhiteSpace(line, i);\n\t\ti +=ws;\n\t\tif (line.length >= i+5 && line.charAt(i) === '[' && line.charAt(i+2) === ':') {\n\t\t\tvar e = line.indexOf(']', i);\n\t\t\tswitch(line.substring(i, i+3))\n\t\t\t{\n\t\t\t\tcase \"[I:\":\n\t\t\t\t\tvar err = parseDirective.addDirective(line.substring(i+3, e));\n\t\t\t\t\tif (err) warn(err, line, i);\n\t\t\t\t\treturn [ e-i+1+ws ];\n\t\t\t\tcase \"[M:\":\n\t\t\t\t\tvar meter = this.setMeter(line.substring(i+3, e));\n\t\t\t\t\tif (tune.hasBeginMusic() && meter)\n\t\t\t\t\t\ttune.appendStartingElement('meter', -1, -1, meter);\n\t\t\t\t\telse\n\t\t\t\t\t\tmultilineVars.meter = meter;\n\t\t\t\t\treturn [ e-i+1+ws ];\n\t\t\t\tcase \"[K:\":\n\t\t\t\t\tvar result = parseKeyVoice.parseKey(line.substring(i+3, e));\n\t\t\t\t\tif (result.foundClef && tune.hasBeginMusic())\n\t\t\t\t\t\ttune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n\t\t\t\t\tif (result.foundKey && tune.hasBeginMusic())\n\t\t\t\t\t\ttune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n\t\t\t\t\treturn [ e-i+1+ws ];\n\t\t\t\tcase \"[P:\":\n\t\t\t\t\tif (tune.lines.length <= tune.lineNum)\n\t\t\t\t\t\tmultilineVars.partForNextLine = line.substring(i+3, e);\n\t\t\t\t\telse\n\t\t\t\t\t\ttune.appendElement('part', -1, -1, {title: line.substring(i+3, e)});\n\t\t\t\t\treturn [ e-i+1+ws ];\n\t\t\t\tcase \"[L:\":\n\t\t\t\t\tthis.setDefaultLength(line, i+3, e);\n\t\t\t\t\treturn [ e-i+1+ws ];\n\t\t\t\tcase \"[Q:\":\n\t\t\t\t\tif (e > 0) {\n\t\t\t\t\t\tvar tempo = this.setTempo(line, i+3, e);\n\t\t\t\t\t\tif (tempo.type === 'delaySet') tune.appendElement('tempo', -1, -1, this.calcTempo(tempo.tempo));\n\t\t\t\t\t\telse if (tempo.type === 'immediate') tune.appendElement('tempo', -1, -1, tempo.tempo);\n\t\t\t\t\t\treturn [ e-i+1+ws, line.charAt(i+1), line.substring(i+3, e)];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"[V:\":\n\t\t\t\t\tif (e > 0) {\n\t\t\t\t\t\tparseKeyVoice.parseVoice(line, i+3, e);\n\t\t\t\t\t\t//startNewLine();\n\t\t\t\t\t\treturn [ e-i+1+ws, line.charAt(i+1), line.substring(i+3, e)];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: complain about unhandled header\n\t\t\t}\n\t\t}\n\t\treturn [ 0 ];\n\t};\n\n\tthis.letter_to_body_header = function(line, i)\n\t{\n\t\tif (line.length >= i+3) {\n\t\t\tswitch(line.substring(i, i+2))\n\t\t\t{\n\t\t\t\tcase \"I:\":\n\t\t\t\t\tvar err = parseDirective.addDirective(line.substring(i+2));\n\t\t\t\t\tif (err) warn(err, line, i);\n\t\t\t\t\treturn [ line.length ];\n\t\t\t\tcase \"M:\":\n\t\t\t\t\tvar meter = this.setMeter(line.substring(i+2));\n\t\t\t\t\tif (tune.hasBeginMusic() && meter)\n\t\t\t\t\t\ttune.appendStartingElement('meter', -1, -1, meter);\n\t\t\t\t\treturn [ line.length ];\n\t\t\t\tcase \"K:\":\n\t\t\t\t\tvar result = parseKeyVoice.parseKey(line.substring(i+2));\n\t\t\t\t\tif (result.foundClef && tune.hasBeginMusic())\n\t\t\t\t\t\ttune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n\t\t\t\t\tif (result.foundKey && tune.hasBeginMusic())\n\t\t\t\t\t\ttune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n\t\t\t\t\treturn [ line.length ];\n\t\t\t\tcase \"P:\":\n\t\t\t\t\tif (tune.hasBeginMusic())\n\t\t\t\t\t\ttune.appendElement('part', -1, -1, {title: line.substring(i+2)});\n\t\t\t\t\treturn [ line.length ];\n\t\t\t\tcase \"L:\":\n\t\t\t\t\tthis.setDefaultLength(line, i+2, line.length);\n\t\t\t\t\treturn [ line.length ];\n\t\t\t\tcase \"Q:\":\n\t\t\t\t\tvar e = line.indexOf('\\x12', i+2);\n\t\t\t\t\tif (e === -1) e = line.length;\n\t\t\t\t\tvar tempo = this.setTempo(line, i+2, e);\n\t\t\t\t\tif (tempo.type === 'delaySet') tune.appendElement('tempo', -1, -1, this.calcTempo(tempo.tempo));\n\t\t\t\t\telse if (tempo.type === 'immediate') tune.appendElement('tempo', -1, -1, tempo.tempo);\n\t\t\t\treturn [ e, line.charAt(i), parseCommon.strip(line.substring(i+2))];\n\t\t\t\tcase \"V:\":\n\t\t\t\t\tparseKeyVoice.parseVoice(line, i+2, line.length);\n//\t\t\t\t\t\tstartNewLine();\n\t\t\t\t\treturn [ line.length, line.charAt(i), parseCommon.strip(line.substring(i+2))];\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: complain about unhandled header\n\t\t\t}\n\t\t}\n\t\treturn [ 0 ];\n\t};\n\n\tvar metaTextHeaders = {\n\t\tA: 'author',\n\t\tB: 'book',\n\t\tC: 'composer',\n\t\tD: 'discography',\n\t\tF: 'url',\n\t\tG: 'group',\n\t\tI: 'instruction',\n\t\tN: 'notes',\n\t\tO: 'origin',\n\t\tR: 'rhythm',\n\t\tS: 'source',\n\t\tW: 'unalignedWords',\n\t\tZ: 'transcription'\n\t};\n\n\tthis.parseHeader = function(line) {\n\t\tif (parseCommon.startsWith(line, '%%')) {\n\t\t\tvar err = parseDirective.addDirective(line.substring(2));\n\t\t\tif (err) warn(err, line, 2);\n\t\t\treturn {};\n\t\t}\n\t\tvar i = line.indexOf('%');\n\t\tif (i >= 0)\n\t\t\tline = line.substring(0, i);\n\t\tline = line.replace(/\\s+$/, '');\n\n\t\tif (line.length === 0)\n\t\t\treturn {};\n\n\t\tif (line.length >= 2) {\n\t\t\tif (line.charAt(1) === ':') {\n\t\t\t\tvar nextLine = \"\";\n\t\t\t\tif (line.indexOf('\\x12') >= 0 && line.charAt(0) !== 'w') {\t// w: is the only header field that can have a continuation.\n\t\t\t\t\tnextLine = line.substring(line.indexOf('\\x12')+1);\n\t\t\t\t\tline = line.substring(0, line.indexOf('\\x12'));\t//This handles a continuation mark on a header field\n\t\t\t\t}\n\t\t\t\tvar field = metaTextHeaders[line.charAt(0)];\n\t\t\t\tif (field !== undefined) {\n\t\t\t\t\tif (field === 'unalignedWords')\n\t\t\t\t\t\ttune.addMetaTextArray(field, parseDirective.parseFontChangeLine(tokenizer.translateString(tokenizer.stripComment(line.substring(2)))));\n\t\t\t\t\telse\n\t\t\t\t\t\ttune.addMetaText(field, tokenizer.translateString(tokenizer.stripComment(line.substring(2))));\n\t\t\t\t\treturn {};\n\t\t\t\t} else {\n\t\t\t\t\tswitch(line.charAt(0))\n\t\t\t\t\t{\n\t\t\t\t\t\tcase  'H':\n\t\t\t\t\t\t\ttune.addMetaText(\"history\", tokenizer.translateString(tokenizer.stripComment(line.substring(2))));\n\t\t\t\t\t\t\tmultilineVars.is_in_history = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'K':\n\t\t\t\t\t\t\t// since the key is the last thing that can happen in the header, we can resolve the tempo now\n\t\t\t\t\t\t\tthis.resolveTempo();\n\t\t\t\t\t\t\tvar result = parseKeyVoice.parseKey(line.substring(2));\n\t\t\t\t\t\t\tif (!multilineVars.is_in_header && tune.hasBeginMusic()) {\n\t\t\t\t\t\t\t\tif (result.foundClef)\n\t\t\t\t\t\t\t\t\ttune.appendStartingElement('clef', -1, -1, multilineVars.clef);\n\t\t\t\t\t\t\t\tif (result.foundKey)\n\t\t\t\t\t\t\t\t\ttune.appendStartingElement('key', -1, -1, parseKeyVoice.fixKey(multilineVars.clef, multilineVars.key));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmultilineVars.is_in_header = false;\t// The first key signifies the end of the header.\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'L':\n\t\t\t\t\t\t\tthis.setDefaultLength(line, 2, line.length);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'M':\n\t\t\t\t\t\t\tmultilineVars.origMeter = multilineVars.meter = this.setMeter(line.substring(2));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'P':\n\t\t\t\t\t\t\t// TODO-PER: There is more to do with parts, but the writer doesn't care.\n\t\t\t\t\t\t\tif (multilineVars.is_in_header)\n\t\t\t\t\t\t\t\ttune.addMetaText(\"partOrder\", tokenizer.translateString(tokenizer.stripComment(line.substring(2))));\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmultilineVars.partForNextLine = tokenizer.translateString(tokenizer.stripComment(line.substring(2)));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'Q':\n\t\t\t\t\t\t\tvar tempo = this.setTempo(line, 2, line.length);\n\t\t\t\t\t\t\tif (tempo.type === 'delaySet') multilineVars.tempo = tempo.tempo;\n\t\t\t\t\t\t\telse if (tempo.type === 'immediate') tune.metaText.tempo = tempo.tempo;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'T':\n\t\t\t\t\t\t\tthis.setTitle(line.substring(2));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'U':\n\t\t\t\t\t\t\tthis.addUserDefinition(line, 2, line.length);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  'V':\n\t\t\t\t\t\t\tparseKeyVoice.parseVoice(line, 2, line.length);\n\t\t\t\t\t\t\tif (!multilineVars.is_in_header)\n\t\t\t\t\t\t\t\treturn {newline: true};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase  's':\n\t\t\t\t\t\t\treturn {symbols: true};\n\t\t\t\t\t\tcase  'w':\n\t\t\t\t\t\t\treturn {words: true};\n\t\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'E':\n\t\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t\twarn(\"Ignored header\", line, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// It wasn't a recognized header value, so parse it as music.\n\t\t\t\t\t\t\tif (nextLine.length)\n\t\t\t\t\t\t\t\tnextLine = \"\\x12\" + nextLine;\n\t\t\t\t\t\t\t//parseRegularMusicLine(line+nextLine);\n\t\t\t\t\t\t\t//nextLine = \"\";\n\t\t\t\t\t\t\treturn {regular: true, str: line+nextLine};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (nextLine.length > 0)\n\t\t\t\t\treturn {recurse: true, str: nextLine};\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\t// If we got this far, we have a regular line of mulsic\n\t\treturn {regular: true, str: line};\n\t};\n};\n\nmodule.exports = ParseHeader;\n"]},"metadata":{},"sourceType":"script"}