{"ast":null,"code":"/*global window */\nvar parseCommon = require('./abc_common');\n\nvar parseDirective = require('./abc_parse_directive');\n\nvar transpose = require('./abc_transpose');\n\nvar parseKeyVoice = {};\n\n(function () {\n  var tokenizer;\n  var warn;\n  var multilineVars;\n  var tune;\n\n  parseKeyVoice.initialize = function (tokenizer_, warn_, multilineVars_, tune_) {\n    tokenizer = tokenizer_;\n    warn = warn_;\n    multilineVars = multilineVars_;\n    tune = tune_;\n  };\n\n  parseKeyVoice.standardKey = function (keyName, root, acc, localTranspose) {\n    var key1sharp = {\n      acc: 'sharp',\n      note: 'f'\n    };\n    var key2sharp = {\n      acc: 'sharp',\n      note: 'c'\n    };\n    var key3sharp = {\n      acc: 'sharp',\n      note: 'g'\n    };\n    var key4sharp = {\n      acc: 'sharp',\n      note: 'd'\n    };\n    var key5sharp = {\n      acc: 'sharp',\n      note: 'A'\n    };\n    var key6sharp = {\n      acc: 'sharp',\n      note: 'e'\n    };\n    var key7sharp = {\n      acc: 'sharp',\n      note: 'B'\n    };\n    var key1flat = {\n      acc: 'flat',\n      note: 'B'\n    };\n    var key2flat = {\n      acc: 'flat',\n      note: 'e'\n    };\n    var key3flat = {\n      acc: 'flat',\n      note: 'A'\n    };\n    var key4flat = {\n      acc: 'flat',\n      note: 'd'\n    };\n    var key5flat = {\n      acc: 'flat',\n      note: 'G'\n    };\n    var key6flat = {\n      acc: 'flat',\n      note: 'c'\n    };\n    var key7flat = {\n      acc: 'flat',\n      note: 'F'\n    };\n    var keys = {\n      'C#': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'A#m': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'G#Mix': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'D#Dor': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'E#Phr': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'F#Lyd': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'B#Loc': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp],\n      'F#': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'D#m': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'C#Mix': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'G#Dor': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'A#Phr': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'BLyd': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'E#Loc': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp],\n      'B': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'G#m': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'F#Mix': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'C#Dor': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'D#Phr': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'ELyd': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'A#Loc': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp],\n      'E': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'C#m': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'BMix': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'F#Dor': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'G#Phr': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'ALyd': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'D#Loc': [key1sharp, key2sharp, key3sharp, key4sharp],\n      'A': [key1sharp, key2sharp, key3sharp],\n      'F#m': [key1sharp, key2sharp, key3sharp],\n      'EMix': [key1sharp, key2sharp, key3sharp],\n      'BDor': [key1sharp, key2sharp, key3sharp],\n      'C#Phr': [key1sharp, key2sharp, key3sharp],\n      'DLyd': [key1sharp, key2sharp, key3sharp],\n      'G#Loc': [key1sharp, key2sharp, key3sharp],\n      'D': [key1sharp, key2sharp],\n      'Bm': [key1sharp, key2sharp],\n      'AMix': [key1sharp, key2sharp],\n      'EDor': [key1sharp, key2sharp],\n      'F#Phr': [key1sharp, key2sharp],\n      'GLyd': [key1sharp, key2sharp],\n      'C#Loc': [key1sharp, key2sharp],\n      'G': [key1sharp],\n      'Em': [key1sharp],\n      'DMix': [key1sharp],\n      'ADor': [key1sharp],\n      'BPhr': [key1sharp],\n      'CLyd': [key1sharp],\n      'F#Loc': [key1sharp],\n      'C': [],\n      'Am': [],\n      'GMix': [],\n      'DDor': [],\n      'EPhr': [],\n      'FLyd': [],\n      'BLoc': [],\n      'F': [key1flat],\n      'Dm': [key1flat],\n      'CMix': [key1flat],\n      'GDor': [key1flat],\n      'APhr': [key1flat],\n      'BbLyd': [key1flat],\n      'ELoc': [key1flat],\n      'Bb': [key1flat, key2flat],\n      'Gm': [key1flat, key2flat],\n      'FMix': [key1flat, key2flat],\n      'CDor': [key1flat, key2flat],\n      'DPhr': [key1flat, key2flat],\n      'EbLyd': [key1flat, key2flat],\n      'ALoc': [key1flat, key2flat],\n      'Eb': [key1flat, key2flat, key3flat],\n      'Cm': [key1flat, key2flat, key3flat],\n      'BbMix': [key1flat, key2flat, key3flat],\n      'FDor': [key1flat, key2flat, key3flat],\n      'GPhr': [key1flat, key2flat, key3flat],\n      'AbLyd': [key1flat, key2flat, key3flat],\n      'DLoc': [key1flat, key2flat, key3flat],\n      'Ab': [key1flat, key2flat, key3flat, key4flat],\n      'Fm': [key1flat, key2flat, key3flat, key4flat],\n      'EbMix': [key1flat, key2flat, key3flat, key4flat],\n      'BbDor': [key1flat, key2flat, key3flat, key4flat],\n      'CPhr': [key1flat, key2flat, key3flat, key4flat],\n      'DbLyd': [key1flat, key2flat, key3flat, key4flat],\n      'GLoc': [key1flat, key2flat, key3flat, key4flat],\n      'Db': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'Bbm': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'AbMix': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'EbDor': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'FPhr': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'GbLyd': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'CLoc': [key1flat, key2flat, key3flat, key4flat, key5flat],\n      'Gb': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'Ebm': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'DbMix': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'AbDor': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'BbPhr': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'CbLyd': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'FLoc': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat],\n      'Cb': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'Abm': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'GbMix': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'DbDor': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'EbPhr': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'FbLyd': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      'BbLoc': [key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat],\n      // The following are not in the 2.0 spec, but seem normal enough.\n      // TODO-PER: These SOUND the same as what's written, but they aren't right\n      'A#': [key1flat, key2flat],\n      'B#': [],\n      'D#': [key1flat, key2flat, key3flat],\n      'E#': [key1flat],\n      'G#': [key1flat, key2flat, key3flat, key4flat],\n      'Gbm': [key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp]\n    };\n    return transpose.keySignature(multilineVars, keys, keyName, root, acc, localTranspose);\n  };\n\n  var clefLines = {\n    'treble': {\n      clef: 'treble',\n      pitch: 4,\n      mid: 0\n    },\n    'treble+8': {\n      clef: 'treble+8',\n      pitch: 4,\n      mid: 0\n    },\n    'treble-8': {\n      clef: 'treble-8',\n      pitch: 4,\n      mid: 0\n    },\n    'treble1': {\n      clef: 'treble',\n      pitch: 2,\n      mid: 2\n    },\n    'treble2': {\n      clef: 'treble',\n      pitch: 4,\n      mid: 0\n    },\n    'treble3': {\n      clef: 'treble',\n      pitch: 6,\n      mid: -2\n    },\n    'treble4': {\n      clef: 'treble',\n      pitch: 8,\n      mid: -4\n    },\n    'treble5': {\n      clef: 'treble',\n      pitch: 10,\n      mid: -6\n    },\n    'perc': {\n      clef: 'perc',\n      pitch: 6,\n      mid: 0\n    },\n    'none': {\n      clef: 'none',\n      mid: 0\n    },\n    'bass': {\n      clef: 'bass',\n      pitch: 8,\n      mid: -12\n    },\n    'bass+8': {\n      clef: 'bass+8',\n      pitch: 8,\n      mid: -12\n    },\n    'bass-8': {\n      clef: 'bass-8',\n      pitch: 8,\n      mid: -12\n    },\n    'bass+16': {\n      clef: 'bass',\n      pitch: 8,\n      mid: -12\n    },\n    'bass-16': {\n      clef: 'bass',\n      pitch: 8,\n      mid: -12\n    },\n    'bass1': {\n      clef: 'bass',\n      pitch: 2,\n      mid: -6\n    },\n    'bass2': {\n      clef: 'bass',\n      pitch: 4,\n      mid: -8\n    },\n    'bass3': {\n      clef: 'bass',\n      pitch: 6,\n      mid: -10\n    },\n    'bass4': {\n      clef: 'bass',\n      pitch: 8,\n      mid: -12\n    },\n    'bass5': {\n      clef: 'bass',\n      pitch: 10,\n      mid: -14\n    },\n    'tenor': {\n      clef: 'alto',\n      pitch: 8,\n      mid: -8\n    },\n    'tenor1': {\n      clef: 'alto',\n      pitch: 2,\n      mid: -2\n    },\n    'tenor2': {\n      clef: 'alto',\n      pitch: 4,\n      mid: -4\n    },\n    'tenor3': {\n      clef: 'alto',\n      pitch: 6,\n      mid: -6\n    },\n    'tenor4': {\n      clef: 'alto',\n      pitch: 8,\n      mid: -8\n    },\n    'tenor5': {\n      clef: 'alto',\n      pitch: 10,\n      mid: -10\n    },\n    'alto': {\n      clef: 'alto',\n      pitch: 6,\n      mid: -6\n    },\n    'alto1': {\n      clef: 'alto',\n      pitch: 2,\n      mid: -2\n    },\n    'alto2': {\n      clef: 'alto',\n      pitch: 4,\n      mid: -4\n    },\n    'alto3': {\n      clef: 'alto',\n      pitch: 6,\n      mid: -6\n    },\n    'alto4': {\n      clef: 'alto',\n      pitch: 8,\n      mid: -8\n    },\n    'alto5': {\n      clef: 'alto',\n      pitch: 10,\n      mid: -10\n    },\n    'alto+8': {\n      clef: 'alto+8',\n      pitch: 6,\n      mid: -6\n    },\n    'alto-8': {\n      clef: 'alto-8',\n      pitch: 6,\n      mid: -6\n    }\n  };\n\n  var calcMiddle = function (clef, oct) {\n    var value = clefLines[clef];\n    var mid = value ? value.mid : 0;\n    return mid + oct;\n  };\n\n  parseKeyVoice.fixClef = function (clef) {\n    var value = clefLines[clef.type];\n\n    if (value) {\n      clef.clefPos = value.pitch;\n      clef.type = value.clef;\n    }\n  };\n\n  parseKeyVoice.deepCopyKey = function (key) {\n    var ret = {\n      accidentals: [],\n      root: key.root,\n      acc: key.acc,\n      mode: key.mode\n    };\n    parseCommon.each(key.accidentals, function (k) {\n      ret.accidentals.push(parseCommon.clone(k));\n    });\n    return ret;\n  };\n\n  var pitches = {\n    A: 5,\n    B: 6,\n    C: 0,\n    D: 1,\n    E: 2,\n    F: 3,\n    G: 4,\n    a: 12,\n    b: 13,\n    c: 7,\n    d: 8,\n    e: 9,\n    f: 10,\n    g: 11\n  };\n\n  parseKeyVoice.addPosToKey = function (clef, key) {\n    // Shift the key signature from the treble positions to whatever position is needed for the clef.\n    // This may put the key signature unnaturally high or low, so if it does, then shift it.\n    var mid = clef.verticalPos;\n    parseCommon.each(key.accidentals, function (acc) {\n      var pitch = pitches[acc.note];\n      pitch = pitch - mid;\n      acc.verticalPos = pitch;\n    });\n    if (key.impliedNaturals) parseCommon.each(key.impliedNaturals, function (acc) {\n      var pitch = pitches[acc.note];\n      pitch = pitch - mid;\n      acc.verticalPos = pitch;\n    });\n\n    if (mid < -10) {\n      parseCommon.each(key.accidentals, function (acc) {\n        acc.verticalPos -= 7;\n        if (acc.verticalPos >= 11 || acc.verticalPos === 10 && acc.acc === 'flat') acc.verticalPos -= 7;\n        if (acc.note === 'A' && acc.acc === 'sharp') acc.verticalPos -= 7;\n        if ((acc.note === 'G' || acc.note === 'F') && acc.acc === 'flat') acc.verticalPos -= 7;\n      });\n      if (key.impliedNaturals) parseCommon.each(key.impliedNaturals, function (acc) {\n        acc.verticalPos -= 7;\n        if (acc.verticalPos >= 11 || acc.verticalPos === 10 && acc.acc === 'flat') acc.verticalPos -= 7;\n        if (acc.note === 'A' && acc.acc === 'sharp') acc.verticalPos -= 7;\n        if ((acc.note === 'G' || acc.note === 'F') && acc.acc === 'flat') acc.verticalPos -= 7;\n      });\n    } else if (mid < -4) {\n      parseCommon.each(key.accidentals, function (acc) {\n        acc.verticalPos -= 7;\n        if (mid === -8 && (acc.note === 'f' || acc.note === 'g') && acc.acc === 'sharp') acc.verticalPos -= 7;\n      });\n      if (key.impliedNaturals) parseCommon.each(key.impliedNaturals, function (acc) {\n        acc.verticalPos -= 7;\n        if (mid === -8 && (acc.note === 'f' || acc.note === 'g') && acc.acc === 'sharp') acc.verticalPos -= 7;\n      });\n    } else if (mid >= 7) {\n      parseCommon.each(key.accidentals, function (acc) {\n        acc.verticalPos += 7;\n      });\n      if (key.impliedNaturals) parseCommon.each(key.impliedNaturals, function (acc) {\n        acc.verticalPos += 7;\n      });\n    }\n  };\n\n  parseKeyVoice.fixKey = function (clef, key) {\n    var fixedKey = parseCommon.clone(key);\n    parseKeyVoice.addPosToKey(clef, fixedKey);\n    return fixedKey;\n  };\n\n  var parseMiddle = function (str) {\n    var i = 0;\n    var p = str.charAt(i++);\n    if (p === '^' || p === '_') p = str.charAt(i++);\n    var mid = pitches[p];\n    if (mid === undefined) mid = 6; // If a legal middle note wasn't received, just ignore it.\n\n    for (; i < str.length; i++) {\n      if (str.charAt(i) === ',') mid -= 7;else if (str.charAt(i) === \"'\") mid += 7;else break;\n    }\n\n    return {\n      mid: mid - 6,\n      str: str.substring(i)\n    }; // We get the note in the middle of the staff. We want the note that appears as the first ledger line below the staff.\n  };\n\n  var normalizeAccidentals = function (accs) {\n    for (var i = 0; i < accs.length; i++) {\n      if (accs[i].note === 'b') accs[i].note = 'B';else if (accs[i].note === 'a') accs[i].note = 'A';else if (accs[i].note === 'F') accs[i].note = 'f';else if (accs[i].note === 'E') accs[i].note = 'e';else if (accs[i].note === 'D') accs[i].note = 'd';else if (accs[i].note === 'C') accs[i].note = 'c';else if (accs[i].note === 'G' && accs[i].acc === 'sharp') accs[i].note = 'g';else if (accs[i].note === 'g' && accs[i].acc === 'flat') accs[i].note = 'G';\n    }\n  };\n\n  parseKeyVoice.parseKey = function (str) // (and clef)\n  {\n    // returns:\n    //\t\t{ foundClef: true, foundKey: true }\n    // Side effects:\n    //\t\tcalls warn() when there is a syntax error\n    //\t\tsets these members of multilineVars:\n    //\t\t\tclef\n    //\t\t\tkey\n    //\t\t\tstyle\n    //\n    // The format is:\n    // K: [⟨key⟩] [⟨modifiers⟩*]\n    // modifiers are any of the following in any order:\n    //  [⟨clef⟩] [middle=⟨pitch⟩] [transpose=[-]⟨number⟩] [stafflines=⟨number⟩] [staffscale=⟨number⟩][style=⟨style⟩]\n    // key is none|HP|Hp|⟨specified_key⟩\n    // clef is [clef=] [⟨clef type⟩] [⟨line number⟩] [+8|-8]\n    // specified_key is ⟨pitch⟩[#|b][mode(first three chars are significant)][accidentals*]\n    if (str.length === 0) {\n      // an empty K: field is the same as K:none\n      str = 'none';\n    }\n\n    var tokens = tokenizer.tokenize(str, 0, str.length);\n    var ret = {}; // first the key\n\n    switch (tokens[0].token) {\n      case 'HP':\n        parseDirective.addDirective(\"bagpipes\");\n        multilineVars.key = {\n          root: \"HP\",\n          accidentals: [],\n          acc: \"\",\n          mode: \"\"\n        };\n        ret.foundKey = true;\n        tokens.shift();\n        break;\n\n      case 'Hp':\n        parseDirective.addDirective(\"bagpipes\");\n        multilineVars.key = {\n          root: \"Hp\",\n          accidentals: [{\n            acc: 'natural',\n            note: 'g'\n          }, {\n            acc: 'sharp',\n            note: 'f'\n          }, {\n            acc: 'sharp',\n            note: 'c'\n          }],\n          acc: \"\",\n          mode: \"\"\n        };\n        ret.foundKey = true;\n        tokens.shift();\n        break;\n\n      case 'none':\n        // we got the none key - that's the same as C to us\n        multilineVars.key = {\n          root: \"none\",\n          accidentals: [],\n          acc: \"\",\n          mode: \"\"\n        };\n        ret.foundKey = true;\n        tokens.shift();\n        break;\n\n      default:\n        var retPitch = tokenizer.getKeyPitch(tokens[0].token);\n\n        if (retPitch.len > 0) {\n          ret.foundKey = true;\n          var acc = \"\";\n          var mode = \"\"; // The accidental and mode might be attached to the pitch, so we might want to just remove the first character.\n\n          if (tokens[0].token.length > 1) tokens[0].token = tokens[0].token.substring(1);else tokens.shift();\n          var key = retPitch.token; // We got a pitch to start with, so we might also have an accidental and a mode\n\n          if (tokens.length > 0) {\n            var retAcc = tokenizer.getSharpFlat(tokens[0].token);\n\n            if (retAcc.len > 0) {\n              if (tokens[0].token.length > 1) tokens[0].token = tokens[0].token.substring(1);else tokens.shift();\n              key += retAcc.token;\n              acc = retAcc.token;\n            }\n\n            if (tokens.length > 0) {\n              var retMode = tokenizer.getMode(tokens[0].token);\n\n              if (retMode.len > 0) {\n                tokens.shift();\n                key += retMode.token;\n                mode = retMode.token;\n              }\n            } // Be sure that the key specified is in the list: not all keys are physically possible, like Cbmin.\n\n\n            if (parseKeyVoice.standardKey(key, retPitch.token, acc, 0) === undefined) {\n              warn(\"Unsupported key signature: \" + key, str, 0);\n              return ret;\n            }\n          } // We need to do a deep copy because we are going to modify it\n\n\n          var oldKey = parseKeyVoice.deepCopyKey(multilineVars.key); //TODO-PER: HACK! To get the local transpose to work, the transposition is done for each line. This caused the global transposition variable to be factored in twice, so, instead of rewriting that right now, I'm just subtracting one of them here.\n\n          var keyCompensate = multilineVars.globalTranspose ? -multilineVars.globalTranspose : 0;\n          multilineVars.key = parseKeyVoice.deepCopyKey(parseKeyVoice.standardKey(key, retPitch.token, acc, keyCompensate));\n          multilineVars.key.mode = mode;\n\n          if (oldKey) {\n            // Add natural in all places that the old key had an accidental.\n            var kk;\n\n            for (var k = 0; k < multilineVars.key.accidentals.length; k++) {\n              for (kk = 0; kk < oldKey.accidentals.length; kk++) {\n                if (oldKey.accidentals[kk].note && multilineVars.key.accidentals[k].note.toLowerCase() === oldKey.accidentals[kk].note.toLowerCase()) oldKey.accidentals[kk].note = null;\n              }\n            }\n\n            for (kk = 0; kk < oldKey.accidentals.length; kk++) {\n              if (oldKey.accidentals[kk].note) {\n                if (!multilineVars.key.impliedNaturals) multilineVars.key.impliedNaturals = [];\n                multilineVars.key.impliedNaturals.push({\n                  acc: 'natural',\n                  note: oldKey.accidentals[kk].note\n                });\n              }\n            }\n          }\n        }\n\n        break;\n    } // There are two special cases of deprecated syntax. Ignore them if they occur\n\n\n    if (tokens.length === 0) return ret;\n    if (tokens[0].token === 'exp') tokens.shift();\n    if (tokens.length === 0) return ret;\n    if (tokens[0].token === 'oct') tokens.shift(); // now see if there are extra accidentals\n\n    if (tokens.length === 0) return ret;\n    var accs = tokenizer.getKeyAccidentals2(tokens);\n    if (accs.warn) warn(accs.warn, str, 0); // If we have extra accidentals, first replace ones that are of the same pitch before adding them to the end.\n\n    if (accs.accs) {\n      if (!ret.foundKey) {\n        // if there are only extra accidentals, make sure this is set.\n        ret.foundKey = true;\n        multilineVars.key = {\n          root: \"none\",\n          acc: \"\",\n          mode: \"\",\n          accidentals: []\n        };\n      }\n\n      normalizeAccidentals(accs.accs);\n\n      for (var i = 0; i < accs.accs.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < multilineVars.key.accidentals.length && !found; j++) {\n          if (multilineVars.key.accidentals[j].note === accs.accs[i].note) {\n            found = true;\n\n            if (multilineVars.key.accidentals[j].acc !== accs.accs[i].acc) {\n              // If the accidental is different, then replace it. If it is the same, then the declaration was redundant, so just ignore it.\n              multilineVars.key.accidentals[j].acc = accs.accs[i].acc;\n              if (!multilineVars.key.explicitAccidentals) multilineVars.key.explicitAccidentals = [];\n              multilineVars.key.explicitAccidentals.push(accs.accs[i]);\n            }\n          }\n        }\n\n        if (!found) {\n          if (!multilineVars.key.explicitAccidentals) multilineVars.key.explicitAccidentals = [];\n          multilineVars.key.explicitAccidentals.push(accs.accs[i]);\n          multilineVars.key.accidentals.push(accs.accs[i]);\n\n          if (multilineVars.key.impliedNaturals) {\n            for (var kkk = 0; kkk < multilineVars.key.impliedNaturals.length; kkk++) {\n              if (multilineVars.key.impliedNaturals[kkk].note === accs.accs[i].note) multilineVars.key.impliedNaturals.splice(kkk, 1);\n            }\n          }\n        }\n      }\n    } // Now see if any optional parameters are present. They have the form \"key=value\", except that \"clef=\" is optional\n\n\n    var token;\n\n    while (tokens.length > 0) {\n      switch (tokens[0].token) {\n        case \"m\":\n        case \"middle\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after middle\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after middle\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after middle=\", str, 0);\n            return ret;\n          }\n\n          var pitch = tokenizer.getPitchFromTokens(tokens);\n          if (pitch.warn) warn(pitch.warn, str, 0);\n          if (pitch.position) multilineVars.clef.verticalPos = pitch.position - 6; // we get the position from the middle line, but want to offset it to the first ledger line.\n\n          break;\n\n        case \"transpose\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after transpose\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after transpose\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after transpose=\", str, 0);\n            return ret;\n          }\n\n          if (tokens[0].type !== 'number') {\n            warn(\"Expected number after transpose\", str, tokens[0].start);\n            break;\n          }\n\n          multilineVars.clef.transpose = tokens[0].intt;\n          tokens.shift();\n          break;\n\n        case \"stafflines\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after stafflines\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after stafflines\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after stafflines=\", str, 0);\n            return ret;\n          }\n\n          if (tokens[0].type !== 'number') {\n            warn(\"Expected number after stafflines\", str, tokens[0].start);\n            break;\n          }\n\n          multilineVars.clef.stafflines = tokens[0].intt;\n          tokens.shift();\n          break;\n\n        case \"staffscale\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after staffscale\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after staffscale\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after staffscale=\", str, 0);\n            return ret;\n          }\n\n          if (tokens[0].type !== 'number') {\n            warn(\"Expected number after staffscale\", str, tokens[0].start);\n            break;\n          }\n\n          multilineVars.clef.staffscale = tokens[0].floatt;\n          tokens.shift();\n          break;\n\n        case \"style\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after style\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after style\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after style=\", str, 0);\n            return ret;\n          }\n\n          switch (tokens[0].token) {\n            case \"normal\":\n            case \"harmonic\":\n            case \"rhythm\":\n            case \"x\":\n              multilineVars.style = tokens[0].token;\n              tokens.shift();\n              break;\n\n            default:\n              warn(\"error parsing style element: \" + tokens[0].token, str, tokens[0].start);\n              break;\n          }\n\n          break;\n\n        case \"clef\":\n          tokens.shift();\n\n          if (tokens.length === 0) {\n            warn(\"Expected = after clef\", str, 0);\n            return ret;\n          }\n\n          token = tokens.shift();\n\n          if (token.token !== \"=\") {\n            warn(\"Expected = after clef\", str, token.start);\n            break;\n          }\n\n          if (tokens.length === 0) {\n            warn(\"Expected parameter after clef=\", str, 0);\n            return ret;\n          }\n\n        //break; yes, we want to fall through. That allows \"clef=\" to be optional.\n\n        case \"treble\":\n        case \"bass\":\n        case \"alto\":\n        case \"tenor\":\n        case \"perc\":\n          // clef is [clef=] [⟨clef type⟩] [⟨line number⟩] [+8|-8]\n          var clef = tokens.shift();\n\n          switch (clef.token) {\n            case 'treble':\n            case 'tenor':\n            case 'alto':\n            case 'bass':\n            case 'perc':\n            case 'none':\n              break;\n\n            case 'C':\n              clef.token = 'alto';\n              break;\n\n            case 'F':\n              clef.token = 'bass';\n              break;\n\n            case 'G':\n              clef.token = 'treble';\n              break;\n\n            case 'c':\n              clef.token = 'alto';\n              break;\n\n            case 'f':\n              clef.token = 'bass';\n              break;\n\n            case 'g':\n              clef.token = 'treble';\n              break;\n\n            default:\n              warn(\"Expected clef name. Found \" + clef.token, str, clef.start);\n              break;\n          }\n\n          if (tokens.length > 0 && tokens[0].type === 'number') {\n            clef.token += tokens[0].token;\n            tokens.shift();\n          }\n\n          if (tokens.length > 1 && (tokens[0].token === '-' || tokens[0].token === '+') && tokens[1].token === '8') {\n            clef.token += tokens[0].token + tokens[1].token;\n            tokens.shift();\n            tokens.shift();\n          }\n\n          multilineVars.clef = {\n            type: clef.token,\n            verticalPos: calcMiddle(clef.token, 0)\n          };\n          if (multilineVars.currentVoice && multilineVars.currentVoice.transpose !== undefined) multilineVars.clef.transpose = multilineVars.currentVoice.transpose;\n          ret.foundClef = true;\n          break;\n\n        default:\n          warn(\"Unknown parameter: \" + tokens[0].token, str, tokens[0].start);\n          tokens.shift();\n      }\n    }\n\n    return ret;\n  };\n\n  var setCurrentVoice = function (id) {\n    multilineVars.currentVoice = multilineVars.voices[id];\n    tune.setCurrentVoice(multilineVars.currentVoice.staffNum, multilineVars.currentVoice.index);\n  };\n\n  parseKeyVoice.parseVoice = function (line, i, e) {\n    //First truncate the string to the first non-space character after V: through either the\n    //end of the line or a % character. Then remove trailing spaces, too.\n    var ret = tokenizer.getMeat(line, i, e);\n    var start = ret.start;\n    var end = ret.end; //The first thing on the line is the ID. It can be any non-space string and terminates at the\n    //first space.\n\n    var id = tokenizer.getToken(line, start, end);\n\n    if (id.length === 0) {\n      warn(\"Expected a voice id\", line, start);\n      return;\n    }\n\n    var isNew = false;\n\n    if (multilineVars.voices[id] === undefined) {\n      multilineVars.voices[id] = {};\n      isNew = true;\n      if (multilineVars.score_is_present) warn(\"Can't have an unknown V: id when the %score directive is present\", line, start);\n    }\n\n    start += id.length;\n    start += tokenizer.eatWhiteSpace(line, start);\n    var staffInfo = {\n      startStaff: isNew\n    };\n\n    var addNextTokenToStaffInfo = function (name) {\n      var attr = tokenizer.getVoiceToken(line, start, end);\n      if (attr.warn !== undefined) warn(\"Expected value for \" + name + \" in voice: \" + attr.warn, line, start);else if (attr.token.length === 0 && line.charAt(start) !== '\"') warn(\"Expected value for \" + name + \" in voice\", line, start);else staffInfo[name] = attr.token;\n      start += attr.len;\n    };\n\n    var addNextTokenToVoiceInfo = function (id, name, type) {\n      var attr = tokenizer.getVoiceToken(line, start, end);\n      if (attr.warn !== undefined) warn(\"Expected value for \" + name + \" in voice: \" + attr.warn, line, start);else if (attr.token.length === 0 && line.charAt(start) !== '\"') warn(\"Expected value for \" + name + \" in voice\", line, start);else {\n        if (type === 'number') attr.token = parseFloat(attr.token);\n        multilineVars.voices[id][name] = attr.token;\n      }\n      start += attr.len;\n    };\n\n    var addNextNoteTokenToVoiceInfo = function (id, name) {\n      var noteToTransposition = {\n        \"_B\": 2,\n        \"_E\": 9,\n        \"_b\": -10,\n        \"_e\": -3\n      };\n      var attr = tokenizer.getVoiceToken(line, start, end);\n      if (attr.warn !== undefined) warn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice: \" + attr.warn, line, start);else if (attr.token.length === 0 && line.charAt(start) !== '\"') warn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice\", line, start);else {\n        var t = noteToTransposition[attr.token];\n        if (!t) warn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice\", line, start);else multilineVars.voices[id][name] = t;\n      }\n      start += attr.len;\n    }; //Then the following items can occur in any order:\n\n\n    while (start < end) {\n      var token = tokenizer.getVoiceToken(line, start, end);\n      start += token.len;\n\n      if (token.warn) {\n        warn(\"Error parsing voice: \" + token.warn, line, start);\n      } else {\n        var attr = null;\n\n        switch (token.token) {\n          case 'clef':\n          case 'cl':\n            addNextTokenToStaffInfo('clef'); // TODO-PER: check for a legal clef; do octavizing\n\n            var oct = 0; //\t\t\t\t\t\t\tfor (var ii = 0; ii < staffInfo.clef.length; ii++) {\n            //\t\t\t\t\t\t\t\tif (staffInfo.clef[ii] === ',') oct -= 7;\n            //\t\t\t\t\t\t\t\telse if (staffInfo.clef[ii] === \"'\") oct += 7;\n            //\t\t\t\t\t\t\t}\n\n            if (staffInfo.clef !== undefined) {\n              staffInfo.clef = staffInfo.clef.replace(/[',]/g, \"\"); //'//comment for emacs formatting of regexp\n\n              if (staffInfo.clef.indexOf('+16') !== -1) {\n                oct += 14;\n                staffInfo.clef = staffInfo.clef.replace('+16', '');\n              }\n\n              staffInfo.verticalPos = calcMiddle(staffInfo.clef, oct);\n            }\n\n            break;\n\n          case 'treble':\n          case 'bass':\n          case 'tenor':\n          case 'alto':\n          case 'perc':\n          case 'none':\n          case 'treble\\'':\n          case 'bass\\'':\n          case 'tenor\\'':\n          case 'alto\\'':\n          case 'none\\'':\n          case 'treble\\'\\'':\n          case 'bass\\'\\'':\n          case 'tenor\\'\\'':\n          case 'alto\\'\\'':\n          case 'none\\'\\'':\n          case 'treble,':\n          case 'bass,':\n          case 'tenor,':\n          case 'alto,':\n          case 'none,':\n          case 'treble,,':\n          case 'bass,,':\n          case 'tenor,,':\n          case 'alto,,':\n          case 'none,,':\n            // TODO-PER: handle the octave indicators on the clef by changing the middle property\n            var oct2 = 0; //\t\t\t\t\t\t\tfor (var iii = 0; iii < token.token.length; iii++) {\n            //\t\t\t\t\t\t\t\tif (token.token[iii] === ',') oct2 -= 7;\n            //\t\t\t\t\t\t\t\telse if (token.token[iii] === \"'\") oct2 += 7;\n            //\t\t\t\t\t\t\t}\n\n            staffInfo.clef = token.token.replace(/[',]/g, \"\"); //'//comment for emacs formatting of regexp\n\n            staffInfo.verticalPos = calcMiddle(staffInfo.clef, oct2);\n            multilineVars.voices[id].clef = token.token;\n            break;\n\n          case 'staves':\n          case 'stave':\n          case 'stv':\n            addNextTokenToStaffInfo('staves');\n            break;\n\n          case 'brace':\n          case 'brc':\n            addNextTokenToStaffInfo('brace');\n            break;\n\n          case 'bracket':\n          case 'brk':\n            addNextTokenToStaffInfo('bracket');\n            break;\n\n          case 'name':\n          case 'nm':\n            addNextTokenToStaffInfo('name');\n            break;\n\n          case 'subname':\n          case 'sname':\n          case 'snm':\n            addNextTokenToStaffInfo('subname');\n            break;\n\n          case 'merge':\n            staffInfo.startStaff = false;\n            break;\n\n          case 'stem':\n          case 'stems':\n            attr = tokenizer.getVoiceToken(line, start, end);\n            if (attr.warn !== undefined) warn(\"Expected value for stems in voice: \" + attr.warn, line, start);else if (attr.token === 'up' || attr.token === 'down') multilineVars.voices[id].stem = attr.token;else warn(\"Expected up or down for voice stem\", line, start);\n            start += attr.len;\n            break;\n\n          case 'up':\n          case 'down':\n            multilineVars.voices[id].stem = token.token;\n            break;\n\n          case 'middle':\n          case 'm':\n            addNextTokenToStaffInfo('verticalPos');\n            staffInfo.verticalPos = parseMiddle(staffInfo.verticalPos).mid;\n            break;\n\n          case 'gchords':\n          case 'gch':\n            multilineVars.voices[id].suppressChords = true; // gchords can stand on its own, or it could be gchords=0.\n\n            attr = tokenizer.getVoiceToken(line, start, end);\n            if (attr.token === \"0\") start = start + attr.len;\n            break;\n\n          case 'space':\n          case 'spc':\n            addNextTokenToStaffInfo('spacing');\n            break;\n\n          case 'scale':\n            addNextTokenToVoiceInfo(id, 'scale', 'number');\n            break;\n\n          case 'score':\n            addNextNoteTokenToVoiceInfo(id, 'scoreTranspose');\n            break;\n\n          case 'transpose':\n            addNextTokenToVoiceInfo(id, 'transpose', 'number');\n            break;\n\n          case 'stafflines':\n            addNextTokenToVoiceInfo(id, 'stafflines', 'number');\n            break;\n\n          case 'staffscale':\n            // TODO-PER: This is passed to the engraver, but the engraver ignores it.\n            addNextTokenToVoiceInfo(id, 'staffscale', 'number');\n            break;\n\n          case 'octave':\n            // TODO-PER: This is accepted, but not implemented, yet.\n            addNextTokenToVoiceInfo(id, 'octave', 'number');\n            break;\n\n          case 'volume':\n            // TODO-PER: This is accepted, but not implemented, yet.\n            addNextTokenToVoiceInfo(id, 'volume', 'number');\n            break;\n\n          case \"style\":\n            attr = tokenizer.getVoiceToken(line, start, end);\n            if (attr.warn !== undefined) warn(\"Expected value for style in voice: \" + attr.warn, line, start);else if (attr.token === 'normal' || attr.token === 'harmonic' || attr.token === 'rhythm' || attr.token === 'x') multilineVars.voices[id].style = attr.token;else warn(\"Expected one of [normal, harmonic, rhythm, x] for voice style\", line, start);\n            start += attr.len;\n            break;\n          // default:\n          // Use this to find V: usages that aren't handled.\n          // \tconsole.log(\"parse voice\", token, tune.metaText.title);\n        }\n      }\n\n      start += tokenizer.eatWhiteSpace(line, start);\n    } // now we've filled up staffInfo, figure out what to do with this voice\n    // TODO-PER: It is unclear from the standard and the examples what to do with brace, bracket, and staves, so they are ignored for now.\n\n\n    if (staffInfo.startStaff || multilineVars.staves.length === 0) {\n      multilineVars.staves.push({\n        index: multilineVars.staves.length,\n        meter: multilineVars.origMeter\n      });\n      if (!multilineVars.score_is_present) multilineVars.staves[multilineVars.staves.length - 1].numVoices = 0;\n    }\n\n    if (multilineVars.voices[id].staffNum === undefined) {\n      // store where to write this for quick access later.\n      multilineVars.voices[id].staffNum = multilineVars.staves.length - 1;\n      var vi = 0;\n\n      for (var v in multilineVars.voices) {\n        if (multilineVars.voices.hasOwnProperty(v)) {\n          if (multilineVars.voices[v].staffNum === multilineVars.voices[id].staffNum) vi++;\n        }\n      }\n\n      multilineVars.voices[id].index = vi - 1;\n    }\n\n    var s = multilineVars.staves[multilineVars.voices[id].staffNum];\n    if (!multilineVars.score_is_present) s.numVoices++;\n    if (staffInfo.clef) s.clef = {\n      type: staffInfo.clef,\n      verticalPos: staffInfo.verticalPos\n    };\n    if (staffInfo.spacing) s.spacing_below_offset = staffInfo.spacing;\n    if (staffInfo.verticalPos) s.verticalPos = staffInfo.verticalPos;\n\n    if (staffInfo.name) {\n      if (s.name) s.name.push(staffInfo.name);else s.name = [staffInfo.name];\n    }\n\n    if (staffInfo.subname) {\n      if (s.subname) s.subname.push(staffInfo.subname);else s.subname = [staffInfo.subname];\n    }\n\n    setCurrentVoice(id);\n  };\n})();\n\nmodule.exports = parseKeyVoice;","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/node_modules/abcjs/src/parse/abc_parse_key_voice.js"],"names":["parseCommon","require","parseDirective","transpose","parseKeyVoice","tokenizer","warn","multilineVars","tune","initialize","tokenizer_","warn_","multilineVars_","tune_","standardKey","keyName","root","acc","localTranspose","key1sharp","note","key2sharp","key3sharp","key4sharp","key5sharp","key6sharp","key7sharp","key1flat","key2flat","key3flat","key4flat","key5flat","key6flat","key7flat","keys","keySignature","clefLines","clef","pitch","mid","calcMiddle","oct","value","fixClef","type","clefPos","deepCopyKey","key","ret","accidentals","mode","each","k","push","clone","pitches","A","B","C","D","E","F","G","a","b","c","d","e","f","g","addPosToKey","verticalPos","impliedNaturals","fixKey","fixedKey","parseMiddle","str","i","p","charAt","undefined","length","substring","normalizeAccidentals","accs","parseKey","tokens","tokenize","token","addDirective","foundKey","shift","retPitch","getKeyPitch","len","retAcc","getSharpFlat","retMode","getMode","oldKey","keyCompensate","globalTranspose","kk","toLowerCase","getKeyAccidentals2","found","j","explicitAccidentals","kkk","splice","start","getPitchFromTokens","position","intt","stafflines","staffscale","floatt","style","currentVoice","foundClef","setCurrentVoice","id","voices","staffNum","index","parseVoice","line","getMeat","end","getToken","isNew","score_is_present","eatWhiteSpace","staffInfo","startStaff","addNextTokenToStaffInfo","name","attr","getVoiceToken","addNextTokenToVoiceInfo","parseFloat","addNextNoteTokenToVoiceInfo","noteToTransposition","t","replace","indexOf","oct2","stem","suppressChords","staves","meter","origMeter","numVoices","vi","v","hasOwnProperty","s","spacing","spacing_below_offset","subname","module","exports"],"mappings":"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","sourcesContent":["/*global window */\n\nvar parseCommon = require('./abc_common');\nvar parseDirective = require('./abc_parse_directive');\nvar transpose = require('./abc_transpose');\n\nvar parseKeyVoice = {};\n\n(function() {\n\tvar tokenizer;\n\tvar warn;\n\tvar multilineVars;\n\tvar tune;\n\tparseKeyVoice.initialize = function(tokenizer_, warn_, multilineVars_, tune_) {\n\t\ttokenizer = tokenizer_;\n\t\twarn = warn_;\n\t\tmultilineVars = multilineVars_;\n\t\ttune = tune_;\n\t};\n\n\tparseKeyVoice.standardKey = function(keyName, root, acc, localTranspose) {\n\t\tvar key1sharp = {acc: 'sharp', note: 'f'};\n\t\tvar key2sharp = {acc: 'sharp', note: 'c'};\n\t\tvar key3sharp = {acc: 'sharp', note: 'g'};\n\t\tvar key4sharp = {acc: 'sharp', note: 'd'};\n\t\tvar key5sharp = {acc: 'sharp', note: 'A'};\n\t\tvar key6sharp = {acc: 'sharp', note: 'e'};\n\t\tvar key7sharp = {acc: 'sharp', note: 'B'};\n\t\tvar key1flat = {acc: 'flat', note: 'B'};\n\t\tvar key2flat = {acc: 'flat', note: 'e'};\n\t\tvar key3flat = {acc: 'flat', note: 'A'};\n\t\tvar key4flat = {acc: 'flat', note: 'd'};\n\t\tvar key5flat = {acc: 'flat', note: 'G'};\n\t\tvar key6flat = {acc: 'flat', note: 'c'};\n\t\tvar key7flat = {acc: 'flat', note: 'F'};\n\n\t\tvar keys = {\n\t\t\t'C#': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'A#m': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'G#Mix': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'D#Dor': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'E#Phr': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'F#Lyd': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\t\t\t'B#Loc': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ],\n\n\t\t\t'F#': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'D#m': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'C#Mix': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'G#Dor': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'A#Phr': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'BLyd': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\t\t\t'E#Loc': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp ],\n\n\t\t\t'B': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'G#m': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'F#Mix': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'C#Dor': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'D#Phr': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'ELyd': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\t\t\t'A#Loc': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp ],\n\n\t\t\t'E': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'C#m': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'BMix': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'F#Dor': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'G#Phr': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'ALyd': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\t\t\t'D#Loc': [ key1sharp, key2sharp, key3sharp, key4sharp ],\n\n\t\t\t'A': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'F#m': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'EMix': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'BDor': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'C#Phr': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'DLyd': [ key1sharp, key2sharp, key3sharp ],\n\t\t\t'G#Loc': [ key1sharp, key2sharp, key3sharp ],\n\n\t\t\t'D': [ key1sharp, key2sharp ],\n\t\t\t'Bm': [ key1sharp, key2sharp ],\n\t\t\t'AMix': [ key1sharp, key2sharp ],\n\t\t\t'EDor': [ key1sharp, key2sharp ],\n\t\t\t'F#Phr': [ key1sharp, key2sharp ],\n\t\t\t'GLyd': [ key1sharp, key2sharp ],\n\t\t\t'C#Loc': [ key1sharp, key2sharp ],\n\n\t\t\t'G': [ key1sharp ],\n\t\t\t'Em': [ key1sharp ],\n\t\t\t'DMix': [ key1sharp ],\n\t\t\t'ADor': [ key1sharp ],\n\t\t\t'BPhr': [ key1sharp ],\n\t\t\t'CLyd': [ key1sharp ],\n\t\t\t'F#Loc': [ key1sharp ],\n\n\t\t\t'C': [],\n\t\t\t'Am': [],\n\t\t\t'GMix': [],\n\t\t\t'DDor': [],\n\t\t\t'EPhr': [],\n\t\t\t'FLyd': [],\n\t\t\t'BLoc': [],\n\n\t\t\t'F': [ key1flat ],\n\t\t\t'Dm': [ key1flat ],\n\t\t\t'CMix': [ key1flat ],\n\t\t\t'GDor': [ key1flat ],\n\t\t\t'APhr': [ key1flat ],\n\t\t\t'BbLyd': [ key1flat ],\n\t\t\t'ELoc': [ key1flat ],\n\n\t\t\t'Bb': [ key1flat, key2flat ],\n\t\t\t'Gm': [ key1flat, key2flat ],\n\t\t\t'FMix': [ key1flat, key2flat ],\n\t\t\t'CDor': [ key1flat, key2flat ],\n\t\t\t'DPhr': [ key1flat, key2flat ],\n\t\t\t'EbLyd': [ key1flat, key2flat ],\n\t\t\t'ALoc': [ key1flat, key2flat ],\n\n\t\t\t'Eb': [ key1flat, key2flat, key3flat ],\n\t\t\t'Cm': [ key1flat, key2flat, key3flat ],\n\t\t\t'BbMix': [ key1flat, key2flat, key3flat ],\n\t\t\t'FDor': [ key1flat, key2flat, key3flat ],\n\t\t\t'GPhr': [ key1flat, key2flat, key3flat ],\n\t\t\t'AbLyd': [ key1flat, key2flat, key3flat ],\n\t\t\t'DLoc': [ key1flat, key2flat, key3flat ],\n\n\t\t\t'Ab': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'Fm': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'EbMix': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'BbDor': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'CPhr': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'DbLyd': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'GLoc': [ key1flat, key2flat, key3flat, key4flat ],\n\n\t\t\t'Db': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'Bbm': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'AbMix': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'EbDor': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'FPhr': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'GbLyd': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\t\t\t'CLoc': [ key1flat, key2flat, key3flat, key4flat, key5flat ],\n\n\t\t\t'Gb': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'Ebm': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'DbMix': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'AbDor': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'BbPhr': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'CbLyd': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\t\t\t'FLoc': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat ],\n\n\t\t\t'Cb': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'Abm': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'GbMix': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'DbDor': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'EbPhr': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'FbLyd': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\t\t\t'BbLoc': [ key1flat, key2flat, key3flat, key4flat, key5flat, key6flat, key7flat ],\n\n\t\t\t// The following are not in the 2.0 spec, but seem normal enough.\n\t\t\t// TODO-PER: These SOUND the same as what's written, but they aren't right\n\t\t\t'A#': [ key1flat, key2flat ],\n\t\t\t'B#': [],\n\t\t\t'D#': [ key1flat, key2flat, key3flat ],\n\t\t\t'E#': [ key1flat ],\n\t\t\t'G#': [ key1flat, key2flat, key3flat, key4flat ],\n\t\t\t'Gbm': [ key1sharp, key2sharp, key3sharp, key4sharp, key5sharp, key6sharp, key7sharp ]\n\t\t};\n\n\t\treturn transpose.keySignature(multilineVars, keys, keyName, root, acc, localTranspose);\n\t};\n\n\tvar clefLines = {\n\t\t'treble': { clef: 'treble', pitch: 4, mid: 0 },\n\t\t'treble+8': { clef: 'treble+8', pitch: 4, mid: 0 },\n\t\t'treble-8': { clef: 'treble-8', pitch: 4, mid: 0 },\n\t\t'treble1': { clef: 'treble', pitch: 2, mid: 2 },\n\t\t'treble2': { clef: 'treble', pitch: 4, mid: 0 },\n\t\t'treble3': { clef: 'treble', pitch: 6, mid: -2 },\n\t\t'treble4': { clef: 'treble', pitch: 8, mid: -4 },\n\t\t'treble5': { clef: 'treble', pitch: 10, mid: -6 },\n\t\t'perc': { clef: 'perc', pitch: 6, mid: 0 },\n\t\t'none': { clef: 'none', mid: 0 },\n\t\t'bass': { clef: 'bass', pitch: 8, mid: -12 },\n\t\t'bass+8': { clef: 'bass+8', pitch: 8, mid: -12 },\n\t\t'bass-8': { clef: 'bass-8', pitch: 8, mid: -12 },\n\t\t'bass+16': { clef: 'bass', pitch: 8, mid: -12 },\n\t\t'bass-16': { clef: 'bass', pitch: 8, mid: -12 },\n\t\t'bass1': { clef: 'bass', pitch: 2, mid: -6 },\n\t\t'bass2': { clef: 'bass', pitch: 4, mid: -8 },\n\t\t'bass3': { clef: 'bass', pitch: 6, mid: -10 },\n\t\t'bass4': { clef: 'bass', pitch: 8, mid: -12 },\n\t\t'bass5': { clef: 'bass', pitch: 10, mid: -14 },\n\t\t'tenor': { clef: 'alto', pitch: 8, mid: -8 },\n\t\t'tenor1': { clef: 'alto', pitch: 2, mid: -2 },\n\t\t'tenor2': { clef: 'alto', pitch: 4, mid: -4 },\n\t\t'tenor3': { clef: 'alto', pitch: 6, mid: -6 },\n\t\t'tenor4': { clef: 'alto', pitch: 8, mid: -8 },\n\t\t'tenor5': { clef: 'alto', pitch: 10, mid: -10 },\n\t\t'alto': { clef: 'alto', pitch: 6, mid: -6 },\n\t\t'alto1': { clef: 'alto', pitch: 2, mid: -2 },\n\t\t'alto2': { clef: 'alto', pitch: 4, mid: -4 },\n\t\t'alto3': { clef: 'alto', pitch: 6, mid: -6 },\n\t\t'alto4': { clef: 'alto', pitch: 8, mid: -8 },\n\t\t'alto5': { clef: 'alto', pitch: 10, mid: -10 },\n\t\t'alto+8': { clef: 'alto+8', pitch: 6, mid: -6 },\n\t\t'alto-8': { clef: 'alto-8', pitch: 6, mid: -6 }\n\t};\n\n\tvar calcMiddle = function(clef, oct) {\n\t\tvar value = clefLines[clef];\n\t\tvar mid = value ? value.mid : 0;\n\t\treturn mid+oct;\n\t};\n\n\tparseKeyVoice.fixClef = function(clef) {\n\t\tvar value = clefLines[clef.type];\n\t\tif (value) {\n\t\t\tclef.clefPos = value.pitch;\n\t\t\tclef.type = value.clef;\n\t\t}\n\t};\n\n\tparseKeyVoice.deepCopyKey = function(key) {\n\t\tvar ret = { accidentals: [], root: key.root, acc: key.acc, mode: key.mode };\n\t\tparseCommon.each(key.accidentals, function(k) {\n\t\tret.accidentals.push(parseCommon.clone(k));\n\t\t});\n\t\treturn ret;\n\t};\n\n\tvar pitches = {A: 5, B: 6, C: 0, D: 1, E: 2, F: 3, G: 4, a: 12, b: 13, c: 7, d: 8, e: 9, f: 10, g: 11};\n\n\tparseKeyVoice.addPosToKey = function(clef, key) {\n\t\t// Shift the key signature from the treble positions to whatever position is needed for the clef.\n\t\t// This may put the key signature unnaturally high or low, so if it does, then shift it.\n\t\tvar mid = clef.verticalPos;\n\t\tparseCommon.each(key.accidentals, function(acc) {\n\t\t\tvar pitch = pitches[acc.note];\n\t\t\tpitch = pitch - mid;\n\t\t\tacc.verticalPos = pitch;\n\t\t});\n\t\tif (key.impliedNaturals)\n\t\t\tparseCommon.each(key.impliedNaturals, function(acc) {\n\t\t\t\tvar pitch = pitches[acc.note];\n\t\t\t\tpitch = pitch - mid;\n\t\t\t\tacc.verticalPos = pitch;\n\t\t\t});\n\n\t\tif (mid < -10) {\n\t\t\tparseCommon.each(key.accidentals, function(acc) {\n\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\tif (acc.verticalPos >= 11 || (acc.verticalPos === 10 && acc.acc === 'flat'))\n\t\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\tif (acc.note === 'A' && acc.acc === 'sharp' )\n\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t\tif ((acc.note === 'G' || acc.note === 'F') && acc.acc === 'flat' )\n\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t});\n\t\t\tif (key.impliedNaturals)\n\t\t\t\tparseCommon.each(key.impliedNaturals, function(acc) {\n\t\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\t\tif (acc.verticalPos >= 11 || (acc.verticalPos === 10 && acc.acc === 'flat'))\n\t\t\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\t\tif (acc.note === 'A' && acc.acc === 'sharp' )\n\t\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t\t\tif ((acc.note === 'G' || acc.note === 'F') && acc.acc === 'flat' )\n\t\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t\t});\n\t\t} else if (mid < -4) {\n\t\t\tparseCommon.each(key.accidentals, function(acc) {\n\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\tif (mid === -8 && (acc.note === 'f' || acc.note === 'g') && acc.acc === 'sharp' )\n\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t});\n\t\t\tif (key.impliedNaturals)\n\t\t\t\tparseCommon.each(key.impliedNaturals, function(acc) {\n\t\t\t\t\tacc.verticalPos -= 7;\n\t\t\t\t\tif (mid === -8 && (acc.note === 'f' || acc.note === 'g') && acc.acc === 'sharp' )\n\t\t\t\t\t\tacc.verticalPos -=7;\n\t\t\t\t});\n\t\t} else if (mid >= 7) {\n\t\t\tparseCommon.each(key.accidentals, function(acc) {\n\t\t\t\tacc.verticalPos += 7;\n\t\t\t});\n\t\t\tif (key.impliedNaturals)\n\t\t\t\tparseCommon.each(key.impliedNaturals, function(acc) {\n\t\t\t\t\tacc.verticalPos += 7;\n\t\t\t\t});\n\t\t}\n\t};\n\n\tparseKeyVoice.fixKey = function(clef, key) {\n\t\tvar fixedKey = parseCommon.clone(key);\n\t\tparseKeyVoice.addPosToKey(clef, fixedKey);\n\t\treturn fixedKey;\n\t};\n\n\tvar parseMiddle = function(str) {\n\t\tvar i = 0;\n\t\tvar p = str.charAt(i++);\n\t\tif (p === '^' || p === '_')\n\t\t\tp = str.charAt(i++);\n\t  var mid = pitches[p];\n\t\tif (mid === undefined)\n\t\t\tmid = 6; // If a legal middle note wasn't received, just ignore it.\n\t\tfor ( ; i < str.length; i++) {\n\t\t\tif (str.charAt(i) === ',') mid -= 7;\n\t\t\telse if (str.charAt(i) === \"'\") mid += 7;\n\t\t\telse break;\n\t\t}\n\t\treturn { mid: mid - 6, str: str.substring(i) };\t// We get the note in the middle of the staff. We want the note that appears as the first ledger line below the staff.\n\t};\n\n\tvar normalizeAccidentals = function(accs) {\n\t\tfor (var i = 0; i < accs.length; i++) {\n\t\t\tif (accs[i].note === 'b')\n\t\t\t\taccs[i].note = 'B';\n\t\t\telse if (accs[i].note === 'a')\n\t\t\t\taccs[i].note = 'A';\n\t\t\telse if (accs[i].note === 'F')\n\t\t\t\taccs[i].note = 'f';\n\t\t\telse if (accs[i].note === 'E')\n\t\t\t\taccs[i].note = 'e';\n\t\t\telse if (accs[i].note === 'D')\n\t\t\t\taccs[i].note = 'd';\n\t\t\telse if (accs[i].note === 'C')\n\t\t\t\taccs[i].note = 'c';\n\t\t\telse if (accs[i].note === 'G' && accs[i].acc === 'sharp')\n\t\t\t\taccs[i].note = 'g';\n\t\t\telse if (accs[i].note === 'g' && accs[i].acc === 'flat')\n\t\t\t\taccs[i].note = 'G';\n\t\t}\n\t};\n\n\tparseKeyVoice.parseKey = function(str)\t// (and clef)\n\t{\n\t\t// returns:\n\t\t//\t\t{ foundClef: true, foundKey: true }\n\t\t// Side effects:\n\t\t//\t\tcalls warn() when there is a syntax error\n\t\t//\t\tsets these members of multilineVars:\n\t\t//\t\t\tclef\n\t\t//\t\t\tkey\n\t\t//\t\t\tstyle\n\t\t//\n\t\t// The format is:\n\t\t// K: [⟨key⟩] [⟨modifiers⟩*]\n\t\t// modifiers are any of the following in any order:\n\t\t//  [⟨clef⟩] [middle=⟨pitch⟩] [transpose=[-]⟨number⟩] [stafflines=⟨number⟩] [staffscale=⟨number⟩][style=⟨style⟩]\n\t\t// key is none|HP|Hp|⟨specified_key⟩\n\t\t// clef is [clef=] [⟨clef type⟩] [⟨line number⟩] [+8|-8]\n\t\t// specified_key is ⟨pitch⟩[#|b][mode(first three chars are significant)][accidentals*]\n\t\tif (str.length === 0) {\n\t\t\t// an empty K: field is the same as K:none\n\t\t\tstr = 'none';\n\t\t}\n\t\tvar tokens = tokenizer.tokenize(str, 0, str.length);\n\t\tvar ret = {};\n\n\t\t// first the key\n\t\tswitch (tokens[0].token) {\n\t\t\tcase 'HP':\n\t\t\t\tparseDirective.addDirective(\"bagpipes\");\n\t\t\t\tmultilineVars.key = { root: \"HP\", accidentals: [], acc: \"\", mode: \"\" };\n\t\t\t\tret.foundKey = true;\n\t\t\t\ttokens.shift();\n\t\t\t\tbreak;\n\t\t\tcase 'Hp':\n\t\t\t\tparseDirective.addDirective(\"bagpipes\");\n\t\t\t\tmultilineVars.key = { root: \"Hp\", accidentals: [{acc: 'natural', note: 'g'}, {acc: 'sharp', note: 'f'}, {acc: 'sharp', note: 'c'}], acc: \"\", mode: \"\" };\n\t\t\t\tret.foundKey = true;\n\t\t\t\ttokens.shift();\n\t\t\t\tbreak;\n\t\t\tcase 'none':\n\t\t\t\t// we got the none key - that's the same as C to us\n\t\t\t\tmultilineVars.key = { root: \"none\", accidentals: [], acc: \"\", mode: \"\" };\n\t\t\t\tret.foundKey = true;\n\t\t\t\ttokens.shift();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar retPitch = tokenizer.getKeyPitch(tokens[0].token);\n\t\t\t\tif (retPitch.len > 0) {\n\t\t\t\t\tret.foundKey = true;\n\t\t\t\t\tvar acc = \"\";\n\t\t\t\t\tvar mode = \"\";\n\t\t\t\t\t// The accidental and mode might be attached to the pitch, so we might want to just remove the first character.\n\t\t\t\t\tif (tokens[0].token.length > 1)\n\t\t\t\t\t\ttokens[0].token = tokens[0].token.substring(1);\n\t\t\t\t\telse\n\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\tvar key = retPitch.token;\n\t\t\t\t\t// We got a pitch to start with, so we might also have an accidental and a mode\n\t\t\t\t\tif (tokens.length > 0) {\n\t\t\t\t\t\tvar retAcc = tokenizer.getSharpFlat(tokens[0].token);\n\t\t\t\t\t\tif (retAcc.len > 0) {\n\t\t\t\t\t\t\tif (tokens[0].token.length > 1)\n\t\t\t\t\t\t\t\ttokens[0].token = tokens[0].token.substring(1);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t\t\tkey += retAcc.token;\n\t\t\t\t\t\t\tacc = retAcc.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tokens.length > 0) {\n\t\t\t\t\t\t\tvar retMode = tokenizer.getMode(tokens[0].token);\n\t\t\t\t\t\t\tif (retMode.len > 0) {\n\t\t\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t\t\t\tkey += retMode.token;\n\t\t\t\t\t\t\t\tmode = retMode.token;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Be sure that the key specified is in the list: not all keys are physically possible, like Cbmin.\n\t\t\t\t\t\tif (parseKeyVoice.standardKey(key, retPitch.token, acc, 0) === undefined) {\n\t\t\t\t\t\t\twarn(\"Unsupported key signature: \" + key, str, 0);\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// We need to do a deep copy because we are going to modify it\n\t\t\t\t\tvar oldKey = parseKeyVoice.deepCopyKey(multilineVars.key);\n\t\t\t\t\t//TODO-PER: HACK! To get the local transpose to work, the transposition is done for each line. This caused the global transposition variable to be factored in twice, so, instead of rewriting that right now, I'm just subtracting one of them here.\n\t\t\t\t\tvar keyCompensate = multilineVars.globalTranspose ? -multilineVars.globalTranspose : 0;\n\t\t\t\t\tmultilineVars.key = parseKeyVoice.deepCopyKey(parseKeyVoice.standardKey(key, retPitch.token, acc, keyCompensate));\n\t\t\t\t\tmultilineVars.key.mode = mode;\n\t\t\t\t\tif (oldKey) {\n\t\t\t\t\t\t// Add natural in all places that the old key had an accidental.\n\t\t\t\t\t\tvar kk;\n\t\t\t\t\t\tfor (var k = 0; k < multilineVars.key.accidentals.length; k++) {\n\t\t\t\t\t\t\tfor (kk = 0; kk < oldKey.accidentals.length; kk++) {\n\t\t\t\t\t\t\t\tif (oldKey.accidentals[kk].note && multilineVars.key.accidentals[k].note.toLowerCase() === oldKey.accidentals[kk].note.toLowerCase())\n\t\t\t\t\t\t\t\t\toldKey.accidentals[kk].note = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (kk = 0; kk < oldKey.accidentals.length; kk++) {\n\t\t\t\t\t\t\tif (oldKey.accidentals[kk].note) {\n\t\t\t\t\t\t\t\tif (!multilineVars.key.impliedNaturals)\n\t\t\t\t\t\t\t\t\tmultilineVars.key.impliedNaturals = [];\n\t\t\t\t\t\t\t\tmultilineVars.key.impliedNaturals.push({ acc: 'natural', note: oldKey.accidentals[kk].note });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// There are two special cases of deprecated syntax. Ignore them if they occur\n\t\tif (tokens.length === 0) return ret;\n\t\tif (tokens[0].token === 'exp') tokens.shift();\n\t\tif (tokens.length === 0) return ret;\n\t\tif (tokens[0].token === 'oct') tokens.shift();\n\n\t\t// now see if there are extra accidentals\n\t\tif (tokens.length === 0) return ret;\n\t\tvar accs = tokenizer.getKeyAccidentals2(tokens);\n\t\tif (accs.warn)\n\t\t\twarn(accs.warn, str, 0);\n\t\t// If we have extra accidentals, first replace ones that are of the same pitch before adding them to the end.\n\t\tif (accs.accs) {\n\t\t\tif (!ret.foundKey) {\t\t// if there are only extra accidentals, make sure this is set.\n\t\t\t\tret.foundKey = true;\n\t\t\t\tmultilineVars.key = { root: \"none\", acc: \"\", mode: \"\", accidentals: [] };\n\t\t\t}\n\t\t\tnormalizeAccidentals(accs.accs);\n\t\t\tfor (var i = 0; i < accs.accs.length; i++) {\n\t\t\t\tvar found = false;\n\t\t\t\tfor (var j = 0; j < multilineVars.key.accidentals.length && !found; j++) {\n\t\t\t\t\tif (multilineVars.key.accidentals[j].note === accs.accs[i].note) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tif (multilineVars.key.accidentals[j].acc !== accs.accs[i].acc) {\n\t\t\t\t\t\t\t// If the accidental is different, then replace it. If it is the same, then the declaration was redundant, so just ignore it.\n\t\t\t\t\t\t\tmultilineVars.key.accidentals[j].acc = accs.accs[i].acc;\n\t\t\t\t\t\t\tif (!multilineVars.key.explicitAccidentals)\n\t\t\t\t\t\t\t\tmultilineVars.key.explicitAccidentals = [];\n\t\t\t\t\t\t\tmultilineVars.key.explicitAccidentals.push(accs.accs[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\tif (!multilineVars.key.explicitAccidentals)\n\t\t\t\t\t\tmultilineVars.key.explicitAccidentals = [];\n\t\t\t\t\tmultilineVars.key.explicitAccidentals.push(accs.accs[i]);\n\t\t\t\t\tmultilineVars.key.accidentals.push(accs.accs[i]);\n\t\t\t\t\tif (multilineVars.key.impliedNaturals) {\n\t\t\t\t\t\tfor (var kkk = 0; kkk < multilineVars.key.impliedNaturals.length; kkk++) {\n\t\t\t\t\t\t\tif (multilineVars.key.impliedNaturals[kkk].note === accs.accs[i].note)\n\t\t\t\t\t\t\t\tmultilineVars.key.impliedNaturals.splice(kkk, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now see if any optional parameters are present. They have the form \"key=value\", except that \"clef=\" is optional\n\t\tvar token;\n\t\twhile (tokens.length > 0) {\n\t\t\tswitch (tokens[0].token) {\n\t\t\t\tcase \"m\":\n\t\t\t\tcase \"middle\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after middle\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after middle\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after middle=\", str, 0); return ret; }\n\t\t\t\t\tvar pitch = tokenizer.getPitchFromTokens(tokens);\n\t\t\t\t\tif (pitch.warn)\n\t\t\t\t\t\twarn(pitch.warn, str, 0);\n\t\t\t\t\tif (pitch.position)\n\t\t\t\t\t\tmultilineVars.clef.verticalPos = pitch.position - 6;\t// we get the position from the middle line, but want to offset it to the first ledger line.\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"transpose\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after transpose\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after transpose\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after transpose=\", str, 0); return ret; }\n\t\t\t\t\tif (tokens[0].type !== 'number') { warn(\"Expected number after transpose\", str, tokens[0].start); break; }\n\t\t\t\t\tmultilineVars.clef.transpose = tokens[0].intt;\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"stafflines\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after stafflines\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after stafflines\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after stafflines=\", str, 0); return ret; }\n\t\t\t\t\tif (tokens[0].type !== 'number') { warn(\"Expected number after stafflines\", str, tokens[0].start); break; }\n\t\t\t\t\tmultilineVars.clef.stafflines = tokens[0].intt;\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"staffscale\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after staffscale\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after staffscale\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after staffscale=\", str, 0); return ret; }\n\t\t\t\t\tif (tokens[0].type !== 'number') { warn(\"Expected number after staffscale\", str, tokens[0].start); break; }\n\t\t\t\t\tmultilineVars.clef.staffscale = tokens[0].floatt;\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"style\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after style\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after style\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after style=\", str, 0); return ret; }\n\t\t\t\t\tswitch (tokens[0].token) {\n\t\t\t\t\t\tcase \"normal\":\n\t\t\t\t\t\tcase \"harmonic\":\n\t\t\t\t\t\tcase \"rhythm\":\n\t\t\t\t\t\tcase \"x\":\n\t\t\t\t\t\t\tmultilineVars.style = tokens[0].token;\n\t\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\twarn(\"error parsing style element: \" + tokens[0].token, str, tokens[0].start);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"clef\":\n\t\t\t\t\ttokens.shift();\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected = after clef\", str, 0); return ret; }\n\t\t\t\t\ttoken = tokens.shift();\n\t\t\t\t\tif (token.token !== \"=\") { warn(\"Expected = after clef\", str, token.start); break; }\n\t\t\t\t\tif (tokens.length === 0) { warn(\"Expected parameter after clef=\", str, 0); return ret; }\n\t\t\t\t\t//break; yes, we want to fall through. That allows \"clef=\" to be optional.\n\t\t\t\tcase \"treble\":\n\t\t\t\tcase \"bass\":\n\t\t\t\tcase \"alto\":\n\t\t\t\tcase \"tenor\":\n\t\t\t\tcase \"perc\":\n\t\t\t\t\t// clef is [clef=] [⟨clef type⟩] [⟨line number⟩] [+8|-8]\n\t\t\t\t\tvar clef = tokens.shift();\n\t\t\t\t\tswitch (clef.token) {\n\t\t\t\t\t\tcase 'treble':\n\t\t\t\t\t\tcase 'tenor':\n\t\t\t\t\t\tcase 'alto':\n\t\t\t\t\t\tcase 'bass':\n\t\t\t\t\t\tcase 'perc':\n\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'C': clef.token = 'alto'; break;\n\t\t\t\t\t\tcase 'F': clef.token = 'bass'; break;\n\t\t\t\t\t\tcase 'G': clef.token = 'treble'; break;\n\t\t\t\t\t\tcase 'c': clef.token = 'alto'; break;\n\t\t\t\t\t\tcase 'f': clef.token = 'bass'; break;\n\t\t\t\t\t\tcase 'g': clef.token = 'treble'; break;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\twarn(\"Expected clef name. Found \" + clef.token, str, clef.start);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (tokens.length > 0 && tokens[0].type === 'number') {\n\t\t\t\t\t\tclef.token += tokens[0].token;\n\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (tokens.length > 1 && (tokens[0].token === '-' || tokens[0].token === '+') && tokens[1].token === '8') {\n\t\t\t\t\t\tclef.token += tokens[0].token + tokens[1].token;\n\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t\ttokens.shift();\n\t\t\t\t\t}\n\t\t\t\t\tmultilineVars.clef = {type: clef.token, verticalPos: calcMiddle(clef.token, 0)};\n\t\t\t\t\tif (multilineVars.currentVoice && multilineVars.currentVoice.transpose !== undefined)\n\t\t\t\t\t\tmultilineVars.clef.transpose = multilineVars.currentVoice.transpose;\n\t\t\t\t\tret.foundClef = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\twarn(\"Unknown parameter: \" + tokens[0].token, str, tokens[0].start);\n\t\t\t\t\ttokens.shift();\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\tvar setCurrentVoice = function(id) {\n\t\tmultilineVars.currentVoice = multilineVars.voices[id];\n\t\ttune.setCurrentVoice(multilineVars.currentVoice.staffNum, multilineVars.currentVoice.index);\n\t};\n\n\tparseKeyVoice.parseVoice = function(line, i, e) {\n\t\t//First truncate the string to the first non-space character after V: through either the\n\t\t//end of the line or a % character. Then remove trailing spaces, too.\n\t\tvar ret = tokenizer.getMeat(line, i, e);\n\t\tvar start = ret.start;\n\t\tvar end = ret.end;\n\t\t//The first thing on the line is the ID. It can be any non-space string and terminates at the\n\t\t//first space.\n\t\tvar id = tokenizer.getToken(line, start, end);\n\t\tif (id.length === 0) {\n\t\t\twarn(\"Expected a voice id\", line, start);\n\t\t\treturn;\n\t\t}\n\t\tvar isNew = false;\n\t\tif (multilineVars.voices[id] === undefined) {\n\t\t\tmultilineVars.voices[id] = {};\n\t\t\tisNew = true;\n\t\t\tif (multilineVars.score_is_present)\n\t\t\t\twarn(\"Can't have an unknown V: id when the %score directive is present\", line, start);\n\t\t}\n\t\tstart += id.length;\n\t\tstart += tokenizer.eatWhiteSpace(line, start);\n\n\t\tvar staffInfo = {startStaff: isNew};\n\t\tvar addNextTokenToStaffInfo = function(name) {\n\t\t\tvar attr = tokenizer.getVoiceToken(line, start, end);\n\t\t\tif (attr.warn !== undefined)\n\t\t\t\twarn(\"Expected value for \" + name + \" in voice: \" + attr.warn, line, start);\n\t\t\telse if (attr.token.length === 0 && line.charAt(start) !== '\"')\n\t\t\t\twarn(\"Expected value for \" + name + \" in voice\", line, start);\n\t\t\telse\n\t\t\t\tstaffInfo[name] = attr.token;\n\t\t\tstart += attr.len;\n\t\t};\n\t\tvar addNextTokenToVoiceInfo = function(id, name, type) {\n\t\t\tvar attr = tokenizer.getVoiceToken(line, start, end);\n\t\t\tif (attr.warn !== undefined)\n\t\t\t\twarn(\"Expected value for \" + name + \" in voice: \" + attr.warn, line, start);\n\t\t\telse if (attr.token.length === 0 && line.charAt(start) !== '\"')\n\t\t\t\twarn(\"Expected value for \" + name + \" in voice\", line, start);\n\t\t\telse {\n\t\t\t\tif (type === 'number')\n\t\t\t\t\tattr.token = parseFloat(attr.token);\n\t\t\t\tmultilineVars.voices[id][name] = attr.token;\n\t\t\t}\n\t\t\tstart += attr.len;\n\t\t};\n\t\tvar addNextNoteTokenToVoiceInfo = function(id, name) {\n\t\t\tvar noteToTransposition = {\n\t\t\t\t\"_B\": 2,\n\t\t\t\t\"_E\": 9,\n\t\t\t\t\"_b\": -10,\n\t\t\t\t\"_e\": -3\n\t\t\t};\n\t\t\tvar attr = tokenizer.getVoiceToken(line, start, end);\n\t\t\tif (attr.warn !== undefined)\n\t\t\t\twarn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice: \" + attr.warn, line, start);\n\t\t\telse if (attr.token.length === 0 && line.charAt(start) !== '\"')\n\t\t\t\twarn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice\", line, start);\n\t\t\telse {\n\t\t\t\tvar t = noteToTransposition[attr.token];\n\t\t\t\tif (!t)\n\t\t\t\t\twarn(\"Expected one of (_B, _E, _b, _e) for \" + name + \" in voice\", line, start);\n\t\t\t\telse\n\t\t\t\t\tmultilineVars.voices[id][name] = t;\n\t\t\t}\n\t\t\tstart += attr.len;\n\t\t};\n\n\t\t//Then the following items can occur in any order:\n\t\twhile (start < end) {\n\t\t\tvar token = tokenizer.getVoiceToken(line, start, end);\n\t\t\tstart += token.len;\n\n\t\t\tif (token.warn) {\n\t\t\t\twarn(\"Error parsing voice: \" + token.warn, line, start);\n\t\t\t} else {\n\t\t\t\tvar attr = null;\n\t\t\t\tswitch (token.token) {\n\t\t\t\t\tcase 'clef':\n\t\t\t\t\tcase 'cl':\n\t\t\t\t\t\taddNextTokenToStaffInfo('clef');\n\t\t\t\t\t\t// TODO-PER: check for a legal clef; do octavizing\n\t\t\t\t\t\tvar oct = 0;\n\t//\t\t\t\t\t\t\tfor (var ii = 0; ii < staffInfo.clef.length; ii++) {\n\t//\t\t\t\t\t\t\t\tif (staffInfo.clef[ii] === ',') oct -= 7;\n\t//\t\t\t\t\t\t\t\telse if (staffInfo.clef[ii] === \"'\") oct += 7;\n\t//\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif (staffInfo.clef !== undefined) {\n\t\t\t\t\t\t  staffInfo.clef = staffInfo.clef.replace(/[',]/g, \"\"); //'//comment for emacs formatting of regexp\n\t\t\t\t\t\t\tif (staffInfo.clef.indexOf('+16') !== -1) {\n\t\t\t\t\t\t\t\toct += 14;\n\t\t\t\t\t\t\t\tstaffInfo.clef = staffInfo.clef.replace('+16', '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstaffInfo.verticalPos = calcMiddle(staffInfo.clef, oct);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'treble':\n\t\t\t\t\tcase 'bass':\n\t\t\t\t\tcase 'tenor':\n\t\t\t\t\tcase 'alto':\n\t\t\t\t\tcase 'perc':\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'treble\\'':\n\t\t\t\t\tcase 'bass\\'':\n\t\t\t\t\tcase 'tenor\\'':\n\t\t\t\t\tcase 'alto\\'':\n\t\t\t\t\tcase 'none\\'':\n\t\t\t\t\tcase 'treble\\'\\'':\n\t\t\t\t\tcase 'bass\\'\\'':\n\t\t\t\t\tcase 'tenor\\'\\'':\n\t\t\t\t\tcase 'alto\\'\\'':\n\t\t\t\t\tcase 'none\\'\\'':\n\t\t\t\t\tcase 'treble,':\n\t\t\t\t\tcase 'bass,':\n\t\t\t\t\tcase 'tenor,':\n\t\t\t\t\tcase 'alto,':\n\t\t\t\t\tcase 'none,':\n\t\t\t\t\tcase 'treble,,':\n\t\t\t\t\tcase 'bass,,':\n\t\t\t\t\tcase 'tenor,,':\n\t\t\t\t\tcase 'alto,,':\n\t\t\t\t\tcase 'none,,':\n\t\t\t\t\t\t// TODO-PER: handle the octave indicators on the clef by changing the middle property\n\t\t\t\t\t\tvar oct2 = 0;\n\t//\t\t\t\t\t\t\tfor (var iii = 0; iii < token.token.length; iii++) {\n\t//\t\t\t\t\t\t\t\tif (token.token[iii] === ',') oct2 -= 7;\n\t//\t\t\t\t\t\t\t\telse if (token.token[iii] === \"'\") oct2 += 7;\n\t//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t  staffInfo.clef = token.token.replace(/[',]/g, \"\"); //'//comment for emacs formatting of regexp\n\t\t\t\t\t\tstaffInfo.verticalPos = calcMiddle(staffInfo.clef, oct2);\n\t\t\t\t\t\tmultilineVars.voices[id].clef = token.token;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'staves':\n\t\t\t\t\tcase 'stave':\n\t\t\t\t\tcase 'stv':\n\t\t\t\t\t\taddNextTokenToStaffInfo('staves');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'brace':\n\t\t\t\t\tcase 'brc':\n\t\t\t\t\t\taddNextTokenToStaffInfo('brace');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bracket':\n\t\t\t\t\tcase 'brk':\n\t\t\t\t\t\taddNextTokenToStaffInfo('bracket');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'name':\n\t\t\t\t\tcase 'nm':\n\t\t\t\t\t\taddNextTokenToStaffInfo('name');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'subname':\n\t\t\t\t\tcase 'sname':\n\t\t\t\t\tcase 'snm':\n\t\t\t\t\t\taddNextTokenToStaffInfo('subname');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'merge':\n\t\t\t\t\t\tstaffInfo.startStaff = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'stem':\n\t\t\t\t\tcase 'stems':\n\t\t\t\t\t\tattr = tokenizer.getVoiceToken(line, start, end);\n\t\t\t\t\t\tif (attr.warn !== undefined)\n\t\t\t\t\t\t\twarn(\"Expected value for stems in voice: \" + attr.warn, line, start);\n\t\t\t\t\t\telse if (attr.token === 'up' || attr.token === 'down')\n\t\t\t\t\t\t\tmultilineVars.voices[id].stem = attr.token;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twarn(\"Expected up or down for voice stem\", line, start);\n\t\t\t\t\t\tstart += attr.len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'up':\n\t\t\t\t\tcase 'down':\n\t\t\t\t\t\tmultilineVars.voices[id].stem = token.token;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'middle':\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\taddNextTokenToStaffInfo('verticalPos');\n\t\t\t\t\t\tstaffInfo.verticalPos = parseMiddle(staffInfo.verticalPos).mid;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'gchords':\n\t\t\t\t\tcase 'gch':\n\t\t\t\t\t\tmultilineVars.voices[id].suppressChords = true;\n\t\t\t\t\t\t// gchords can stand on its own, or it could be gchords=0.\n\t\t\t\t\t\tattr = tokenizer.getVoiceToken(line, start, end);\n\t\t\t\t\t\tif (attr.token === \"0\")\n\t\t\t\t\t\t\tstart = start + attr.len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'space':\n\t\t\t\t\tcase 'spc':\n\t\t\t\t\t\taddNextTokenToStaffInfo('spacing');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'scale', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'score':\n\t\t\t\t\t\taddNextNoteTokenToVoiceInfo(id, 'scoreTranspose');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transpose':\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'transpose', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'stafflines':\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'stafflines', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'staffscale':\n\t\t\t\t\t\t// TODO-PER: This is passed to the engraver, but the engraver ignores it.\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'staffscale', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'octave':\n\t\t\t\t\t\t// TODO-PER: This is accepted, but not implemented, yet.\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'octave', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t// TODO-PER: This is accepted, but not implemented, yet.\n\t\t\t\t\t\taddNextTokenToVoiceInfo(id, 'volume', 'number');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"style\":\n\t\t\t\t\t\tattr = tokenizer.getVoiceToken(line, start, end);\n\t\t\t\t\t\tif (attr.warn !== undefined)\n\t\t\t\t\t\t\twarn(\"Expected value for style in voice: \" + attr.warn, line, start);\n\t\t\t\t\t\telse if (attr.token === 'normal' || attr.token === 'harmonic' || attr.token === 'rhythm' || attr.token === 'x')\n\t\t\t\t\t\t\tmultilineVars.voices[id].style = attr.token;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twarn(\"Expected one of [normal, harmonic, rhythm, x] for voice style\", line, start);\n\t\t\t\t\t\tstart += attr.len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// default:\n\t\t\t\t\t// Use this to find V: usages that aren't handled.\n\t\t\t\t\t// \tconsole.log(\"parse voice\", token, tune.metaText.title);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstart += tokenizer.eatWhiteSpace(line, start);\n\t\t}\n\n\t\t// now we've filled up staffInfo, figure out what to do with this voice\n\t\t// TODO-PER: It is unclear from the standard and the examples what to do with brace, bracket, and staves, so they are ignored for now.\n\t\tif (staffInfo.startStaff || multilineVars.staves.length === 0) {\n\t\t\tmultilineVars.staves.push({index: multilineVars.staves.length, meter: multilineVars.origMeter});\n\t\t\tif (!multilineVars.score_is_present)\n\t\t\t\tmultilineVars.staves[multilineVars.staves.length-1].numVoices = 0;\n\t\t}\n\t\tif (multilineVars.voices[id].staffNum === undefined) {\n\t\t\t// store where to write this for quick access later.\n\t\t\tmultilineVars.voices[id].staffNum = multilineVars.staves.length-1;\n\t\t\tvar vi = 0;\n\t\t\tfor(var v in multilineVars.voices) {\n\t\t\t\tif(multilineVars.voices.hasOwnProperty(v)) {\n\t\t\t\t\tif (multilineVars.voices[v].staffNum === multilineVars.voices[id].staffNum)\n\t\t\t\t\t\tvi++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmultilineVars.voices[id].index = vi-1;\n\t\t}\n\t\tvar s = multilineVars.staves[multilineVars.voices[id].staffNum];\n\t\tif (!multilineVars.score_is_present)\n\t\t\ts.numVoices++;\n\t\tif (staffInfo.clef) s.clef = {type: staffInfo.clef, verticalPos: staffInfo.verticalPos};\n\t\tif (staffInfo.spacing) s.spacing_below_offset = staffInfo.spacing;\n\t\tif (staffInfo.verticalPos) s.verticalPos = staffInfo.verticalPos;\n\n\t\tif (staffInfo.name) {if (s.name) s.name.push(staffInfo.name); else s.name = [ staffInfo.name ];}\n\t\tif (staffInfo.subname) {if (s.subname) s.subname.push(staffInfo.subname); else s.subname = [ staffInfo.subname ];}\n\n\t\tsetCurrentVoice(id);\n\t};\n\n})();\n\nmodule.exports = parseKeyVoice;\n"]},"metadata":{},"sourceType":"script"}