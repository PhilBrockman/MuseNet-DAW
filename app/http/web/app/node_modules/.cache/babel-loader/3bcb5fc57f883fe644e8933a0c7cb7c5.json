{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/SongEditor.js\",\n    _s = $RefreshSig$();\n\nimport \"./daw.css\";\nimport { keymaps } from \"./keymaps\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst secsPerBeat = .13;\nconst beatsPerMeasure = 4;\nexport const SongEditor = props => {\n  if (props.current) {\n    let tracks = props.current.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Sidebar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TrackViewer, {\n          tracks: tracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  } else {\n    return \"no parents\";\n  }\n};\n_c = SongEditor;\n\nconst TrackViewer = props => {\n  _s();\n\n  const [activeTrack, setActiveTrack] = React.useState(0);\n  let tracks = props.tracks.map((item, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setActiveTrack(idx),\n      children: [item.instrument, \" | \", item.notes.length]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this); //.notes.length\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-area\",\n      children: tracks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflow: \"scroll\",\n        width: \"740px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ActiveArea, {\n        active: props.tracks[activeTrack]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 53\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TrackViewer, \"xd5tPIV4RyVQCOI+NgzqfN3EuTg=\");\n\n_c2 = TrackViewer;\n\nconst ActiveArea = props => {\n  let numBoxes = Math.round(5 / secsPerBeat);\n  let boxes = Array.from(Array(numBoxes).keys());\n  let notes = props.active.notes.splice(0, 5);\n  let minNote = notes.reduce((min, b) => Math.min(min, b.pitch), notes[0].pitch);\n  let maxNote = notes.reduce((min, b) => Math.max(min, b.pitch), notes[0].pitch);\n\n  let header = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"key-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }, this), boxes.map((item, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: (secsPerBeat * idx).toFixed(2)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 30\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 16\n  }, this);\n\n  let body = Object.keys(keymaps).map((item, idx) => {\n    let c = keymaps[item].includes(\"#\") ? \"accidental\" : \"natural\";\n    let b = boxes.map((item, idx) => {\n      let cN = (item + 1) % beatsPerMeasure ? \"downbeat\" : \"beat\";\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cN\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"key-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: c,\n        children: keymaps[item]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), b]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [header, body, /*#__PURE__*/_jsxDEV(Notes, {\n      notes: notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this); // return notes.map((item, idx) => {\n  //   return <div key={idx}>{[keymaps[item.pitch], item.duration, item.time_on].join(\"|\")}</div>\n  // })\n};\n\n_c3 = ActiveArea;\n\nconst Notes = props => {\n  return \"n\";\n};\n\n_c4 = Notes;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SongEditor\");\n$RefreshReg$(_c2, \"TrackViewer\");\n$RefreshReg$(_c3, \"ActiveArea\");\n$RefreshReg$(_c4, \"Notes\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/SongEditor.js"],"names":["keymaps","React","secsPerBeat","beatsPerMeasure","SongEditor","props","current","tracks","data","TrackViewer","activeTrack","setActiveTrack","useState","map","item","idx","instrument","notes","length","overflow","width","ActiveArea","numBoxes","Math","round","boxes","Array","from","keys","active","splice","minNote","reduce","min","b","pitch","maxNote","max","header","toFixed","body","Object","c","includes","cN","Notes"],"mappings":"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","sourcesContent":["import \"./daw.css\"\nimport {keymaps} from \"./keymaps\"\nimport React from 'react'\n\nconst secsPerBeat = .13;\nconst beatsPerMeasure = 4;\n\nexport const SongEditor = (props) => {\n  if(props.current){\n    let tracks = props.current.data\n    return <div className=\"grid-container\">\n    <div>Logo</div>\n    <div>Settings</div>\n    <div>Sidebar</div>\n    <div><TrackViewer tracks={tracks} /></div>\n    </div>\n  } else {\n    return \"no parents\"\n  }\n}\n\nconst TrackViewer = (props) => {\n  const [activeTrack, setActiveTrack] = React.useState(0)\n  let tracks = props.tracks.map((item, idx) => {\n    return <div key={idx} onClick={() => setActiveTrack(idx)}>\n        {item.instrument} | {item.notes.length}\n        </div>//.notes.length\n  })\n\n  return <>\n  <div className=\"mini-area\">{tracks}</div>\n  <div  style={{overflow:\"scroll\", width:\"740px\"}} ><ActiveArea active={props.tracks[activeTrack]} /></div>\n  </>\n}\n\nconst ActiveArea = (props) => {\n  let numBoxes = Math.round(5/secsPerBeat);\n  let boxes = Array.from(Array(numBoxes).keys())\n  let notes = props.active.notes.splice(0, 5)\n  let minNote = notes.reduce((min, b) => Math.min(min, b.pitch), notes[0].pitch);\n  let maxNote = notes.reduce((min, b) => Math.max(min, b.pitch), notes[0].pitch);\n\n  let header = <div className=\"key-row\">\n                  <div></div>\n                    {boxes.map((item, idx) => {\n                      return <div key={idx}>{(secsPerBeat * idx).toFixed(2)}</div>\n                    })}\n                </div>\n\n  let body = Object.keys(keymaps).map((item,idx) => {\n    let c = keymaps[item].includes(\"#\") ? \"accidental\" : \"natural\";\n    let b = boxes.map((item, idx) => {\n      let cN = (item + 1) % beatsPerMeasure ? \"downbeat\" : \"beat\";\n      return <div className={cN} key={idx}></div>\n    })\n    return <div className=\"key-row\" key={idx}>\n      <div className={c}>{keymaps[item]}</div>\n      {b}\n    </div>\n  })\n  return <div>\n              {header}\n              {body}\n              <Notes notes={notes}/>\n        </div>\n  // return notes.map((item, idx) => {\n  //   return <div key={idx}>{[keymaps[item.pitch], item.duration, item.time_on].join(\"|\")}</div>\n  // })\n}\n\nconst Notes = (props) => {\n  return \"n\"\n}\n"]},"metadata":{},"sourceType":"module"}