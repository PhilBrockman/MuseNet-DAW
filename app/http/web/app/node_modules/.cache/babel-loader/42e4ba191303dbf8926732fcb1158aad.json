{"ast":null,"code":"import { reduceNotes } from \"./utils\";\n\nconst calculateScore = data => {\n  let interval = 60 / data.tempo / data.subdivision;\n\n  let distance = i => Math.pow(Math.abs(Math.round(i) - i), 2);\n\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on / interval) * interval);\n  return startTimes.reduce((a, b) => a + b, 0);\n};\n\nexport const Score = props => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks\n  }));\n};\n_c = Score;\nexport const autoScore = (tracks, subdivision) => {\n  let tempo = 60;\n  let results = {\n    best: 100000000\n  };\n\n  do {\n    let score = calculateScore({\n      tempo: tempo,\n      subdivision: subdivision,\n      tracks: tracks\n    });\n\n    if (score < results.best) {\n      results = {\n        best: score,\n        tempo: tempo,\n        subdivision: subdivision\n      };\n    }\n\n    tempo += .05;\n  } while (tempo < 200);\n\n  return results;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/DAW/Scorer.js"],"names":["reduceNotes","calculateScore","data","interval","tempo","subdivision","distance","i","Math","pow","abs","round","startTimes","tracks","map","item","time_on","reduce","a","b","Score","props","JSON","stringify","bpm","autoScore","results","best","score"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,SAA1B;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,MAAIC,QAAQ,GAAI,KAAGD,IAAI,CAACE,KAAT,GAAgBF,IAAI,CAACG,WAApC;;AACA,MAAIC,QAAQ,GAAIC,CAAD,IAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,KAAL,CAAWJ,CAAX,IAAgBA,CAAzB,CAAT,EAAsC,CAAtC,CAAtB;;AACA,MAAIK,UAAU,GAAGZ,WAAW,CAACE,IAAI,CAACW,MAAN,CAAX,CAAyBC,GAAzB,CAA6BC,IAAI,IAAIT,QAAQ,CAACS,IAAI,CAACC,OAAL,GAAab,QAAd,CAAR,GAAgCA,QAArE,CAAjB;AAEA,SAAOS,UAAU,CAACK,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,EAAmC,CAAnC,CAAP;AACD,CAND;;AAQA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9B,SAAOC,IAAI,CAACC,SAAL,CAAetB,cAAc,CAAC;AACnCG,IAAAA,KAAK,EAAEiB,KAAK,CAACG,GADsB;AAEnCnB,IAAAA,WAAW,EAAEgB,KAAK,CAAChB,WAFgB;AAGnCQ,IAAAA,MAAM,EAAEQ,KAAK,CAACR;AAHqB,GAAD,CAA7B,CAAP;AAKD,CANM;KAAMO,K;AAQb,OAAO,MAAMK,SAAS,GAAG,CAACZ,MAAD,EAASR,WAAT,KAAyB;AAChD,MAAID,KAAK,GAAG,EAAZ;AACA,MAAIsB,OAAO,GAAG;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAd;;AACA,KAAE;AACA,QAAIC,KAAK,GAAG3B,cAAc,CAAC;AACzBG,MAAAA,KAAK,EAAEA,KADkB;AAEzBC,MAAAA,WAAW,EAAEA,WAFY;AAGzBQ,MAAAA,MAAM,EAAEA;AAHiB,KAAD,CAA1B;;AAMA,QAAGe,KAAK,GAAGF,OAAO,CAACC,IAAnB,EAAwB;AACtBD,MAAAA,OAAO,GAAG;AACRC,QAAAA,IAAI,EAAEC,KADE;AAERxB,QAAAA,KAAK,EAAEA,KAFC;AAGRC,QAAAA,WAAW,EAAEA;AAHL,OAAV;AAKD;;AACDD,IAAAA,KAAK,IAAI,GAAT;AACD,GAfD,QAeQA,KAAK,GAAG,GAfhB;;AAiBA,SAAOsB,OAAP;AACD,CArBM","sourcesContent":["import {reduceNotes} from \"./utils\"\n\nconst calculateScore = (data) => {\n  let interval = (60/data.tempo)/data.subdivision;\n  let distance = (i) => Math.pow(Math.abs(Math.round(i) - i), 2);\n  let startTimes = reduceNotes(data.tracks).map(item => distance(item.time_on/interval)*interval);\n\n  return startTimes.reduce((a, b) => a + b, 0)\n}\n\nexport const Score = (props) => {\n  return JSON.stringify(calculateScore({\n    tempo: props.bpm,\n    subdivision: props.subdivision,\n    tracks: props.tracks,\n  }))\n}\n\nexport const autoScore = (tracks, subdivision) => {\n  let tempo = 60;\n  let results = {best: 100000000}\n  do{\n    let score = calculateScore({\n      tempo: tempo,\n      subdivision: subdivision,\n      tracks: tracks\n    })\n\n    if(score < results.best){\n      results = {\n        best: score,\n        tempo: tempo,\n        subdivision: subdivision,\n      }\n    }\n    tempo += .05\n  } while(tempo < 200)\n\n  return results\n}\n"]},"metadata":{},"sourceType":"module"}