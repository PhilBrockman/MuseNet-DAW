{"ast":null,"code":"//    abc_tempo_element.js: Definition of the TempoElement class.\n//    Copyright (C) 2014-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar AbsoluteElement = require('./abc_absolute_element');\n\nvar RelativeElement = require('./abc_relative_element');\n\nvar TempoElement;\n\n(function () {\n  \"use strict\";\n\n  var totalHeightInPitches = 5;\n\n  TempoElement = function TempoElement(tempo, tuneNumber) {\n    this.tempo = tempo;\n    this.tuneNumber = tuneNumber;\n    this.tempoHeightAbove = totalHeightInPitches;\n    this.pitch = undefined; // This will be set later\n  };\n\n  TempoElement.prototype.setUpperAndLowerElements = function (positionY) {\n    // TODO-PER: This might not be called.\n    this.pitch = positionY.tempoHeightAbove;\n  };\n\n  TempoElement.prototype.setX = function (x) {\n    this.x = x;\n  };\n\n  TempoElement.prototype.draw = function (renderer) {\n    var x = this.x;\n    if (this.pitch === undefined) window.console.error(\"Tempo Element y-coordinate not set.\");\n    var y = renderer.calcY(this.pitch);\n    var text;\n\n    if (this.tempo.preString) {\n      text = renderer.renderText(x, y, this.tempo.preString, 'tempofont', 'tempo', \"start\");\n      var preWidth = text.getBBox().width;\n      var charWidth = preWidth / this.tempo.preString.length; // Just get some average number to increase the spacing.\n\n      x += preWidth + charWidth;\n    }\n\n    if (this.tempo.duration && !this.tempo.suppressBpm) {\n      var temposcale = 0.75;\n      var tempopitch = this.pitch - totalHeightInPitches + 1; // The pitch we receive is the top of the allotted area: change that to practically the bottom.\n\n      var duration = this.tempo.duration[0]; // TODO when multiple durations\n\n      var abselem = new AbsoluteElement(this.tempo, duration, 1, 'tempo', this.tuneNumber); // There aren't an infinite number of note values, but we are passed a float, so just in case something is off upstream,\n      // merge all of the in between points.\n\n      var dot;\n      var flag;\n      var note;\n\n      if (duration <= 1 / 32) {\n        note = \"noteheads.quarter\";\n        flag = \"flags.u32nd\";\n        dot = 0;\n      } else if (duration <= 1 / 16) {\n        note = \"noteheads.quarter\";\n        flag = \"flags.u16th\";\n        dot = 0;\n      } else if (duration <= 3 / 32) {\n        note = \"noteheads.quarter\";\n        flag = \"flags.u16nd\";\n        dot = 1;\n      } else if (duration <= 1 / 8) {\n        note = \"noteheads.quarter\";\n        flag = \"flags.u8th\";\n        dot = 0;\n      } else if (duration <= 3 / 16) {\n        note = \"noteheads.quarter\";\n        flag = \"flags.u8th\";\n        dot = 1;\n      } else if (duration <= 1 / 4) {\n        note = \"noteheads.quarter\";\n        dot = 0;\n      } else if (duration <= 3 / 8) {\n        note = \"noteheads.quarter\";\n        dot = 1;\n      } else if (duration <= 1 / 2) {\n        note = \"noteheads.half\";\n        dot = 0;\n      } else if (duration <= 3 / 4) {\n        note = \"noteheads.half\";\n        dot = 1;\n      } else if (duration <= 1) {\n        note = \"noteheads.whole\";\n        dot = 0;\n      } else if (duration <= 1.5) {\n        note = \"noteheads.whole\";\n        dot = 1;\n      } else if (duration <= 2) {\n        note = \"noteheads.dbl\";\n        dot = 0;\n      } else {\n        note = \"noteheads.dbl\";\n        dot = 1;\n      } // TODO-PER: the following had a bug in it when there are dotted notes - so the above code brute forces it.\n      // var durlog = Math.floor(Math.log(duration) / Math.log(2));\n      // var dot = 0;\n      // for (var tot = Math.pow(2, durlog), inc = tot / 2; tot < duration; dot++, tot += inc, inc /= 2);\n      // var note = renderer.engraver.chartable.note[-durlog];\n      // var flag = renderer.engraver.chartable.uflags[-durlog];\n\n\n      var temponote = renderer.engraver.createNoteHead(abselem, // TODO-PER: This seems late to be creating this element. Shouldn't it happen before draw?\n      note, {\n        verticalPos: tempopitch\n      }, \"up\", 0, 0, flag, dot, 0, temposcale);\n      abselem.addHead(temponote);\n      var stem;\n\n      if (note !== \"noteheads.whole\" && note !== \"noteheads.dbl\") {\n        var p1 = tempopitch + 1 / 3 * temposcale;\n        var p2 = tempopitch + 7 * temposcale;\n        var dx = temponote.dx + temponote.w;\n        var width = -0.6;\n        stem = new RelativeElement(null, dx, 0, p1, {\n          \"type\": \"stem\",\n          \"pitch2\": p2,\n          linewidth: width\n        });\n        stem.setX(x);\n        abselem.addExtra(stem);\n      }\n\n      abselem.setX(x);\n\n      for (var i = 0; i < abselem.children.length; i++) abselem.children[i].draw(renderer, x);\n\n      x += abselem.w + 5;\n      var str = \"= \" + this.tempo.bpm;\n      text = renderer.renderText(x, y, str, 'tempofont', 'tempo', \"start\");\n      var postWidth = text.getBBox().width;\n      var charWidth2 = postWidth / str.length; // Just get some average number to increase the spacing.\n\n      x += postWidth + charWidth2;\n    }\n\n    if (this.tempo.postString) {\n      renderer.renderText(x, y, this.tempo.postString, 'tempofont', 'tempo', \"start\");\n    }\n  };\n})();\n\nmodule.exports = TempoElement;","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/node_modules/abcjs/src/write/abc_tempo_element.js"],"names":["AbsoluteElement","require","RelativeElement","TempoElement","totalHeightInPitches","tempo","tuneNumber","tempoHeightAbove","pitch","undefined","prototype","setUpperAndLowerElements","positionY","setX","x","draw","renderer","window","console","error","y","calcY","text","preString","renderText","preWidth","getBBox","width","charWidth","length","duration","suppressBpm","temposcale","tempopitch","abselem","dot","flag","note","temponote","engraver","createNoteHead","verticalPos","addHead","stem","p1","p2","dx","w","linewidth","addExtra","i","children","str","bpm","postWidth","charWidth2","postString","module","exports"],"mappings":"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","sourcesContent":["//    abc_tempo_element.js: Definition of the TempoElement class.\n//    Copyright (C) 2014-2018 Gregory Dyke (gregdyke at gmail dot com) and Paul Rosen\n//\n//    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//    documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n//    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\n//    to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n//    BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n//    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar AbsoluteElement = require('./abc_absolute_element');\nvar RelativeElement = require('./abc_relative_element');\n\nvar TempoElement;\n(function() {\n\t\"use strict\";\n\tvar totalHeightInPitches = 5;\n\n\tTempoElement = function TempoElement(tempo, tuneNumber) {\n\t\tthis.tempo = tempo;\n\t\tthis.tuneNumber = tuneNumber;\n\t\tthis.tempoHeightAbove = totalHeightInPitches;\n\t\tthis.pitch = undefined; // This will be set later\n\t};\n\n\tTempoElement.prototype.setUpperAndLowerElements = function(positionY) { // TODO-PER: This might not be called.\n\t\tthis.pitch = positionY.tempoHeightAbove;\n\t};\n\n\tTempoElement.prototype.setX = function (x) {\n\t\tthis.x = x;\n\t};\n\n\tTempoElement.prototype.draw = function(renderer) {\n\t\tvar x = this.x;\n\t\tif (this.pitch === undefined)\n\t\t\twindow.console.error(\"Tempo Element y-coordinate not set.\");\n\n\t\tvar y = renderer.calcY(this.pitch);\n\t\tvar text;\n\t\tif (this.tempo.preString) {\n\t\t\ttext = renderer.renderText(x, y, this.tempo.preString, 'tempofont', 'tempo', \"start\");\n\t\t\tvar preWidth = text.getBBox().width;\n\t\t\tvar charWidth = preWidth / this.tempo.preString.length; // Just get some average number to increase the spacing.\n\t\t\tx += preWidth + charWidth;\n\t\t}\n\t\tif (this.tempo.duration && !this.tempo.suppressBpm) {\n\t\t\tvar temposcale = 0.75;\n\t\t\tvar tempopitch = this.pitch - totalHeightInPitches + 1; // The pitch we receive is the top of the allotted area: change that to practically the bottom.\n\t\t\tvar duration = this.tempo.duration[0]; // TODO when multiple durations\n\t\t\tvar abselem = new AbsoluteElement(this.tempo, duration, 1, 'tempo', this.tuneNumber);\n\t\t\t// There aren't an infinite number of note values, but we are passed a float, so just in case something is off upstream,\n\t\t\t// merge all of the in between points.\n\t\t\tvar dot;\n\t\t\tvar flag;\n\t\t\tvar note;\n\t\t\tif (duration <= 1/32) { note = \"noteheads.quarter\"; flag = \"flags.u32nd\"; dot = 0; }\n\t\t\telse if (duration <= 1/16) { note = \"noteheads.quarter\"; flag = \"flags.u16th\"; dot = 0; }\n\t\t\telse if (duration <= 3/32) { note = \"noteheads.quarter\"; flag = \"flags.u16nd\"; dot = 1; }\n\t\t\telse if (duration <= 1/8) { note = \"noteheads.quarter\"; flag = \"flags.u8th\"; dot = 0; }\n\t\t\telse if (duration <= 3/16) { note = \"noteheads.quarter\"; flag = \"flags.u8th\"; dot = 1; }\n\t\t\telse if (duration <= 1/4) { note = \"noteheads.quarter\"; dot = 0; }\n\t\t\telse if (duration <= 3/8) { note = \"noteheads.quarter\"; dot = 1; }\n\t\t\telse if (duration <= 1/2) { note = \"noteheads.half\"; dot = 0; }\n\t\t\telse if (duration <= 3/4) { note = \"noteheads.half\"; dot = 1; }\n\t\t\telse if (duration <= 1) { note = \"noteheads.whole\"; dot = 0; }\n\t\t\telse if (duration <= 1.5) { note = \"noteheads.whole\"; dot = 1; }\n\t\t\telse if (duration <= 2) { note = \"noteheads.dbl\"; dot = 0; }\n\t\t\telse { note = \"noteheads.dbl\"; dot = 1; }\n\n\t\t\t// TODO-PER: the following had a bug in it when there are dotted notes - so the above code brute forces it.\n\t\t\t// var durlog = Math.floor(Math.log(duration) / Math.log(2));\n\t\t\t// var dot = 0;\n\t\t\t// for (var tot = Math.pow(2, durlog), inc = tot / 2; tot < duration; dot++, tot += inc, inc /= 2);\n\t\t\t// var note = renderer.engraver.chartable.note[-durlog];\n\t\t\t// var flag = renderer.engraver.chartable.uflags[-durlog];\n\t\t\tvar temponote = renderer.engraver.createNoteHead(abselem, // TODO-PER: This seems late to be creating this element. Shouldn't it happen before draw?\n\t\t\t\tnote,\n\t\t\t\t{verticalPos: tempopitch},\n\t\t\t\t\"up\",\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tflag,\n\t\t\t\tdot,\n\t\t\t\t0,\n\t\t\t\ttemposcale\n\t\t\t);\n\t\t\tabselem.addHead(temponote);\n\t\t\tvar stem;\n\t\t\tif (note !== \"noteheads.whole\" && note !== \"noteheads.dbl\") {\n\t\t\t\tvar p1 = tempopitch + 1 / 3 * temposcale;\n\t\t\t\tvar p2 = tempopitch + 7 * temposcale;\n\t\t\t\tvar dx = temponote.dx + temponote.w;\n\t\t\t\tvar width = -0.6;\n\t\t\t\tstem = new RelativeElement(null, dx, 0, p1, {\"type\": \"stem\", \"pitch2\": p2, linewidth: width});\n\t\t\t\tstem.setX(x);\n\t\t\t\tabselem.addExtra(stem);\n\t\t\t}\n\t\t\tabselem.setX(x);\n\t\t\tfor (var i = 0; i < abselem.children.length; i++)\n\t\t\t\tabselem.children[i].draw(renderer, x);\n\t\t\tx += (abselem.w + 5);\n\t\t\tvar str = \"= \" + this.tempo.bpm;\n\t\t\ttext = renderer.renderText(x, y, str, 'tempofont', 'tempo', \"start\");\n\t\t\tvar postWidth = text.getBBox().width;\n\t\t\tvar charWidth2 = postWidth / str.length; // Just get some average number to increase the spacing.\n\t\t\tx += postWidth + charWidth2;\n\t\t}\n\t\tif (this.tempo.postString) {\n\t\t\trenderer.renderText(x, y, this.tempo.postString, 'tempofont', 'tempo', \"start\");\n\t\t}\n\t};\n})();\n\nmodule.exports = TempoElement;\n"]},"metadata":{},"sourceType":"script"}