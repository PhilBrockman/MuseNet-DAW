{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicGenReGit/app/http/web/app/src/DAW/Notes.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet COLORS = [\"red\", \"blue\", \"green\"];\nexport const Notes = props => {\n  let tracks = props.tracks.map((track, trackIndex) => {\n    if (trackIndex === props.activeTrack || props.allVisible) {\n      return track.notes.map((note, noteIndex) => {\n        return /*#__PURE__*/_jsxDEV(Note, { ...props,\n          note: note,\n          keyName: trackIndex + \"-\" + noteIndex,\n          inactive: trackIndex === props.activeTrack,\n          color: COLORS[trackIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 16\n        }, this);\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, trackIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tracks\n  }, void 0, false);\n};\n_c = Notes;\n\nconst Note = props => {\n  let unitCellHeight = 30;\n  let cellHeight = unitCellHeight;\n  let cellWidth = props.bpm * props.note.duration / 60 * props.dawResolution;\n  let topOffset = unitCellHeight * (props.offset - props.note.pitch);\n  let leftOffset = props.bpm * props.note.time_on / 60 * props.dawResolution;\n  let style = {\n    position: \"absolute\",\n    height: `${cellHeight}px`,\n    width: `${cellWidth}px`,\n    top: `${topOffset}px`,\n    left: `${leftOffset}px`\n  }; // console.log(\"sstlye\", style)\n\n  if (props.inactive) {\n    style.backgroundColor = props.color;\n  } else {\n    style.backgroundColor = \"blue\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    style: style\n  }, props.keyName, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n\n_c2 = Note;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Notes\");\n$RefreshReg$(_c2, \"Note\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicGenReGit/app/http/web/app/src/DAW/Notes.js"],"names":["React","COLORS","Notes","props","tracks","map","track","trackIndex","activeTrack","allVisible","notes","note","noteIndex","Note","unitCellHeight","cellHeight","cellWidth","bpm","duration","dawResolution","topOffset","offset","pitch","leftOffset","time_on","style","position","height","width","top","left","inactive","backgroundColor","color","keyName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,IAAIC,MAAM,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,CAAb;AAGA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9B,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQC,UAAR,KAAuB;AACnD,QAAGA,UAAU,KAAKJ,KAAK,CAACK,WAArB,IAAoCL,KAAK,CAACM,UAA7C,EAAwD;AACtD,aAAOH,KAAK,CAACI,KAAN,CAAYL,GAAZ,CAAgB,CAACM,IAAD,EAAOC,SAAP,KAAqB;AAC1C,4BAAO,QAAC,IAAD,OAAUT,KAAV;AACO,UAAA,IAAI,EAAEQ,IADb;AAGO,UAAA,OAAO,EAAEJ,UAAU,GAAC,GAAX,GAAeK,SAH/B;AAKO,UAAA,QAAQ,EAAEL,UAAU,KAAKJ,KAAK,CAACK,WALtC;AAMO,UAAA,KAAK,EAAEP,MAAM,CAACM,UAAD;AANpB;AAAA;AAAA;AAAA;AAAA,gBAAP;AAOD,OARM,CAAP;AASD,KAVD,MAUO;AACL,0BAAO,mBAAUA,UAAV;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GAdY,CAAb;AAgBA,sBAAO;AAAA,cAAGH;AAAH,mBAAP;AACD,CAlBM;KAAMF,K;;AAoBb,MAAMW,IAAI,GAAIV,KAAD,IAAW;AACtB,MAAIW,cAAc,GAAC,EAAnB;AAEA,MAAIC,UAAU,GAAGD,cAAjB;AACA,MAAIE,SAAS,GAAEb,KAAK,CAACc,GAAN,GAAUd,KAAK,CAACQ,IAAN,CAAWO,QAArB,GAA8B,EAA/B,GAAmCf,KAAK,CAACgB,aAAvD;AACA,MAAIC,SAAS,GAACN,cAAc,IAAEX,KAAK,CAACkB,MAAN,GAAelB,KAAK,CAACQ,IAAN,CAAWW,KAA5B,CAA5B;AACA,MAAIC,UAAU,GAACpB,KAAK,CAACc,GAAN,GAAWd,KAAK,CAACQ,IAAN,CAAWa,OAAtB,GAA+B,EAA/B,GAAkCrB,KAAK,CAACgB,aAAvD;AAEA,MAAIM,KAAK,GAAG;AACVC,IAAAA,QAAQ,EAAE,UADA;AAEVC,IAAAA,MAAM,EAAE,GAAEZ,UAAW,IAFX;AAGVa,IAAAA,KAAK,EAAE,GAAEZ,SAAU,IAHT;AAIVa,IAAAA,GAAG,EAAE,GAAET,SAAU,IAJP;AAKVU,IAAAA,IAAI,EAAE,GAAEP,UAAW;AALT,GAAZ,CARsB,CAgBtB;;AAEA,MAAGpB,KAAK,CAAC4B,QAAT,EAAkB;AAChBN,IAAAA,KAAK,CAACO,eAAN,GAAwB7B,KAAK,CAAC8B,KAA9B;AACD,GAFD,MAEO;AACLR,IAAAA,KAAK,CAACO,eAAN,GAAwB,MAAxB;AACD;;AAED,sBAAO;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAEP;AAA7B,KAAyCtB,KAAK,CAAC+B,OAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzBD;;MAAMrB,I","sourcesContent":["import React from 'react';\n\nlet COLORS = [\"red\", \"blue\", \"green\"]\n\n\nexport const Notes = (props) => {\n  let tracks = props.tracks.map((track, trackIndex) => {\n    if(trackIndex === props.activeTrack || props.allVisible){\n      return track.notes.map((note, noteIndex) => {\n        return <Note {...props}\n                      note={note}\n\n                      keyName={trackIndex+\"-\"+noteIndex}\n\n                      inactive={trackIndex === props.activeTrack}\n                      color={COLORS[trackIndex]}/>\n      })\n    } else {\n      return <div key={trackIndex}></div>\n    }\n  })\n\n  return <>{tracks}</>\n}\n\nconst Note = (props) => {\n  let unitCellHeight=30;\n\n  let cellHeight = unitCellHeight;\n  let cellWidth=(props.bpm*props.note.duration/60)*props.dawResolution;\n  let topOffset=unitCellHeight*(props.offset - props.note.pitch);\n  let leftOffset=props.bpm*(props.note.time_on)/60*props.dawResolution;\n\n  let style = {\n    position: \"absolute\",\n    height:`${cellHeight}px`,\n    width:`${cellWidth}px`,\n    top:`${topOffset}px`,\n    left:`${leftOffset}px`\n  }\n\n  // console.log(\"sstlye\", style)\n\n  if(props.inactive){\n    style.backgroundColor = props.color;\n  } else {\n    style.backgroundColor = \"blue\"\n  }\n\n  return <div className=\"note\" style={style} key={props.keyName}></div>\n}\n"]},"metadata":{},"sourceType":"module"}