{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SliderInput = props => {\n  _s();\n\n  const data = props.data;\n  const step_size = data.max < 3 ? .01 : 1;\n  const [value, setValue] = React.useState(data.default);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"MuseNetOption\",\n      id: data.toParam,\n      type: \"range\",\n      min: data.min,\n      max: data.max,\n      value: data.defaultValue,\n      step: step_size,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), value]\n  }, void 0, true);\n};\n\n_s(SliderInput, \"DknvUS6wHYWb6ljkXGYy7AJ//Ww=\");\n\n_c = SliderInput;\n\nconst Checkbox = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"MuseNetOption\",\n    type: \"checkbox\",\n    id: props.data,\n    value: props.data,\n    checked: props.checked,\n    onClick: props.onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Checkbox;\n\nconst Checkboxes = props => {\n  _s2();\n\n  const [values, setValues] = React.useState(props.data.default);\n\n  function handleClick(e) {\n    let target = e.target.value;\n    let newValues = values.includes(target) ? values.filter(i => i !== target) : [...values, target];\n    setValues([...newValues]);\n  }\n\n  let boxes = props.data.options.map(item => /*#__PURE__*/_jsxDEV(Checkbox, {\n    data: item,\n    checked: values.includes(item),\n    onClick: handleClick\n  }, item, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 46\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [boxes, JSON.stringify(values)]\n  }, void 0, true);\n};\n\n_s2(Checkboxes, \"BhFIlXSTMT8O+23My2Myr+rYmnI=\");\n\n_c3 = Checkboxes;\nexport const InputSelector = props => {\n  const data = props.data;\n  const choice = data.inputType;\n\n  if (choice === \"select\") {\n    let options = data.options.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item,\n      children: item\n    }, item, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 44\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      id: data.toParam,\n      className: \"MuseNetOption\",\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  } else if (choice === \"slider\") {\n    return /*#__PURE__*/_jsxDEV(SliderInput, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  } else if (choice === \"checkboxinput\") {\n    return /*#__PURE__*/_jsxDEV(Checkboxes, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  } else {\n    return failed(\"failure\");\n  }\n};\n_c4 = InputSelector;\n\nconst failed = text => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: text\n}, void 0, false);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SliderInput\");\n$RefreshReg$(_c2, \"Checkbox\");\n$RefreshReg$(_c3, \"Checkboxes\");\n$RefreshReg$(_c4, \"InputSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/MusicalGens/app/http/web/app/src/Selection/Inputs.js"],"names":["React","SliderInput","props","data","step_size","max","value","setValue","useState","default","handleChange","e","target","toParam","min","defaultValue","Checkbox","checked","onClick","Checkboxes","values","setValues","handleClick","newValues","includes","filter","i","boxes","options","map","item","JSON","stringify","InputSelector","choice","inputType","failed","text"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMC,SAAS,GAAGD,IAAI,CAACE,GAAL,GAAW,CAAX,GAAe,GAAf,GAAqB,CAAvC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAeL,IAAI,CAACM,OAApB,CAA1B;;AAEA,WAASC,YAAT,CAAsBC,CAAtB,EAAwB;AACtBJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAR;AACD;;AAED,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,EAAE,EAAEH,IAAI,CAACU,OAFX;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,GAAG,EAAEV,IAAI,CAACW,GAJZ;AAKE,MAAA,GAAG,EAAEX,IAAI,CAACE,GALZ;AAME,MAAA,KAAK,EAAEF,IAAI,CAACY,YANd;AAOE,MAAA,IAAI,EAAEX,SAPR;AAQE,MAAA,QAAQ,EAAEM;AARZ;AAAA;AAAA;AAAA;AAAA,YADF,EAUGJ,KAVH;AAAA,kBADF;AAcD,CAvBD;;GAAML,W;;KAAAA,W;;AAyBN,MAAMe,QAAQ,GAAId,KAAD,IAAU;AACzB,sBACE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,EAAE,EAAEA,KAAK,CAACC,IAHZ;AAIE,IAAA,KAAK,EAAED,KAAK,CAACC,IAJf;AAKE,IAAA,OAAO,EAAED,KAAK,CAACe,OALjB;AAME,IAAA,OAAO,EAAEf,KAAK,CAACgB;AANjB;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD;;MAAMF,Q;;AAaN,MAAMG,UAAU,GAAIjB,KAAD,IAAW;AAAA;;AAC5B,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBrB,KAAK,CAACQ,QAAN,CAAeN,KAAK,CAACC,IAAN,CAAWM,OAA1B,CAA5B;;AAEA,WAASa,WAAT,CAAqBX,CAArB,EAAuB;AACrB,QAAIC,MAAM,GAAGD,CAAC,CAACC,MAAF,CAASN,KAAtB;AACA,QAAIiB,SAAS,GAAGH,MAAM,CAACI,QAAP,CAAgBZ,MAAhB,IACIQ,MAAM,CAACK,MAAP,CAAcC,CAAC,IAAIA,CAAC,KAAKd,MAAzB,CADJ,GAEI,CAAC,GAAGQ,MAAJ,EAAYR,MAAZ,CAFpB;AAGAS,IAAAA,SAAS,CAAC,CAAC,GAAGE,SAAJ,CAAD,CAAT;AACD;;AAED,MAAII,KAAK,GAAGzB,KAAK,CAACC,IAAN,CAAWyB,OAAX,CAAmBC,GAAnB,CAAuBC,IAAI,iBAAI,QAAC,QAAD;AAEzC,IAAA,IAAI,EAAEA,IAFmC;AAGzC,IAAA,OAAO,EAAEV,MAAM,CAACI,QAAP,CAAgBM,IAAhB,CAHgC;AAIzC,IAAA,OAAO,EAAER;AAJgC,KACpCQ,IADoC;AAAA;AAAA;AAAA;AAAA,UAA/B,CAAZ;AAOA,sBACE;AAAA,eACGH,KADH,EAEGI,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAFH;AAAA,kBADF;AAMD,CAxBD;;IAAMD,U;;MAAAA,U;AA0BN,OAAO,MAAMc,aAAa,GAAI/B,KAAD,IAAW;AACtC,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAM+B,MAAM,GAAG/B,IAAI,CAACgC,SAApB;;AAEA,MAAGD,MAAM,KAAK,QAAd,EAAuB;AACrB,QAAIN,OAAO,GAAGzB,IAAI,CAACyB,OAAL,CAAaC,GAAb,CAAiBC,IAAI,iBAAI;AAAmB,MAAA,KAAK,EAAEA,IAA1B;AAAA,gBAAiCA;AAAjC,OAAaA,IAAb;AAAA;AAAA;AAAA;AAAA,YAAzB,CAAd;AACA,wBACE;AACE,MAAA,EAAE,EAAE3B,IAAI,CAACU,OADX;AAEE,MAAA,SAAS,EAAC,eAFZ;AAAA,gBAGGe;AAHH;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GATD,MASO,IAAIM,MAAM,KAAK,QAAf,EAAwB;AAC7B,wBACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAE/B;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJM,MAIA,IAAI+B,MAAM,KAAK,eAAf,EAA+B;AACpC,wBAAO,QAAC,UAAD;AAAY,MAAA,IAAI,EAAE/B;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,WAAOiC,MAAM,CAAC,SAAD,CAAb;AACD;AACF,CAtBM;MAAMH,a;;AAwBb,MAAMG,MAAM,GAAIC,IAAD,iBAAU;AAAA,YAAGA;AAAH,iBAAzB","sourcesContent":["import React from 'react';\n\nconst SliderInput = (props) => {\n  const data = props.data\n  const step_size = data.max < 3 ? .01 : 1;\n  const [value, setValue] = React.useState(data.default)\n\n  function handleChange(e){\n    setValue(e.target.value)\n  }\n\n  return (\n    <>\n      <input\n        className=\"MuseNetOption\"\n        id={data.toParam}\n        type=\"range\"\n        min={data.min}\n        max={data.max}\n        value={data.defaultValue}\n        step={step_size}\n        onChange={handleChange}/>\n      {value}\n    </>\n  );\n}\n\nconst Checkbox = (props) =>{\n  return(\n    <input\n      className=\"MuseNetOption\"\n      type=\"checkbox\"\n      id={props.data}\n      value={props.data}\n      checked={props.checked}\n      onClick={props.onClick}\n      />\n  );\n}\n\nconst Checkboxes = (props) => {\n  const [values, setValues] = React.useState(props.data.default)\n\n  function handleClick(e){\n    let target = e.target.value;\n    let newValues = values.includes(target)\n                      ? values.filter(i => i !== target)\n                      : [...values, target]\n    setValues([...newValues])\n  }\n\n  let boxes = props.data.options.map(item => <Checkbox\n    key={item}\n    data={item}\n    checked={values.includes(item)}\n    onClick={handleClick}\n    />);\n\n  return (\n    <>\n      {boxes}\n      {JSON.stringify(values)}\n    </>\n  )\n}\n\nexport const InputSelector = (props) => {\n  const data = props.data\n  const choice = data.inputType;\n\n  if(choice === \"select\"){\n    let options = data.options.map(item => <option key={item} value={item}>{item}</option> )\n    return (\n      <select\n        id={data.toParam}\n        className=\"MuseNetOption\">\n        {options}\n      </select>\n    );\n  } else if (choice === \"slider\"){\n    return (\n      <SliderInput data={data} />\n    );\n  } else if (choice === \"checkboxinput\"){\n    return <Checkboxes data={data} />\n  } else {\n    return failed(\"failure\")\n  }\n}\n\nconst failed = (text) => <>{text}</>;\n"]},"metadata":{},"sourceType":"module"}